/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchResultsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResultsObject{}

// SearchResultsObject struct for SearchResultsObject
type SearchResultsObject struct {
	Resources []map[string]interface{} `json:"resources,omitempty"`
	StartIndex *int32 `json:"startIndex,omitempty"`
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`
	TotalResults *int32 `json:"totalResults,omitempty"`
	Schemas []string `json:"schemas,omitempty"`
}

// NewSearchResultsObject instantiates a new SearchResultsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultsObject() *SearchResultsObject {
	this := SearchResultsObject{}
	return &this
}

// NewSearchResultsObjectWithDefaults instantiates a new SearchResultsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultsObjectWithDefaults() *SearchResultsObject {
	this := SearchResultsObject{}
	return &this
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *SearchResultsObject) GetResources() []map[string]interface{} {
	if o == nil || IsNil(o.Resources) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsObject) GetResourcesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *SearchResultsObject) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []map[string]interface{} and assigns it to the Resources field.
func (o *SearchResultsObject) SetResources(v []map[string]interface{}) {
	o.Resources = v
}

// GetStartIndex returns the StartIndex field value if set, zero value otherwise.
func (o *SearchResultsObject) GetStartIndex() int32 {
	if o == nil || IsNil(o.StartIndex) {
		var ret int32
		return ret
	}
	return *o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsObject) GetStartIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.StartIndex) {
		return nil, false
	}
	return o.StartIndex, true
}

// HasStartIndex returns a boolean if a field has been set.
func (o *SearchResultsObject) HasStartIndex() bool {
	if o != nil && !IsNil(o.StartIndex) {
		return true
	}

	return false
}

// SetStartIndex gets a reference to the given int32 and assigns it to the StartIndex field.
func (o *SearchResultsObject) SetStartIndex(v int32) {
	o.StartIndex = &v
}

// GetItemsPerPage returns the ItemsPerPage field value if set, zero value otherwise.
func (o *SearchResultsObject) GetItemsPerPage() int32 {
	if o == nil || IsNil(o.ItemsPerPage) {
		var ret int32
		return ret
	}
	return *o.ItemsPerPage
}

// GetItemsPerPageOk returns a tuple with the ItemsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsObject) GetItemsPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemsPerPage) {
		return nil, false
	}
	return o.ItemsPerPage, true
}

// HasItemsPerPage returns a boolean if a field has been set.
func (o *SearchResultsObject) HasItemsPerPage() bool {
	if o != nil && !IsNil(o.ItemsPerPage) {
		return true
	}

	return false
}

// SetItemsPerPage gets a reference to the given int32 and assigns it to the ItemsPerPage field.
func (o *SearchResultsObject) SetItemsPerPage(v int32) {
	o.ItemsPerPage = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *SearchResultsObject) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsObject) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *SearchResultsObject) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *SearchResultsObject) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *SearchResultsObject) GetSchemas() []string {
	if o == nil || IsNil(o.Schemas) {
		var ret []string
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultsObject) GetSchemasOk() ([]string, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *SearchResultsObject) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []string and assigns it to the Schemas field.
func (o *SearchResultsObject) SetSchemas(v []string) {
	o.Schemas = v
}

func (o SearchResultsObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResultsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.StartIndex) {
		toSerialize["startIndex"] = o.StartIndex
	}
	if !IsNil(o.ItemsPerPage) {
		toSerialize["itemsPerPage"] = o.ItemsPerPage
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	return toSerialize, nil
}

type NullableSearchResultsObject struct {
	value *SearchResultsObject
	isSet bool
}

func (v NullableSearchResultsObject) Get() *SearchResultsObject {
	return v.value
}

func (v *NullableSearchResultsObject) Set(val *SearchResultsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultsObject(val *SearchResultsObject) *NullableSearchResultsObject {
	return &NullableSearchResultsObject{value: val, isSet: true}
}

func (v NullableSearchResultsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


