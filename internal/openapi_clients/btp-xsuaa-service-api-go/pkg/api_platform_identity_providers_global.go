/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PlatformIdentityProvidersGlobalAPI interface {

	/*
	AddPlatformIdentityProviderGlobalAccountId Adds a globalAccountId.

	Adds a globalAccountId to a custom platform IdP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest
	*/
	AddPlatformIdentityProviderGlobalAccountId(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest

	// AddPlatformIdentityProviderGlobalAccountIdExecute executes the request
	//  @return XSPlatformIdentityProvider
	AddPlatformIdentityProviderGlobalAccountIdExecute(r PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	CreatePlatformIdentityProvider Creates a custom platform identity provider.

	Creates a custom platform IdP and distributes the information in the own region.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest
	*/
	CreatePlatformIdentityProvider(ctx context.Context) PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest

	// CreatePlatformIdentityProviderExecute executes the request
	//  @return XSPlatformIdentityProvider
	CreatePlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	DeletePlatformIdentityProvider Deletes a custom platform identity provider.

	Deletes a custom platform IdP and distributes the information in the own region.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest
	*/
	DeletePlatformIdentityProvider(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest

	// DeletePlatformIdentityProviderExecute executes the request
	//  @return XSPlatformIdentityProvider
	DeletePlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	DeletePlatformIdentityProviderGlobalAccountId Deletes a globalAccountId.

	Deletes a globalAccountId to a custom platform IdP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@param globalAccountId
	@return PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest
	*/
	DeletePlatformIdentityProviderGlobalAccountId(ctx context.Context, originKey string, globalAccountId string) PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest

	// DeletePlatformIdentityProviderGlobalAccountIdExecute executes the request
	//  @return XSPlatformIdentityProvider
	DeletePlatformIdentityProviderGlobalAccountIdExecute(r PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	GetPlatformIdentityProvider Reads a custom platform identity provider.

	Reads a custom platform IdP from own region.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest
	*/
	GetPlatformIdentityProvider(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest

	// GetPlatformIdentityProviderExecute executes the request
	//  @return XSPlatformIdentityProvider
	GetPlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	GetPlatformIdentityProviderGlobalAccountIds Reads GlobalAccountIds.

	Reads GlobalAccountIds of a custom platform IdP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest
	*/
	GetPlatformIdentityProviderGlobalAccountIds(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest

	// GetPlatformIdentityProviderGlobalAccountIdsExecute executes the request
	//  @return XSPlatformIdentityProvider
	GetPlatformIdentityProviderGlobalAccountIdsExecute(r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	GetPlatformIdentityProviders Reads all custom platform identity providers.

	Reads all custom platform IdPs from own region.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest
	*/
	GetPlatformIdentityProviders(ctx context.Context) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest

	// GetPlatformIdentityProvidersExecute executes the request
	//  @return XSPlatformIdentityProvider
	GetPlatformIdentityProvidersExecute(r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	RefreshPlatformIdentityProviderTrusts Refreshes platform Identity Provider trusts.

	Refreshes all platform Identity Provider trusts or trusts provided in the body.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest
	*/
	RefreshPlatformIdentityProviderTrusts(ctx context.Context) PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest

	// RefreshPlatformIdentityProviderTrustsExecute executes the request
	//  @return XSPlatformIdentityProvider
	RefreshPlatformIdentityProviderTrustsExecute(r PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	UpdatePlatformIdentityProvider Updates a custom platform identity provider.

	Updates a custom platform IdP and distributes the information in the own region.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest
	*/
	UpdatePlatformIdentityProvider(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest

	// UpdatePlatformIdentityProviderExecute executes the request
	//  @return XSPlatformIdentityProvider
	UpdatePlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error)
}

// PlatformIdentityProvidersGlobalAPIService PlatformIdentityProvidersGlobalAPI service
type PlatformIdentityProvidersGlobalAPIService service

type PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	originKey string
	body *string
}

func (r PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest) Body(body string) PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest {
	r.body = &body
	return r
}

func (r PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.AddPlatformIdentityProviderGlobalAccountIdExecute(r)
}

/*
AddPlatformIdentityProviderGlobalAccountId Adds a globalAccountId.

Adds a globalAccountId to a custom platform IdP.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) AddPlatformIdentityProviderGlobalAccountId(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest {
	return PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) AddPlatformIdentityProviderGlobalAccountIdExecute(r PlatformIdentityProvidersGlobalAPIAddPlatformIdentityProviderGlobalAccountIdRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.AddPlatformIdentityProviderGlobalAccountId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global/{originKey}/globalaccountids"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	xSPlatformIdentityProvider *XSPlatformIdentityProvider
}

func (r PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest) XSPlatformIdentityProvider(xSPlatformIdentityProvider XSPlatformIdentityProvider) PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest {
	r.xSPlatformIdentityProvider = &xSPlatformIdentityProvider
	return r
}

func (r PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.CreatePlatformIdentityProviderExecute(r)
}

/*
CreatePlatformIdentityProvider Creates a custom platform identity provider.

Creates a custom platform IdP and distributes the information in the own region.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) CreatePlatformIdentityProvider(ctx context.Context) PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest {
	return PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) CreatePlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPICreatePlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.CreatePlatformIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xSPlatformIdentityProvider == nil {
		return localVarReturnValue, nil, reportError("xSPlatformIdentityProvider is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xSPlatformIdentityProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	originKey string
}

func (r PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.DeletePlatformIdentityProviderExecute(r)
}

/*
DeletePlatformIdentityProvider Deletes a custom platform identity provider.

Deletes a custom platform IdP and distributes the information in the own region.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) DeletePlatformIdentityProvider(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest {
	return PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) DeletePlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.DeletePlatformIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	originKey string
	globalAccountId string
}

func (r PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.DeletePlatformIdentityProviderGlobalAccountIdExecute(r)
}

/*
DeletePlatformIdentityProviderGlobalAccountId Deletes a globalAccountId.

Deletes a globalAccountId to a custom platform IdP.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @param globalAccountId
 @return PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) DeletePlatformIdentityProviderGlobalAccountId(ctx context.Context, originKey string, globalAccountId string) PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest {
	return PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
		globalAccountId: globalAccountId,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) DeletePlatformIdentityProviderGlobalAccountIdExecute(r PlatformIdentityProvidersGlobalAPIDeletePlatformIdentityProviderGlobalAccountIdRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.DeletePlatformIdentityProviderGlobalAccountId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global/{originKey}/globalaccountids/{globalAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"globalAccountId"+"}", url.PathEscape(parameterValueToString(r.globalAccountId, "globalAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	originKey string
	deleted *string
	refreshMetadata *bool
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest) Deleted(deleted string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest {
	r.deleted = &deleted
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest) RefreshMetadata(refreshMetadata bool) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest {
	r.refreshMetadata = &refreshMetadata
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.GetPlatformIdentityProviderExecute(r)
}

/*
GetPlatformIdentityProvider Reads a custom platform identity provider.

Reads a custom platform IdP from own region.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) GetPlatformIdentityProvider(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest {
	return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) GetPlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.GetPlatformIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deleted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted", r.deleted, "form", "")
	}
	if r.refreshMetadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshMetadata", r.refreshMetadata, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	originKey string
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.GetPlatformIdentityProviderGlobalAccountIdsExecute(r)
}

/*
GetPlatformIdentityProviderGlobalAccountIds Reads GlobalAccountIds.

Reads GlobalAccountIds of a custom platform IdP.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) GetPlatformIdentityProviderGlobalAccountIds(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest {
	return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) GetPlatformIdentityProviderGlobalAccountIdsExecute(r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProviderGlobalAccountIdsRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.GetPlatformIdentityProviderGlobalAccountIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global/{originKey}/globalaccountids"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	userbase *string
	deleted *string
	fromModifiedAtInMillis *int64
	globalAccountId *string
	active *string
	originXsuaa *string
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) Userbase(userbase string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest {
	r.userbase = &userbase
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) Deleted(deleted string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest {
	r.deleted = &deleted
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) FromModifiedAtInMillis(fromModifiedAtInMillis int64) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest {
	r.fromModifiedAtInMillis = &fromModifiedAtInMillis
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) GlobalAccountId(globalAccountId string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest {
	r.globalAccountId = &globalAccountId
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) Active(active string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest {
	r.active = &active
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) OriginXsuaa(originXsuaa string) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest {
	r.originXsuaa = &originXsuaa
	return r
}

func (r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.GetPlatformIdentityProvidersExecute(r)
}

/*
GetPlatformIdentityProviders Reads all custom platform identity providers.

Reads all custom platform IdPs from own region.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) GetPlatformIdentityProviders(ctx context.Context) PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest {
	return PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) GetPlatformIdentityProvidersExecute(r PlatformIdentityProvidersGlobalAPIGetPlatformIdentityProvidersRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.GetPlatformIdentityProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userbase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userbase", r.userbase, "form", "")
	}
	if r.deleted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted", r.deleted, "form", "")
	}
	if r.fromModifiedAtInMillis != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromModifiedAtInMillis", r.fromModifiedAtInMillis, "form", "")
	}
	if r.globalAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "globalAccountId", r.globalAccountId, "form", "")
	}
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "active", r.active, "form", "")
	}
	if r.originXsuaa != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originXsuaa", r.originXsuaa, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v []XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v []XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	requestBody *[]string
}

func (r PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest) RequestBody(requestBody []string) PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest {
	r.requestBody = &requestBody
	return r
}

func (r PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.RefreshPlatformIdentityProviderTrustsExecute(r)
}

/*
RefreshPlatformIdentityProviderTrusts Refreshes platform Identity Provider trusts.

Refreshes all platform Identity Provider trusts or trusts provided in the body.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) RefreshPlatformIdentityProviderTrusts(ctx context.Context) PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest {
	return PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) RefreshPlatformIdentityProviderTrustsExecute(r PlatformIdentityProvidersGlobalAPIRefreshPlatformIdentityProviderTrustsRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.RefreshPlatformIdentityProviderTrusts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global/refreshTrusts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersGlobalAPI
	originKey string
	xSPlatformIdentityProvider *XSPlatformIdentityProvider
	refreshTrust *bool
}

func (r PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest) XSPlatformIdentityProvider(xSPlatformIdentityProvider XSPlatformIdentityProvider) PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest {
	r.xSPlatformIdentityProvider = &xSPlatformIdentityProvider
	return r
}

func (r PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest) RefreshTrust(refreshTrust bool) PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest {
	r.refreshTrust = &refreshTrust
	return r
}

func (r PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.UpdatePlatformIdentityProviderExecute(r)
}

/*
UpdatePlatformIdentityProvider Updates a custom platform identity provider.

Updates a custom platform IdP and distributes the information in the own region.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest
*/
func (a *PlatformIdentityProvidersGlobalAPIService) UpdatePlatformIdentityProvider(ctx context.Context, originKey string) PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest {
	return PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersGlobalAPIService) UpdatePlatformIdentityProviderExecute(r PlatformIdentityProvidersGlobalAPIUpdatePlatformIdentityProviderRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersGlobalAPIService.UpdatePlatformIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/platform-identity-providers-global/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xSPlatformIdentityProvider == nil {
		return localVarReturnValue, nil, reportError("xSPlatformIdentityProvider is required and must be specified")
	}

	if r.refreshTrust != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshTrust", r.refreshTrust, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xSPlatformIdentityProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v XSPlatformIdentityProvider
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
