/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SamlConfigSettingsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SamlConfigSettingsResp{}

// SamlConfigSettingsResp struct for SamlConfigSettingsResp
type SamlConfigSettingsResp struct {
	DisableInResponseToCheck *bool `json:"disableInResponseToCheck,omitempty"`
	EntityID *string `json:"entityID,omitempty"`
	ActiveKeyId *string `json:"activeKeyId,omitempty"`
	Keys *map[string]SamlKey `json:"keys,omitempty"`
}

// NewSamlConfigSettingsResp instantiates a new SamlConfigSettingsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlConfigSettingsResp() *SamlConfigSettingsResp {
	this := SamlConfigSettingsResp{}
	return &this
}

// NewSamlConfigSettingsRespWithDefaults instantiates a new SamlConfigSettingsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlConfigSettingsRespWithDefaults() *SamlConfigSettingsResp {
	this := SamlConfigSettingsResp{}
	return &this
}

// GetDisableInResponseToCheck returns the DisableInResponseToCheck field value if set, zero value otherwise.
func (o *SamlConfigSettingsResp) GetDisableInResponseToCheck() bool {
	if o == nil || IsNil(o.DisableInResponseToCheck) {
		var ret bool
		return ret
	}
	return *o.DisableInResponseToCheck
}

// GetDisableInResponseToCheckOk returns a tuple with the DisableInResponseToCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsResp) GetDisableInResponseToCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableInResponseToCheck) {
		return nil, false
	}
	return o.DisableInResponseToCheck, true
}

// HasDisableInResponseToCheck returns a boolean if a field has been set.
func (o *SamlConfigSettingsResp) HasDisableInResponseToCheck() bool {
	if o != nil && !IsNil(o.DisableInResponseToCheck) {
		return true
	}

	return false
}

// SetDisableInResponseToCheck gets a reference to the given bool and assigns it to the DisableInResponseToCheck field.
func (o *SamlConfigSettingsResp) SetDisableInResponseToCheck(v bool) {
	o.DisableInResponseToCheck = &v
}

// GetEntityID returns the EntityID field value if set, zero value otherwise.
func (o *SamlConfigSettingsResp) GetEntityID() string {
	if o == nil || IsNil(o.EntityID) {
		var ret string
		return ret
	}
	return *o.EntityID
}

// GetEntityIDOk returns a tuple with the EntityID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsResp) GetEntityIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntityID) {
		return nil, false
	}
	return o.EntityID, true
}

// HasEntityID returns a boolean if a field has been set.
func (o *SamlConfigSettingsResp) HasEntityID() bool {
	if o != nil && !IsNil(o.EntityID) {
		return true
	}

	return false
}

// SetEntityID gets a reference to the given string and assigns it to the EntityID field.
func (o *SamlConfigSettingsResp) SetEntityID(v string) {
	o.EntityID = &v
}

// GetActiveKeyId returns the ActiveKeyId field value if set, zero value otherwise.
func (o *SamlConfigSettingsResp) GetActiveKeyId() string {
	if o == nil || IsNil(o.ActiveKeyId) {
		var ret string
		return ret
	}
	return *o.ActiveKeyId
}

// GetActiveKeyIdOk returns a tuple with the ActiveKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsResp) GetActiveKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveKeyId) {
		return nil, false
	}
	return o.ActiveKeyId, true
}

// HasActiveKeyId returns a boolean if a field has been set.
func (o *SamlConfigSettingsResp) HasActiveKeyId() bool {
	if o != nil && !IsNil(o.ActiveKeyId) {
		return true
	}

	return false
}

// SetActiveKeyId gets a reference to the given string and assigns it to the ActiveKeyId field.
func (o *SamlConfigSettingsResp) SetActiveKeyId(v string) {
	o.ActiveKeyId = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *SamlConfigSettingsResp) GetKeys() map[string]SamlKey {
	if o == nil || IsNil(o.Keys) {
		var ret map[string]SamlKey
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsResp) GetKeysOk() (*map[string]SamlKey, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *SamlConfigSettingsResp) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given map[string]SamlKey and assigns it to the Keys field.
func (o *SamlConfigSettingsResp) SetKeys(v map[string]SamlKey) {
	o.Keys = &v
}

func (o SamlConfigSettingsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SamlConfigSettingsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableInResponseToCheck) {
		toSerialize["disableInResponseToCheck"] = o.DisableInResponseToCheck
	}
	if !IsNil(o.EntityID) {
		toSerialize["entityID"] = o.EntityID
	}
	if !IsNil(o.ActiveKeyId) {
		toSerialize["activeKeyId"] = o.ActiveKeyId
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableSamlConfigSettingsResp struct {
	value *SamlConfigSettingsResp
	isSet bool
}

func (v NullableSamlConfigSettingsResp) Get() *SamlConfigSettingsResp {
	return v.value
}

func (v *NullableSamlConfigSettingsResp) Set(val *SamlConfigSettingsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlConfigSettingsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlConfigSettingsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlConfigSettingsResp(val *SamlConfigSettingsResp) *NullableSamlConfigSettingsResp {
	return &NullableSamlConfigSettingsResp{value: val, isSet: true}
}

func (v NullableSamlConfigSettingsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlConfigSettingsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


