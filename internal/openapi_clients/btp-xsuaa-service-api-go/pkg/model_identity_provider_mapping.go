/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IdentityProviderMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityProviderMapping{}

// IdentityProviderMapping Attribute added to role collection
type IdentityProviderMapping struct {
	RoleCollectionName *string `json:"roleCollectionName,omitempty"`
	AttributeName *string `json:"attributeName,omitempty"`
	AttributeValue *string `json:"attributeValue,omitempty"`
	Operator *string `json:"operator,omitempty"`
}

// NewIdentityProviderMapping instantiates a new IdentityProviderMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProviderMapping() *IdentityProviderMapping {
	this := IdentityProviderMapping{}
	return &this
}

// NewIdentityProviderMappingWithDefaults instantiates a new IdentityProviderMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderMappingWithDefaults() *IdentityProviderMapping {
	this := IdentityProviderMapping{}
	return &this
}

// GetRoleCollectionName returns the RoleCollectionName field value if set, zero value otherwise.
func (o *IdentityProviderMapping) GetRoleCollectionName() string {
	if o == nil || IsNil(o.RoleCollectionName) {
		var ret string
		return ret
	}
	return *o.RoleCollectionName
}

// GetRoleCollectionNameOk returns a tuple with the RoleCollectionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderMapping) GetRoleCollectionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleCollectionName) {
		return nil, false
	}
	return o.RoleCollectionName, true
}

// HasRoleCollectionName returns a boolean if a field has been set.
func (o *IdentityProviderMapping) HasRoleCollectionName() bool {
	if o != nil && !IsNil(o.RoleCollectionName) {
		return true
	}

	return false
}

// SetRoleCollectionName gets a reference to the given string and assigns it to the RoleCollectionName field.
func (o *IdentityProviderMapping) SetRoleCollectionName(v string) {
	o.RoleCollectionName = &v
}

// GetAttributeName returns the AttributeName field value if set, zero value otherwise.
func (o *IdentityProviderMapping) GetAttributeName() string {
	if o == nil || IsNil(o.AttributeName) {
		var ret string
		return ret
	}
	return *o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderMapping) GetAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeName) {
		return nil, false
	}
	return o.AttributeName, true
}

// HasAttributeName returns a boolean if a field has been set.
func (o *IdentityProviderMapping) HasAttributeName() bool {
	if o != nil && !IsNil(o.AttributeName) {
		return true
	}

	return false
}

// SetAttributeName gets a reference to the given string and assigns it to the AttributeName field.
func (o *IdentityProviderMapping) SetAttributeName(v string) {
	o.AttributeName = &v
}

// GetAttributeValue returns the AttributeValue field value if set, zero value otherwise.
func (o *IdentityProviderMapping) GetAttributeValue() string {
	if o == nil || IsNil(o.AttributeValue) {
		var ret string
		return ret
	}
	return *o.AttributeValue
}

// GetAttributeValueOk returns a tuple with the AttributeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderMapping) GetAttributeValueOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeValue) {
		return nil, false
	}
	return o.AttributeValue, true
}

// HasAttributeValue returns a boolean if a field has been set.
func (o *IdentityProviderMapping) HasAttributeValue() bool {
	if o != nil && !IsNil(o.AttributeValue) {
		return true
	}

	return false
}

// SetAttributeValue gets a reference to the given string and assigns it to the AttributeValue field.
func (o *IdentityProviderMapping) SetAttributeValue(v string) {
	o.AttributeValue = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *IdentityProviderMapping) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderMapping) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *IdentityProviderMapping) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *IdentityProviderMapping) SetOperator(v string) {
	o.Operator = &v
}

func (o IdentityProviderMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityProviderMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleCollectionName) {
		toSerialize["roleCollectionName"] = o.RoleCollectionName
	}
	if !IsNil(o.AttributeName) {
		toSerialize["attributeName"] = o.AttributeName
	}
	if !IsNil(o.AttributeValue) {
		toSerialize["attributeValue"] = o.AttributeValue
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	return toSerialize, nil
}

type NullableIdentityProviderMapping struct {
	value *IdentityProviderMapping
	isSet bool
}

func (v NullableIdentityProviderMapping) Get() *IdentityProviderMapping {
	return v.value
}

func (v *NullableIdentityProviderMapping) Set(val *IdentityProviderMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderMapping(val *IdentityProviderMapping) *NullableIdentityProviderMapping {
	return &NullableIdentityProviderMapping{value: val, isSet: true}
}

func (v NullableIdentityProviderMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


