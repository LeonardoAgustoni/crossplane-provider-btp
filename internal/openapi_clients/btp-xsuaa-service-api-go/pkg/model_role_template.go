/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoleTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleTemplate{}

// RoleTemplate struct for RoleTemplate
type RoleTemplate struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	DefaultRoleName *string `json:"default-role-name,omitempty"`
	ScopeReferences []string `json:"scope-references,omitempty"`
	AttributeReferences []AttributeReference `json:"attribute-references,omitempty"`
	RoleReferences []Role `json:"role-references,omitempty"`
	AppId *string `json:"appId,omitempty"`
	AppName *string `json:"appName,omitempty"`
	AppDescription *string `json:"appDescription,omitempty"`
}

// NewRoleTemplate instantiates a new RoleTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleTemplate() *RoleTemplate {
	this := RoleTemplate{}
	return &this
}

// NewRoleTemplateWithDefaults instantiates a new RoleTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleTemplateWithDefaults() *RoleTemplate {
	this := RoleTemplate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleTemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleTemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleTemplate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleTemplate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleTemplate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleTemplate) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultRoleName returns the DefaultRoleName field value if set, zero value otherwise.
func (o *RoleTemplate) GetDefaultRoleName() string {
	if o == nil || IsNil(o.DefaultRoleName) {
		var ret string
		return ret
	}
	return *o.DefaultRoleName
}

// GetDefaultRoleNameOk returns a tuple with the DefaultRoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetDefaultRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultRoleName) {
		return nil, false
	}
	return o.DefaultRoleName, true
}

// HasDefaultRoleName returns a boolean if a field has been set.
func (o *RoleTemplate) HasDefaultRoleName() bool {
	if o != nil && !IsNil(o.DefaultRoleName) {
		return true
	}

	return false
}

// SetDefaultRoleName gets a reference to the given string and assigns it to the DefaultRoleName field.
func (o *RoleTemplate) SetDefaultRoleName(v string) {
	o.DefaultRoleName = &v
}

// GetScopeReferences returns the ScopeReferences field value if set, zero value otherwise.
func (o *RoleTemplate) GetScopeReferences() []string {
	if o == nil || IsNil(o.ScopeReferences) {
		var ret []string
		return ret
	}
	return o.ScopeReferences
}

// GetScopeReferencesOk returns a tuple with the ScopeReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetScopeReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.ScopeReferences) {
		return nil, false
	}
	return o.ScopeReferences, true
}

// HasScopeReferences returns a boolean if a field has been set.
func (o *RoleTemplate) HasScopeReferences() bool {
	if o != nil && !IsNil(o.ScopeReferences) {
		return true
	}

	return false
}

// SetScopeReferences gets a reference to the given []string and assigns it to the ScopeReferences field.
func (o *RoleTemplate) SetScopeReferences(v []string) {
	o.ScopeReferences = v
}

// GetAttributeReferences returns the AttributeReferences field value if set, zero value otherwise.
func (o *RoleTemplate) GetAttributeReferences() []AttributeReference {
	if o == nil || IsNil(o.AttributeReferences) {
		var ret []AttributeReference
		return ret
	}
	return o.AttributeReferences
}

// GetAttributeReferencesOk returns a tuple with the AttributeReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetAttributeReferencesOk() ([]AttributeReference, bool) {
	if o == nil || IsNil(o.AttributeReferences) {
		return nil, false
	}
	return o.AttributeReferences, true
}

// HasAttributeReferences returns a boolean if a field has been set.
func (o *RoleTemplate) HasAttributeReferences() bool {
	if o != nil && !IsNil(o.AttributeReferences) {
		return true
	}

	return false
}

// SetAttributeReferences gets a reference to the given []AttributeReference and assigns it to the AttributeReferences field.
func (o *RoleTemplate) SetAttributeReferences(v []AttributeReference) {
	o.AttributeReferences = v
}

// GetRoleReferences returns the RoleReferences field value if set, zero value otherwise.
func (o *RoleTemplate) GetRoleReferences() []Role {
	if o == nil || IsNil(o.RoleReferences) {
		var ret []Role
		return ret
	}
	return o.RoleReferences
}

// GetRoleReferencesOk returns a tuple with the RoleReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetRoleReferencesOk() ([]Role, bool) {
	if o == nil || IsNil(o.RoleReferences) {
		return nil, false
	}
	return o.RoleReferences, true
}

// HasRoleReferences returns a boolean if a field has been set.
func (o *RoleTemplate) HasRoleReferences() bool {
	if o != nil && !IsNil(o.RoleReferences) {
		return true
	}

	return false
}

// SetRoleReferences gets a reference to the given []Role and assigns it to the RoleReferences field.
func (o *RoleTemplate) SetRoleReferences(v []Role) {
	o.RoleReferences = v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *RoleTemplate) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *RoleTemplate) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *RoleTemplate) SetAppId(v string) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *RoleTemplate) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *RoleTemplate) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *RoleTemplate) SetAppName(v string) {
	o.AppName = &v
}

// GetAppDescription returns the AppDescription field value if set, zero value otherwise.
func (o *RoleTemplate) GetAppDescription() string {
	if o == nil || IsNil(o.AppDescription) {
		var ret string
		return ret
	}
	return *o.AppDescription
}

// GetAppDescriptionOk returns a tuple with the AppDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTemplate) GetAppDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.AppDescription) {
		return nil, false
	}
	return o.AppDescription, true
}

// HasAppDescription returns a boolean if a field has been set.
func (o *RoleTemplate) HasAppDescription() bool {
	if o != nil && !IsNil(o.AppDescription) {
		return true
	}

	return false
}

// SetAppDescription gets a reference to the given string and assigns it to the AppDescription field.
func (o *RoleTemplate) SetAppDescription(v string) {
	o.AppDescription = &v
}

func (o RoleTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DefaultRoleName) {
		toSerialize["default-role-name"] = o.DefaultRoleName
	}
	if !IsNil(o.ScopeReferences) {
		toSerialize["scope-references"] = o.ScopeReferences
	}
	if !IsNil(o.AttributeReferences) {
		toSerialize["attribute-references"] = o.AttributeReferences
	}
	if !IsNil(o.RoleReferences) {
		toSerialize["role-references"] = o.RoleReferences
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.AppDescription) {
		toSerialize["appDescription"] = o.AppDescription
	}
	return toSerialize, nil
}

type NullableRoleTemplate struct {
	value *RoleTemplate
	isSet bool
}

func (v NullableRoleTemplate) Get() *RoleTemplate {
	return v.value
}

func (v *NullableRoleTemplate) Set(val *RoleTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleTemplate(val *RoleTemplate) *NullableRoleTemplate {
	return &NullableRoleTemplate{value: val, isSet: true}
}

func (v NullableRoleTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


