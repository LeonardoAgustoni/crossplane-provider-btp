/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PlatformIdentityProvidersAPI interface {

	/*
	AddPlatformIdentityProviderTrust Adds GA Trust for a given origin.

	Adds a Trust for a platform identity provider.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param globalAccountId Global account ID
	@return PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest
	*/
	AddPlatformIdentityProviderTrust(ctx context.Context, globalAccountId string) PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest

	// AddPlatformIdentityProviderTrustExecute executes the request
	//  @return XSPlatformIdentityProvider
	AddPlatformIdentityProviderTrustExecute(r PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	DeletePlatformIdentityProviderTrust Deletes a GA Trust for given origin.

	Deletes a trust for a platform identity provider.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param globalAccountId Global account ID
	@param originKey Origin of the trust to remove
	@return PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest
	*/
	DeletePlatformIdentityProviderTrust(ctx context.Context, globalAccountId string, originKey string) PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest

	// DeletePlatformIdentityProviderTrustExecute executes the request
	//  @return XSPlatformIdentityProvider
	DeletePlatformIdentityProviderTrustExecute(r PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest) (*XSPlatformIdentityProvider, *http.Response, error)

	/*
	GetPlatformIdentityProvidersForGA Reads all platform IdPs for token GA.

	Reads all platform identity providers as help values for token GA.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param globalAccountId Global account ID
	@return PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest
	*/
	GetPlatformIdentityProvidersForGA(ctx context.Context, globalAccountId string) PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest

	// GetPlatformIdentityProvidersForGAExecute executes the request
	//  @return []XSPlatformIdentityProvider
	GetPlatformIdentityProvidersForGAExecute(r PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest) ([]XSPlatformIdentityProvider, *http.Response, error)

	/*
	UpdatePlatformIdentityProviderTrust Updates a GA Trust for given origin.

	Updates a trust for a platform identity provider.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param globalAccountId Global account ID
	@param originKey Origin of the trust to remove
	@return PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest
	*/
	UpdatePlatformIdentityProviderTrust(ctx context.Context, globalAccountId string, originKey string) PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest

	// UpdatePlatformIdentityProviderTrustExecute executes the request
	//  @return XSPlatformIdentityProvider
	UpdatePlatformIdentityProviderTrustExecute(r PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest) (*XSPlatformIdentityProvider, *http.Response, error)
}

// PlatformIdentityProvidersAPIService PlatformIdentityProvidersAPI service
type PlatformIdentityProvidersAPIService service

type PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersAPI
	globalAccountId string
	addPlatformIdentityProviderTrust *AddPlatformIdentityProviderTrust
}

func (r PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest) AddPlatformIdentityProviderTrust(addPlatformIdentityProviderTrust AddPlatformIdentityProviderTrust) PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest {
	r.addPlatformIdentityProviderTrust = &addPlatformIdentityProviderTrust
	return r
}

func (r PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.AddPlatformIdentityProviderTrustExecute(r)
}

/*
AddPlatformIdentityProviderTrust Adds GA Trust for a given origin.

Adds a Trust for a platform identity provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param globalAccountId Global account ID
 @return PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest
*/
func (a *PlatformIdentityProvidersAPIService) AddPlatformIdentityProviderTrust(ctx context.Context, globalAccountId string) PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest {
	return PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest{
		ApiService: a,
		ctx: ctx,
		globalAccountId: globalAccountId,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersAPIService) AddPlatformIdentityProviderTrustExecute(r PlatformIdentityProvidersAPIAddPlatformIdentityProviderTrustRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersAPIService.AddPlatformIdentityProviderTrust")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/globalaccount/{globalAccountId}/platform-identity-providers"
	localVarPath = strings.Replace(localVarPath, "{"+"globalAccountId"+"}", url.PathEscape(parameterValueToString(r.globalAccountId, "globalAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addPlatformIdentityProviderTrust == nil {
		return localVarReturnValue, nil, reportError("addPlatformIdentityProviderTrust is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addPlatformIdentityProviderTrust
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersAPI
	globalAccountId string
	originKey string
}

func (r PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.DeletePlatformIdentityProviderTrustExecute(r)
}

/*
DeletePlatformIdentityProviderTrust Deletes a GA Trust for given origin.

Deletes a trust for a platform identity provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param globalAccountId Global account ID
 @param originKey Origin of the trust to remove
 @return PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest
*/
func (a *PlatformIdentityProvidersAPIService) DeletePlatformIdentityProviderTrust(ctx context.Context, globalAccountId string, originKey string) PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest {
	return PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest{
		ApiService: a,
		ctx: ctx,
		globalAccountId: globalAccountId,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersAPIService) DeletePlatformIdentityProviderTrustExecute(r PlatformIdentityProvidersAPIDeletePlatformIdentityProviderTrustRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersAPIService.DeletePlatformIdentityProviderTrust")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/globalaccount/{globalAccountId}/platform-identity-providers/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"globalAccountId"+"}", url.PathEscape(parameterValueToString(r.globalAccountId, "globalAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersAPI
	globalAccountId string
}

func (r PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest) Execute() ([]XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.GetPlatformIdentityProvidersForGAExecute(r)
}

/*
GetPlatformIdentityProvidersForGA Reads all platform IdPs for token GA.

Reads all platform identity providers as help values for token GA.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param globalAccountId Global account ID
 @return PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest
*/
func (a *PlatformIdentityProvidersAPIService) GetPlatformIdentityProvidersForGA(ctx context.Context, globalAccountId string) PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest {
	return PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest{
		ApiService: a,
		ctx: ctx,
		globalAccountId: globalAccountId,
	}
}

// Execute executes the request
//  @return []XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersAPIService) GetPlatformIdentityProvidersForGAExecute(r PlatformIdentityProvidersAPIGetPlatformIdentityProvidersForGARequest) ([]XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersAPIService.GetPlatformIdentityProvidersForGA")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/globalaccount/{globalAccountId}/platform-identity-providers"
	localVarPath = strings.Replace(localVarPath, "{"+"globalAccountId"+"}", url.PathEscape(parameterValueToString(r.globalAccountId, "globalAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest struct {
	ctx context.Context
	ApiService PlatformIdentityProvidersAPI
	globalAccountId string
	originKey string
	addPlatformIdentityProviderTrust *AddPlatformIdentityProviderTrust
	refreshTrust *bool
}

func (r PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest) AddPlatformIdentityProviderTrust(addPlatformIdentityProviderTrust AddPlatformIdentityProviderTrust) PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest {
	r.addPlatformIdentityProviderTrust = &addPlatformIdentityProviderTrust
	return r
}

func (r PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest) RefreshTrust(refreshTrust bool) PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest {
	r.refreshTrust = &refreshTrust
	return r
}

func (r PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest) Execute() (*XSPlatformIdentityProvider, *http.Response, error) {
	return r.ApiService.UpdatePlatformIdentityProviderTrustExecute(r)
}

/*
UpdatePlatformIdentityProviderTrust Updates a GA Trust for given origin.

Updates a trust for a platform identity provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param globalAccountId Global account ID
 @param originKey Origin of the trust to remove
 @return PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest
*/
func (a *PlatformIdentityProvidersAPIService) UpdatePlatformIdentityProviderTrust(ctx context.Context, globalAccountId string, originKey string) PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest {
	return PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest{
		ApiService: a,
		ctx: ctx,
		globalAccountId: globalAccountId,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return XSPlatformIdentityProvider
func (a *PlatformIdentityProvidersAPIService) UpdatePlatformIdentityProviderTrustExecute(r PlatformIdentityProvidersAPIUpdatePlatformIdentityProviderTrustRequest) (*XSPlatformIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSPlatformIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformIdentityProvidersAPIService.UpdatePlatformIdentityProviderTrust")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/globalaccount/{globalAccountId}/platform-identity-providers/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"globalAccountId"+"}", url.PathEscape(parameterValueToString(r.globalAccountId, "globalAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addPlatformIdentityProviderTrust == nil {
		return localVarReturnValue, nil, reportError("addPlatformIdentityProviderTrust is required and must be specified")
	}

	if r.refreshTrust != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshTrust", r.refreshTrust, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addPlatformIdentityProviderTrust
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
