/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TokenPolicySettingsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenPolicySettingsResp{}

// TokenPolicySettingsResp struct for TokenPolicySettingsResp
type TokenPolicySettingsResp struct {
	AccessTokenValidity *int32 `json:"accessTokenValidity,omitempty"`
	RefreshTokenValidity *int32 `json:"refreshTokenValidity,omitempty"`
	RefreshTokenUnique *bool `json:"refreshTokenUnique,omitempty"`
	ActiveKeyId *string `json:"activeKeyId,omitempty"`
	KeyIds []string `json:"keyIds,omitempty"`
	Keys *map[string]KeysResp `json:"keys,omitempty"`
}

// NewTokenPolicySettingsResp instantiates a new TokenPolicySettingsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenPolicySettingsResp() *TokenPolicySettingsResp {
	this := TokenPolicySettingsResp{}
	return &this
}

// NewTokenPolicySettingsRespWithDefaults instantiates a new TokenPolicySettingsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenPolicySettingsRespWithDefaults() *TokenPolicySettingsResp {
	this := TokenPolicySettingsResp{}
	return &this
}

// GetAccessTokenValidity returns the AccessTokenValidity field value if set, zero value otherwise.
func (o *TokenPolicySettingsResp) GetAccessTokenValidity() int32 {
	if o == nil || IsNil(o.AccessTokenValidity) {
		var ret int32
		return ret
	}
	return *o.AccessTokenValidity
}

// GetAccessTokenValidityOk returns a tuple with the AccessTokenValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPolicySettingsResp) GetAccessTokenValidityOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessTokenValidity) {
		return nil, false
	}
	return o.AccessTokenValidity, true
}

// HasAccessTokenValidity returns a boolean if a field has been set.
func (o *TokenPolicySettingsResp) HasAccessTokenValidity() bool {
	if o != nil && !IsNil(o.AccessTokenValidity) {
		return true
	}

	return false
}

// SetAccessTokenValidity gets a reference to the given int32 and assigns it to the AccessTokenValidity field.
func (o *TokenPolicySettingsResp) SetAccessTokenValidity(v int32) {
	o.AccessTokenValidity = &v
}

// GetRefreshTokenValidity returns the RefreshTokenValidity field value if set, zero value otherwise.
func (o *TokenPolicySettingsResp) GetRefreshTokenValidity() int32 {
	if o == nil || IsNil(o.RefreshTokenValidity) {
		var ret int32
		return ret
	}
	return *o.RefreshTokenValidity
}

// GetRefreshTokenValidityOk returns a tuple with the RefreshTokenValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPolicySettingsResp) GetRefreshTokenValidityOk() (*int32, bool) {
	if o == nil || IsNil(o.RefreshTokenValidity) {
		return nil, false
	}
	return o.RefreshTokenValidity, true
}

// HasRefreshTokenValidity returns a boolean if a field has been set.
func (o *TokenPolicySettingsResp) HasRefreshTokenValidity() bool {
	if o != nil && !IsNil(o.RefreshTokenValidity) {
		return true
	}

	return false
}

// SetRefreshTokenValidity gets a reference to the given int32 and assigns it to the RefreshTokenValidity field.
func (o *TokenPolicySettingsResp) SetRefreshTokenValidity(v int32) {
	o.RefreshTokenValidity = &v
}

// GetRefreshTokenUnique returns the RefreshTokenUnique field value if set, zero value otherwise.
func (o *TokenPolicySettingsResp) GetRefreshTokenUnique() bool {
	if o == nil || IsNil(o.RefreshTokenUnique) {
		var ret bool
		return ret
	}
	return *o.RefreshTokenUnique
}

// GetRefreshTokenUniqueOk returns a tuple with the RefreshTokenUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPolicySettingsResp) GetRefreshTokenUniqueOk() (*bool, bool) {
	if o == nil || IsNil(o.RefreshTokenUnique) {
		return nil, false
	}
	return o.RefreshTokenUnique, true
}

// HasRefreshTokenUnique returns a boolean if a field has been set.
func (o *TokenPolicySettingsResp) HasRefreshTokenUnique() bool {
	if o != nil && !IsNil(o.RefreshTokenUnique) {
		return true
	}

	return false
}

// SetRefreshTokenUnique gets a reference to the given bool and assigns it to the RefreshTokenUnique field.
func (o *TokenPolicySettingsResp) SetRefreshTokenUnique(v bool) {
	o.RefreshTokenUnique = &v
}

// GetActiveKeyId returns the ActiveKeyId field value if set, zero value otherwise.
func (o *TokenPolicySettingsResp) GetActiveKeyId() string {
	if o == nil || IsNil(o.ActiveKeyId) {
		var ret string
		return ret
	}
	return *o.ActiveKeyId
}

// GetActiveKeyIdOk returns a tuple with the ActiveKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPolicySettingsResp) GetActiveKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveKeyId) {
		return nil, false
	}
	return o.ActiveKeyId, true
}

// HasActiveKeyId returns a boolean if a field has been set.
func (o *TokenPolicySettingsResp) HasActiveKeyId() bool {
	if o != nil && !IsNil(o.ActiveKeyId) {
		return true
	}

	return false
}

// SetActiveKeyId gets a reference to the given string and assigns it to the ActiveKeyId field.
func (o *TokenPolicySettingsResp) SetActiveKeyId(v string) {
	o.ActiveKeyId = &v
}

// GetKeyIds returns the KeyIds field value if set, zero value otherwise.
func (o *TokenPolicySettingsResp) GetKeyIds() []string {
	if o == nil || IsNil(o.KeyIds) {
		var ret []string
		return ret
	}
	return o.KeyIds
}

// GetKeyIdsOk returns a tuple with the KeyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPolicySettingsResp) GetKeyIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyIds) {
		return nil, false
	}
	return o.KeyIds, true
}

// HasKeyIds returns a boolean if a field has been set.
func (o *TokenPolicySettingsResp) HasKeyIds() bool {
	if o != nil && !IsNil(o.KeyIds) {
		return true
	}

	return false
}

// SetKeyIds gets a reference to the given []string and assigns it to the KeyIds field.
func (o *TokenPolicySettingsResp) SetKeyIds(v []string) {
	o.KeyIds = v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *TokenPolicySettingsResp) GetKeys() map[string]KeysResp {
	if o == nil || IsNil(o.Keys) {
		var ret map[string]KeysResp
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPolicySettingsResp) GetKeysOk() (*map[string]KeysResp, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *TokenPolicySettingsResp) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given map[string]KeysResp and assigns it to the Keys field.
func (o *TokenPolicySettingsResp) SetKeys(v map[string]KeysResp) {
	o.Keys = &v
}

func (o TokenPolicySettingsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenPolicySettingsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessTokenValidity) {
		toSerialize["accessTokenValidity"] = o.AccessTokenValidity
	}
	if !IsNil(o.RefreshTokenValidity) {
		toSerialize["refreshTokenValidity"] = o.RefreshTokenValidity
	}
	if !IsNil(o.RefreshTokenUnique) {
		toSerialize["refreshTokenUnique"] = o.RefreshTokenUnique
	}
	if !IsNil(o.ActiveKeyId) {
		toSerialize["activeKeyId"] = o.ActiveKeyId
	}
	if !IsNil(o.KeyIds) {
		toSerialize["keyIds"] = o.KeyIds
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableTokenPolicySettingsResp struct {
	value *TokenPolicySettingsResp
	isSet bool
}

func (v NullableTokenPolicySettingsResp) Get() *TokenPolicySettingsResp {
	return v.value
}

func (v *NullableTokenPolicySettingsResp) Set(val *TokenPolicySettingsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenPolicySettingsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenPolicySettingsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenPolicySettingsResp(val *TokenPolicySettingsResp) *NullableTokenPolicySettingsResp {
	return &NullableTokenPolicySettingsResp{value: val, isSet: true}
}

func (v NullableTokenPolicySettingsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenPolicySettingsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


