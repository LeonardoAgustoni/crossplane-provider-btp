/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SamlKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SamlKey{}

// SamlKey struct for SamlKey
type SamlKey struct {
	Key *string `json:"key,omitempty"`
	Passphrase *string `json:"passphrase,omitempty"`
	Certificate *string `json:"certificate,omitempty"`
}

// NewSamlKey instantiates a new SamlKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlKey() *SamlKey {
	this := SamlKey{}
	return &this
}

// NewSamlKeyWithDefaults instantiates a new SamlKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlKeyWithDefaults() *SamlKey {
	this := SamlKey{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SamlKey) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlKey) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SamlKey) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SamlKey) SetKey(v string) {
	o.Key = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *SamlKey) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlKey) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *SamlKey) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *SamlKey) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SamlKey) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlKey) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SamlKey) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *SamlKey) SetCertificate(v string) {
	o.Certificate = &v
}

func (o SamlKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SamlKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	return toSerialize, nil
}

type NullableSamlKey struct {
	value *SamlKey
	isSet bool
}

func (v NullableSamlKey) Get() *SamlKey {
	return v.value
}

func (v *NullableSamlKey) Set(val *SamlKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlKey(val *SamlKey) *NullableSamlKey {
	return &NullableSamlKey{value: val, isSet: true}
}

func (v NullableSamlKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


