/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuthData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthData{}

// AuthData struct for AuthData
type AuthData struct {
	IdentityZone *string `json:"identityZone,omitempty"`
	Roles []Role `json:"roles,omitempty"`
	RoleCollections []RoleCollection `json:"roleCollections,omitempty"`
}

// NewAuthData instantiates a new AuthData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthData() *AuthData {
	this := AuthData{}
	return &this
}

// NewAuthDataWithDefaults instantiates a new AuthData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthDataWithDefaults() *AuthData {
	this := AuthData{}
	return &this
}

// GetIdentityZone returns the IdentityZone field value if set, zero value otherwise.
func (o *AuthData) GetIdentityZone() string {
	if o == nil || IsNil(o.IdentityZone) {
		var ret string
		return ret
	}
	return *o.IdentityZone
}

// GetIdentityZoneOk returns a tuple with the IdentityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthData) GetIdentityZoneOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityZone) {
		return nil, false
	}
	return o.IdentityZone, true
}

// HasIdentityZone returns a boolean if a field has been set.
func (o *AuthData) HasIdentityZone() bool {
	if o != nil && !IsNil(o.IdentityZone) {
		return true
	}

	return false
}

// SetIdentityZone gets a reference to the given string and assigns it to the IdentityZone field.
func (o *AuthData) SetIdentityZone(v string) {
	o.IdentityZone = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *AuthData) GetRoles() []Role {
	if o == nil || IsNil(o.Roles) {
		var ret []Role
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthData) GetRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AuthData) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *AuthData) SetRoles(v []Role) {
	o.Roles = v
}

// GetRoleCollections returns the RoleCollections field value if set, zero value otherwise.
func (o *AuthData) GetRoleCollections() []RoleCollection {
	if o == nil || IsNil(o.RoleCollections) {
		var ret []RoleCollection
		return ret
	}
	return o.RoleCollections
}

// GetRoleCollectionsOk returns a tuple with the RoleCollections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthData) GetRoleCollectionsOk() ([]RoleCollection, bool) {
	if o == nil || IsNil(o.RoleCollections) {
		return nil, false
	}
	return o.RoleCollections, true
}

// HasRoleCollections returns a boolean if a field has been set.
func (o *AuthData) HasRoleCollections() bool {
	if o != nil && !IsNil(o.RoleCollections) {
		return true
	}

	return false
}

// SetRoleCollections gets a reference to the given []RoleCollection and assigns it to the RoleCollections field.
func (o *AuthData) SetRoleCollections(v []RoleCollection) {
	o.RoleCollections = v
}

func (o AuthData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IdentityZone) {
		toSerialize["identityZone"] = o.IdentityZone
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.RoleCollections) {
		toSerialize["roleCollections"] = o.RoleCollections
	}
	return toSerialize, nil
}

type NullableAuthData struct {
	value *AuthData
	isSet bool
}

func (v NullableAuthData) Get() *AuthData {
	return v.value
}

func (v *NullableAuthData) Set(val *AuthData) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthData) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthData(val *AuthData) *NullableAuthData {
	return &NullableAuthData{value: val, isSet: true}
}

func (v NullableAuthData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


