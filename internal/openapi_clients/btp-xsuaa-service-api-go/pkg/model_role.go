/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Role type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Role{}

// Role JSON containing the role
type Role struct {
	RoleTemplateName string `json:"roleTemplateName"`
	RoleTemplateAppId string `json:"roleTemplateAppId"`
	Name string `json:"name"`
	AttributeList []RoleAttribute `json:"attributeList"`
	Description string `json:"description"`
	Scopes []Scope `json:"scopes"`
	RoleCollectionReferences []RoleCollectionReference `json:"roleCollectionReferences,omitempty"`
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
	AppName *string `json:"appName,omitempty"`
	AppDescription *string `json:"appDescription,omitempty"`
}

type _Role Role

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole(roleTemplateName string, roleTemplateAppId string, name string, attributeList []RoleAttribute, description string, scopes []Scope) *Role {
	this := Role{}
	this.RoleTemplateName = roleTemplateName
	this.RoleTemplateAppId = roleTemplateAppId
	this.Name = name
	this.AttributeList = attributeList
	this.Description = description
	this.Scopes = scopes
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	return &this
}

// GetRoleTemplateName returns the RoleTemplateName field value
func (o *Role) GetRoleTemplateName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleTemplateName
}

// GetRoleTemplateNameOk returns a tuple with the RoleTemplateName field value
// and a boolean to check if the value has been set.
func (o *Role) GetRoleTemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleTemplateName, true
}

// SetRoleTemplateName sets field value
func (o *Role) SetRoleTemplateName(v string) {
	o.RoleTemplateName = v
}

// GetRoleTemplateAppId returns the RoleTemplateAppId field value
func (o *Role) GetRoleTemplateAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleTemplateAppId
}

// GetRoleTemplateAppIdOk returns a tuple with the RoleTemplateAppId field value
// and a boolean to check if the value has been set.
func (o *Role) GetRoleTemplateAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleTemplateAppId, true
}

// SetRoleTemplateAppId sets field value
func (o *Role) SetRoleTemplateAppId(v string) {
	o.RoleTemplateAppId = v
}

// GetName returns the Name field value
func (o *Role) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Role) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Role) SetName(v string) {
	o.Name = v
}

// GetAttributeList returns the AttributeList field value
func (o *Role) GetAttributeList() []RoleAttribute {
	if o == nil {
		var ret []RoleAttribute
		return ret
	}

	return o.AttributeList
}

// GetAttributeListOk returns a tuple with the AttributeList field value
// and a boolean to check if the value has been set.
func (o *Role) GetAttributeListOk() ([]RoleAttribute, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttributeList, true
}

// SetAttributeList sets field value
func (o *Role) SetAttributeList(v []RoleAttribute) {
	o.AttributeList = v
}

// GetDescription returns the Description field value
func (o *Role) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Role) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Role) SetDescription(v string) {
	o.Description = v
}

// GetScopes returns the Scopes field value
func (o *Role) GetScopes() []Scope {
	if o == nil {
		var ret []Scope
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *Role) GetScopesOk() ([]Scope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *Role) SetScopes(v []Scope) {
	o.Scopes = v
}

// GetRoleCollectionReferences returns the RoleCollectionReferences field value if set, zero value otherwise.
func (o *Role) GetRoleCollectionReferences() []RoleCollectionReference {
	if o == nil || IsNil(o.RoleCollectionReferences) {
		var ret []RoleCollectionReference
		return ret
	}
	return o.RoleCollectionReferences
}

// GetRoleCollectionReferencesOk returns a tuple with the RoleCollectionReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetRoleCollectionReferencesOk() ([]RoleCollectionReference, bool) {
	if o == nil || IsNil(o.RoleCollectionReferences) {
		return nil, false
	}
	return o.RoleCollectionReferences, true
}

// HasRoleCollectionReferences returns a boolean if a field has been set.
func (o *Role) HasRoleCollectionReferences() bool {
	if o != nil && !IsNil(o.RoleCollectionReferences) {
		return true
	}

	return false
}

// SetRoleCollectionReferences gets a reference to the given []RoleCollectionReference and assigns it to the RoleCollectionReferences field.
func (o *Role) SetRoleCollectionReferences(v []RoleCollectionReference) {
	o.RoleCollectionReferences = v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *Role) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadOnly) {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *Role) HasIsReadOnly() bool {
	if o != nil && !IsNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *Role) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *Role) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *Role) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *Role) SetAppName(v string) {
	o.AppName = &v
}

// GetAppDescription returns the AppDescription field value if set, zero value otherwise.
func (o *Role) GetAppDescription() string {
	if o == nil || IsNil(o.AppDescription) {
		var ret string
		return ret
	}
	return *o.AppDescription
}

// GetAppDescriptionOk returns a tuple with the AppDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetAppDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.AppDescription) {
		return nil, false
	}
	return o.AppDescription, true
}

// HasAppDescription returns a boolean if a field has been set.
func (o *Role) HasAppDescription() bool {
	if o != nil && !IsNil(o.AppDescription) {
		return true
	}

	return false
}

// SetAppDescription gets a reference to the given string and assigns it to the AppDescription field.
func (o *Role) SetAppDescription(v string) {
	o.AppDescription = &v
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Role) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roleTemplateName"] = o.RoleTemplateName
	toSerialize["roleTemplateAppId"] = o.RoleTemplateAppId
	toSerialize["name"] = o.Name
	toSerialize["attributeList"] = o.AttributeList
	toSerialize["description"] = o.Description
	toSerialize["scopes"] = o.Scopes
	if !IsNil(o.RoleCollectionReferences) {
		toSerialize["roleCollectionReferences"] = o.RoleCollectionReferences
	}
	if !IsNil(o.IsReadOnly) {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.AppDescription) {
		toSerialize["appDescription"] = o.AppDescription
	}
	return toSerialize, nil
}

func (o *Role) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roleTemplateName",
		"roleTemplateAppId",
		"name",
		"attributeList",
		"description",
		"scopes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRole := _Role{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRole)

	if err != nil {
		return err
	}

	*o = Role(varRole)

	return err
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


