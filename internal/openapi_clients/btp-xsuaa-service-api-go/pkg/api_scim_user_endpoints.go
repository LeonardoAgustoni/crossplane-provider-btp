/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ScimUserEndpointsAPI interface {

	/*
	CreateUser1 Method for CreateUser1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ScimUserEndpointsAPICreateUser1Request
	*/
	CreateUser1(ctx context.Context) ScimUserEndpointsAPICreateUser1Request

	// CreateUser1Execute executes the request
	//  @return ScimUser
	CreateUser1Execute(r ScimUserEndpointsAPICreateUser1Request) (*ScimUser, *http.Response, error)

	/*
	FindUsers Method for FindUsers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ScimUserEndpointsAPIFindUsersRequest
	*/
	FindUsers(ctx context.Context) ScimUserEndpointsAPIFindUsersRequest

	// FindUsersExecute executes the request
	//  @return SearchResultsObject
	FindUsersExecute(r ScimUserEndpointsAPIFindUsersRequest) (*SearchResultsObject, *http.Response, error)
}

// ScimUserEndpointsAPIService ScimUserEndpointsAPI service
type ScimUserEndpointsAPIService service

type ScimUserEndpointsAPICreateUser1Request struct {
	ctx context.Context
	ApiService ScimUserEndpointsAPI
	scimUser *ScimUser
}

func (r ScimUserEndpointsAPICreateUser1Request) ScimUser(scimUser ScimUser) ScimUserEndpointsAPICreateUser1Request {
	r.scimUser = &scimUser
	return r
}

func (r ScimUserEndpointsAPICreateUser1Request) Execute() (*ScimUser, *http.Response, error) {
	return r.ApiService.CreateUser1Execute(r)
}

/*
CreateUser1 Method for CreateUser1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ScimUserEndpointsAPICreateUser1Request
*/
func (a *ScimUserEndpointsAPIService) CreateUser1(ctx context.Context) ScimUserEndpointsAPICreateUser1Request {
	return ScimUserEndpointsAPICreateUser1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ScimUser
func (a *ScimUserEndpointsAPIService) CreateUser1Execute(r ScimUserEndpointsAPICreateUser1Request) (*ScimUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimUserEndpointsAPIService.CreateUser1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scimUser == nil {
		return localVarReturnValue, nil, reportError("scimUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scimUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ScimUserEndpointsAPIFindUsersRequest struct {
	ctx context.Context
	ApiService ScimUserEndpointsAPI
	attributes *string
	filter *string
	sortBy *string
	sortOrder *string
	startIndex *int32
	count *int32
}

func (r ScimUserEndpointsAPIFindUsersRequest) Attributes(attributes string) ScimUserEndpointsAPIFindUsersRequest {
	r.attributes = &attributes
	return r
}

func (r ScimUserEndpointsAPIFindUsersRequest) Filter(filter string) ScimUserEndpointsAPIFindUsersRequest {
	r.filter = &filter
	return r
}

func (r ScimUserEndpointsAPIFindUsersRequest) SortBy(sortBy string) ScimUserEndpointsAPIFindUsersRequest {
	r.sortBy = &sortBy
	return r
}

func (r ScimUserEndpointsAPIFindUsersRequest) SortOrder(sortOrder string) ScimUserEndpointsAPIFindUsersRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ScimUserEndpointsAPIFindUsersRequest) StartIndex(startIndex int32) ScimUserEndpointsAPIFindUsersRequest {
	r.startIndex = &startIndex
	return r
}

func (r ScimUserEndpointsAPIFindUsersRequest) Count(count int32) ScimUserEndpointsAPIFindUsersRequest {
	r.count = &count
	return r
}

func (r ScimUserEndpointsAPIFindUsersRequest) Execute() (*SearchResultsObject, *http.Response, error) {
	return r.ApiService.FindUsersExecute(r)
}

/*
FindUsers Method for FindUsers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ScimUserEndpointsAPIFindUsersRequest
*/
func (a *ScimUserEndpointsAPIService) FindUsers(ctx context.Context) ScimUserEndpointsAPIFindUsersRequest {
	return ScimUserEndpointsAPIFindUsersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchResultsObject
func (a *ScimUserEndpointsAPIService) FindUsersExecute(r ScimUserEndpointsAPIFindUsersRequest) (*SearchResultsObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchResultsObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimUserEndpointsAPIService.FindUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attributes", r.attributes, "form", "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "form", "")
	} else {
		var defaultValue string = "id pr"
		r.filter = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "form", "")
	} else {
		var defaultValue string = "created"
		r.sortBy = &defaultValue
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	} else {
		var defaultValue string = "ascending"
		r.sortOrder = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startIndex", r.startIndex, "form", "")
	} else {
		var defaultValue int32 = 1
		r.startIndex = &defaultValue
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 100
		r.count = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
