/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ZoneTrustInformationAPI interface {

	/*
	GetZoneInformationBySubdomain Get Zone information for tenant

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param subdomain Subdomain of the tenant
	@return ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest
	*/
	GetZoneInformationBySubdomain(ctx context.Context, subdomain string) ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest

	// GetZoneInformationBySubdomainExecute executes the request
	//  @return XSTenantV2ZoneInformation
	GetZoneInformationBySubdomainExecute(r ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest) (*XSTenantV2ZoneInformation, *http.Response, error)

	/*
	GetZoneInformationBySubdomain1 Get Zone information for tenant

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param subdomain Subdomain of the tenant
	@return ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request
	*/
	GetZoneInformationBySubdomain1(ctx context.Context, subdomain string) ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request

	// GetZoneInformationBySubdomain1Execute executes the request
	//  @return XSTenantV2ZoneInformation
	GetZoneInformationBySubdomain1Execute(r ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request) (*XSTenantV2ZoneInformation, *http.Response, error)
}

// ZoneTrustInformationAPIService ZoneTrustInformationAPI service
type ZoneTrustInformationAPIService service

type ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest struct {
	ctx context.Context
	ApiService ZoneTrustInformationAPI
	subdomain string
	iasClient *string
}

// ClientId of the application created by the identity broker
func (r ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest) IasClient(iasClient string) ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest {
	r.iasClient = &iasClient
	return r
}

func (r ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest) Execute() (*XSTenantV2ZoneInformation, *http.Response, error) {
	return r.ApiService.GetZoneInformationBySubdomainExecute(r)
}

/*
GetZoneInformationBySubdomain Get Zone information for tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subdomain Subdomain of the tenant
 @return ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest
*/
func (a *ZoneTrustInformationAPIService) GetZoneInformationBySubdomain(ctx context.Context, subdomain string) ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest {
	return ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest{
		ApiService: a,
		ctx: ctx,
		subdomain: subdomain,
	}
}

// Execute executes the request
//  @return XSTenantV2ZoneInformation
func (a *ZoneTrustInformationAPIService) GetZoneInformationBySubdomainExecute(r ZoneTrustInformationAPIGetZoneInformationBySubdomainRequest) (*XSTenantV2ZoneInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSTenantV2ZoneInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZoneTrustInformationAPIService.GetZoneInformationBySubdomain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/tenantLoginInfo/{subdomain}"
	localVarPath = strings.Replace(localVarPath, "{"+"subdomain"+"}", url.PathEscape(parameterValueToString(r.subdomain, "subdomain")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.iasClient == nil {
		return localVarReturnValue, nil, reportError("iasClient is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "iasClient", r.iasClient, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request struct {
	ctx context.Context
	ApiService ZoneTrustInformationAPI
	subdomain string
}

func (r ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request) Execute() (*XSTenantV2ZoneInformation, *http.Response, error) {
	return r.ApiService.GetZoneInformationBySubdomain1Execute(r)
}

/*
GetZoneInformationBySubdomain1 Get Zone information for tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subdomain Subdomain of the tenant
 @return ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request
*/
func (a *ZoneTrustInformationAPIService) GetZoneInformationBySubdomain1(ctx context.Context, subdomain string) ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request {
	return ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request{
		ApiService: a,
		ctx: ctx,
		subdomain: subdomain,
	}
}

// Execute executes the request
//  @return XSTenantV2ZoneInformation
func (a *ZoneTrustInformationAPIService) GetZoneInformationBySubdomain1Execute(r ZoneTrustInformationAPIGetZoneInformationBySubdomain1Request) (*XSTenantV2ZoneInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSTenantV2ZoneInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZoneTrustInformationAPIService.GetZoneInformationBySubdomain1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/authorization/v2/zoneinfo/{subdomain}"
	localVarPath = strings.Replace(localVarPath, "{"+"subdomain"+"}", url.PathEscape(parameterValueToString(r.subdomain, "subdomain")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
