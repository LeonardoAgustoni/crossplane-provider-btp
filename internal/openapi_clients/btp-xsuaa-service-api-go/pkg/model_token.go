/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Token type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Token{}

// Token struct for Token
type Token struct {
	// Deprecated
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	CloneServiceInstanceId *string `json:"cloneServiceInstanceId,omitempty"`
	GivenName *string `json:"givenName,omitempty"`
	ClientId *string `json:"clientId,omitempty"`
	Subdomain *string `json:"subdomain,omitempty"`
	AppToken *string `json:"appToken,omitempty"`
	SubaccountId *string `json:"subaccountId,omitempty"`
	GrantType *string `json:"grantType,omitempty"`
	Scopes []string `json:"scopes,omitempty"`
	Authorities []GrantedAuthority `json:"authorities,omitempty"`
	Email *string `json:"email,omitempty"`
	FamilyName *string `json:"familyName,omitempty"`
	ZoneId *string `json:"zoneId,omitempty"`
	LogonName *string `json:"logonName,omitempty"`
	Expiration *time.Time `json:"expiration,omitempty"`
	Origin *string `json:"origin,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	AccountNonExpired *bool `json:"accountNonExpired,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
	CredentialsNonExpired *bool `json:"credentialsNonExpired,omitempty"`
	AccountNonLocked *bool `json:"accountNonLocked,omitempty"`
}

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken() *Token {
	this := Token{}
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
// Deprecated
func (o *Token) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Token) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Token) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
// Deprecated
func (o *Token) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetCloneServiceInstanceId returns the CloneServiceInstanceId field value if set, zero value otherwise.
func (o *Token) GetCloneServiceInstanceId() string {
	if o == nil || IsNil(o.CloneServiceInstanceId) {
		var ret string
		return ret
	}
	return *o.CloneServiceInstanceId
}

// GetCloneServiceInstanceIdOk returns a tuple with the CloneServiceInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetCloneServiceInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloneServiceInstanceId) {
		return nil, false
	}
	return o.CloneServiceInstanceId, true
}

// HasCloneServiceInstanceId returns a boolean if a field has been set.
func (o *Token) HasCloneServiceInstanceId() bool {
	if o != nil && !IsNil(o.CloneServiceInstanceId) {
		return true
	}

	return false
}

// SetCloneServiceInstanceId gets a reference to the given string and assigns it to the CloneServiceInstanceId field.
func (o *Token) SetCloneServiceInstanceId(v string) {
	o.CloneServiceInstanceId = &v
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *Token) GetGivenName() string {
	if o == nil || IsNil(o.GivenName) {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetGivenNameOk() (*string, bool) {
	if o == nil || IsNil(o.GivenName) {
		return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *Token) HasGivenName() bool {
	if o != nil && !IsNil(o.GivenName) {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *Token) SetGivenName(v string) {
	o.GivenName = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *Token) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *Token) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *Token) SetClientId(v string) {
	o.ClientId = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *Token) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *Token) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *Token) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetAppToken returns the AppToken field value if set, zero value otherwise.
func (o *Token) GetAppToken() string {
	if o == nil || IsNil(o.AppToken) {
		var ret string
		return ret
	}
	return *o.AppToken
}

// GetAppTokenOk returns a tuple with the AppToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAppTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AppToken) {
		return nil, false
	}
	return o.AppToken, true
}

// HasAppToken returns a boolean if a field has been set.
func (o *Token) HasAppToken() bool {
	if o != nil && !IsNil(o.AppToken) {
		return true
	}

	return false
}

// SetAppToken gets a reference to the given string and assigns it to the AppToken field.
func (o *Token) SetAppToken(v string) {
	o.AppToken = &v
}

// GetSubaccountId returns the SubaccountId field value if set, zero value otherwise.
func (o *Token) GetSubaccountId() string {
	if o == nil || IsNil(o.SubaccountId) {
		var ret string
		return ret
	}
	return *o.SubaccountId
}

// GetSubaccountIdOk returns a tuple with the SubaccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetSubaccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubaccountId) {
		return nil, false
	}
	return o.SubaccountId, true
}

// HasSubaccountId returns a boolean if a field has been set.
func (o *Token) HasSubaccountId() bool {
	if o != nil && !IsNil(o.SubaccountId) {
		return true
	}

	return false
}

// SetSubaccountId gets a reference to the given string and assigns it to the SubaccountId field.
func (o *Token) SetSubaccountId(v string) {
	o.SubaccountId = &v
}

// GetGrantType returns the GrantType field value if set, zero value otherwise.
func (o *Token) GetGrantType() string {
	if o == nil || IsNil(o.GrantType) {
		var ret string
		return ret
	}
	return *o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetGrantTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GrantType) {
		return nil, false
	}
	return o.GrantType, true
}

// HasGrantType returns a boolean if a field has been set.
func (o *Token) HasGrantType() bool {
	if o != nil && !IsNil(o.GrantType) {
		return true
	}

	return false
}

// SetGrantType gets a reference to the given string and assigns it to the GrantType field.
func (o *Token) SetGrantType(v string) {
	o.GrantType = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *Token) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *Token) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *Token) SetScopes(v []string) {
	o.Scopes = v
}

// GetAuthorities returns the Authorities field value if set, zero value otherwise.
func (o *Token) GetAuthorities() []GrantedAuthority {
	if o == nil || IsNil(o.Authorities) {
		var ret []GrantedAuthority
		return ret
	}
	return o.Authorities
}

// GetAuthoritiesOk returns a tuple with the Authorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAuthoritiesOk() ([]GrantedAuthority, bool) {
	if o == nil || IsNil(o.Authorities) {
		return nil, false
	}
	return o.Authorities, true
}

// HasAuthorities returns a boolean if a field has been set.
func (o *Token) HasAuthorities() bool {
	if o != nil && !IsNil(o.Authorities) {
		return true
	}

	return false
}

// SetAuthorities gets a reference to the given []GrantedAuthority and assigns it to the Authorities field.
func (o *Token) SetAuthorities(v []GrantedAuthority) {
	o.Authorities = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Token) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Token) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Token) SetEmail(v string) {
	o.Email = &v
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise.
func (o *Token) GetFamilyName() string {
	if o == nil || IsNil(o.FamilyName) {
		var ret string
		return ret
	}
	return *o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetFamilyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FamilyName) {
		return nil, false
	}
	return o.FamilyName, true
}

// HasFamilyName returns a boolean if a field has been set.
func (o *Token) HasFamilyName() bool {
	if o != nil && !IsNil(o.FamilyName) {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given string and assigns it to the FamilyName field.
func (o *Token) SetFamilyName(v string) {
	o.FamilyName = &v
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *Token) GetZoneId() string {
	if o == nil || IsNil(o.ZoneId) {
		var ret string
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetZoneIdOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneId) {
		return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *Token) HasZoneId() bool {
	if o != nil && !IsNil(o.ZoneId) {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given string and assigns it to the ZoneId field.
func (o *Token) SetZoneId(v string) {
	o.ZoneId = &v
}

// GetLogonName returns the LogonName field value if set, zero value otherwise.
func (o *Token) GetLogonName() string {
	if o == nil || IsNil(o.LogonName) {
		var ret string
		return ret
	}
	return *o.LogonName
}

// GetLogonNameOk returns a tuple with the LogonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetLogonNameOk() (*string, bool) {
	if o == nil || IsNil(o.LogonName) {
		return nil, false
	}
	return o.LogonName, true
}

// HasLogonName returns a boolean if a field has been set.
func (o *Token) HasLogonName() bool {
	if o != nil && !IsNil(o.LogonName) {
		return true
	}

	return false
}

// SetLogonName gets a reference to the given string and assigns it to the LogonName field.
func (o *Token) SetLogonName(v string) {
	o.LogonName = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *Token) GetExpiration() time.Time {
	if o == nil || IsNil(o.Expiration) {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetExpirationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *Token) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *Token) SetExpiration(v time.Time) {
	o.Expiration = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *Token) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *Token) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *Token) SetOrigin(v string) {
	o.Origin = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Token) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Token) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Token) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAccountNonExpired returns the AccountNonExpired field value if set, zero value otherwise.
func (o *Token) GetAccountNonExpired() bool {
	if o == nil || IsNil(o.AccountNonExpired) {
		var ret bool
		return ret
	}
	return *o.AccountNonExpired
}

// GetAccountNonExpiredOk returns a tuple with the AccountNonExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAccountNonExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountNonExpired) {
		return nil, false
	}
	return o.AccountNonExpired, true
}

// HasAccountNonExpired returns a boolean if a field has been set.
func (o *Token) HasAccountNonExpired() bool {
	if o != nil && !IsNil(o.AccountNonExpired) {
		return true
	}

	return false
}

// SetAccountNonExpired gets a reference to the given bool and assigns it to the AccountNonExpired field.
func (o *Token) SetAccountNonExpired(v bool) {
	o.AccountNonExpired = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Token) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Token) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Token) SetPassword(v string) {
	o.Password = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Token) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Token) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Token) SetUsername(v string) {
	o.Username = &v
}

// GetCredentialsNonExpired returns the CredentialsNonExpired field value if set, zero value otherwise.
func (o *Token) GetCredentialsNonExpired() bool {
	if o == nil || IsNil(o.CredentialsNonExpired) {
		var ret bool
		return ret
	}
	return *o.CredentialsNonExpired
}

// GetCredentialsNonExpiredOk returns a tuple with the CredentialsNonExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetCredentialsNonExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.CredentialsNonExpired) {
		return nil, false
	}
	return o.CredentialsNonExpired, true
}

// HasCredentialsNonExpired returns a boolean if a field has been set.
func (o *Token) HasCredentialsNonExpired() bool {
	if o != nil && !IsNil(o.CredentialsNonExpired) {
		return true
	}

	return false
}

// SetCredentialsNonExpired gets a reference to the given bool and assigns it to the CredentialsNonExpired field.
func (o *Token) SetCredentialsNonExpired(v bool) {
	o.CredentialsNonExpired = &v
}

// GetAccountNonLocked returns the AccountNonLocked field value if set, zero value otherwise.
func (o *Token) GetAccountNonLocked() bool {
	if o == nil || IsNil(o.AccountNonLocked) {
		var ret bool
		return ret
	}
	return *o.AccountNonLocked
}

// GetAccountNonLockedOk returns a tuple with the AccountNonLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAccountNonLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountNonLocked) {
		return nil, false
	}
	return o.AccountNonLocked, true
}

// HasAccountNonLocked returns a boolean if a field has been set.
func (o *Token) HasAccountNonLocked() bool {
	if o != nil && !IsNil(o.AccountNonLocked) {
		return true
	}

	return false
}

// SetAccountNonLocked gets a reference to the given bool and assigns it to the AccountNonLocked field.
func (o *Token) SetAccountNonLocked(v bool) {
	o.AccountNonLocked = &v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.CloneServiceInstanceId) {
		toSerialize["cloneServiceInstanceId"] = o.CloneServiceInstanceId
	}
	if !IsNil(o.GivenName) {
		toSerialize["givenName"] = o.GivenName
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.AppToken) {
		toSerialize["appToken"] = o.AppToken
	}
	if !IsNil(o.SubaccountId) {
		toSerialize["subaccountId"] = o.SubaccountId
	}
	if !IsNil(o.GrantType) {
		toSerialize["grantType"] = o.GrantType
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Authorities) {
		toSerialize["authorities"] = o.Authorities
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FamilyName) {
		toSerialize["familyName"] = o.FamilyName
	}
	if !IsNil(o.ZoneId) {
		toSerialize["zoneId"] = o.ZoneId
	}
	if !IsNil(o.LogonName) {
		toSerialize["logonName"] = o.LogonName
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AccountNonExpired) {
		toSerialize["accountNonExpired"] = o.AccountNonExpired
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.CredentialsNonExpired) {
		toSerialize["credentialsNonExpired"] = o.CredentialsNonExpired
	}
	if !IsNil(o.AccountNonLocked) {
		toSerialize["accountNonLocked"] = o.AccountNonLocked
	}
	return toSerialize, nil
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


