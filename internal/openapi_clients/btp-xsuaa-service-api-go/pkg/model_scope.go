/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Scope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scope{}

// Scope struct for Scope
type Scope struct {
	Description *string `json:"description,omitempty"`
	Name string `json:"name"`
	CustomGrantedApps []string `json:"custom-granted-apps"`
	GrantedApps []string `json:"granted-apps,omitempty"`
	GrantAsAuthorityToApps []string `json:"grant-as-authority-to-apps,omitempty"`
	CustomGrantAsAuthorityToApps []string `json:"custom-grant-as-authority-to-apps"`
}

type _Scope Scope

// NewScope instantiates a new Scope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScope(name string, customGrantedApps []string, customGrantAsAuthorityToApps []string) *Scope {
	this := Scope{}
	this.Name = name
	this.CustomGrantedApps = customGrantedApps
	this.CustomGrantAsAuthorityToApps = customGrantAsAuthorityToApps
	return &this
}

// NewScopeWithDefaults instantiates a new Scope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeWithDefaults() *Scope {
	this := Scope{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Scope) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scope) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Scope) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Scope) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *Scope) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Scope) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Scope) SetName(v string) {
	o.Name = v
}

// GetCustomGrantedApps returns the CustomGrantedApps field value
func (o *Scope) GetCustomGrantedApps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CustomGrantedApps
}

// GetCustomGrantedAppsOk returns a tuple with the CustomGrantedApps field value
// and a boolean to check if the value has been set.
func (o *Scope) GetCustomGrantedAppsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomGrantedApps, true
}

// SetCustomGrantedApps sets field value
func (o *Scope) SetCustomGrantedApps(v []string) {
	o.CustomGrantedApps = v
}

// GetGrantedApps returns the GrantedApps field value if set, zero value otherwise.
func (o *Scope) GetGrantedApps() []string {
	if o == nil || IsNil(o.GrantedApps) {
		var ret []string
		return ret
	}
	return o.GrantedApps
}

// GetGrantedAppsOk returns a tuple with the GrantedApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scope) GetGrantedAppsOk() ([]string, bool) {
	if o == nil || IsNil(o.GrantedApps) {
		return nil, false
	}
	return o.GrantedApps, true
}

// HasGrantedApps returns a boolean if a field has been set.
func (o *Scope) HasGrantedApps() bool {
	if o != nil && !IsNil(o.GrantedApps) {
		return true
	}

	return false
}

// SetGrantedApps gets a reference to the given []string and assigns it to the GrantedApps field.
func (o *Scope) SetGrantedApps(v []string) {
	o.GrantedApps = v
}

// GetGrantAsAuthorityToApps returns the GrantAsAuthorityToApps field value if set, zero value otherwise.
func (o *Scope) GetGrantAsAuthorityToApps() []string {
	if o == nil || IsNil(o.GrantAsAuthorityToApps) {
		var ret []string
		return ret
	}
	return o.GrantAsAuthorityToApps
}

// GetGrantAsAuthorityToAppsOk returns a tuple with the GrantAsAuthorityToApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scope) GetGrantAsAuthorityToAppsOk() ([]string, bool) {
	if o == nil || IsNil(o.GrantAsAuthorityToApps) {
		return nil, false
	}
	return o.GrantAsAuthorityToApps, true
}

// HasGrantAsAuthorityToApps returns a boolean if a field has been set.
func (o *Scope) HasGrantAsAuthorityToApps() bool {
	if o != nil && !IsNil(o.GrantAsAuthorityToApps) {
		return true
	}

	return false
}

// SetGrantAsAuthorityToApps gets a reference to the given []string and assigns it to the GrantAsAuthorityToApps field.
func (o *Scope) SetGrantAsAuthorityToApps(v []string) {
	o.GrantAsAuthorityToApps = v
}

// GetCustomGrantAsAuthorityToApps returns the CustomGrantAsAuthorityToApps field value
func (o *Scope) GetCustomGrantAsAuthorityToApps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CustomGrantAsAuthorityToApps
}

// GetCustomGrantAsAuthorityToAppsOk returns a tuple with the CustomGrantAsAuthorityToApps field value
// and a boolean to check if the value has been set.
func (o *Scope) GetCustomGrantAsAuthorityToAppsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomGrantAsAuthorityToApps, true
}

// SetCustomGrantAsAuthorityToApps sets field value
func (o *Scope) SetCustomGrantAsAuthorityToApps(v []string) {
	o.CustomGrantAsAuthorityToApps = v
}

func (o Scope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["custom-granted-apps"] = o.CustomGrantedApps
	if !IsNil(o.GrantedApps) {
		toSerialize["granted-apps"] = o.GrantedApps
	}
	if !IsNil(o.GrantAsAuthorityToApps) {
		toSerialize["grant-as-authority-to-apps"] = o.GrantAsAuthorityToApps
	}
	toSerialize["custom-grant-as-authority-to-apps"] = o.CustomGrantAsAuthorityToApps
	return toSerialize, nil
}

func (o *Scope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"custom-granted-apps",
		"custom-grant-as-authority-to-apps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScope := _Scope{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScope)

	if err != nil {
		return err
	}

	*o = Scope(varScope)

	return err
}

type NullableScope struct {
	value *Scope
	isSet bool
}

func (v NullableScope) Get() *Scope {
	return v.value
}

func (v *NullableScope) Set(val *Scope) {
	v.value = val
	v.isSet = true
}

func (v NullableScope) IsSet() bool {
	return v.isSet
}

func (v *NullableScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScope(val *Scope) *NullableScope {
	return &NullableScope{value: val, isSet: true}
}

func (v NullableScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


