/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SamlConfigSettingsReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SamlConfigSettingsReq{}

// SamlConfigSettingsReq struct for SamlConfigSettingsReq
type SamlConfigSettingsReq struct {
	DisableInResponseToCheck *bool `json:"disableInResponseToCheck,omitempty"`
	ChangeMode *string `json:"changeMode,omitempty"`
	KeyId *string `json:"keyId,omitempty"`
	Key *SamlKey `json:"key,omitempty"`
}

// NewSamlConfigSettingsReq instantiates a new SamlConfigSettingsReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlConfigSettingsReq() *SamlConfigSettingsReq {
	this := SamlConfigSettingsReq{}
	return &this
}

// NewSamlConfigSettingsReqWithDefaults instantiates a new SamlConfigSettingsReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlConfigSettingsReqWithDefaults() *SamlConfigSettingsReq {
	this := SamlConfigSettingsReq{}
	return &this
}

// GetDisableInResponseToCheck returns the DisableInResponseToCheck field value if set, zero value otherwise.
func (o *SamlConfigSettingsReq) GetDisableInResponseToCheck() bool {
	if o == nil || IsNil(o.DisableInResponseToCheck) {
		var ret bool
		return ret
	}
	return *o.DisableInResponseToCheck
}

// GetDisableInResponseToCheckOk returns a tuple with the DisableInResponseToCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsReq) GetDisableInResponseToCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableInResponseToCheck) {
		return nil, false
	}
	return o.DisableInResponseToCheck, true
}

// HasDisableInResponseToCheck returns a boolean if a field has been set.
func (o *SamlConfigSettingsReq) HasDisableInResponseToCheck() bool {
	if o != nil && !IsNil(o.DisableInResponseToCheck) {
		return true
	}

	return false
}

// SetDisableInResponseToCheck gets a reference to the given bool and assigns it to the DisableInResponseToCheck field.
func (o *SamlConfigSettingsReq) SetDisableInResponseToCheck(v bool) {
	o.DisableInResponseToCheck = &v
}

// GetChangeMode returns the ChangeMode field value if set, zero value otherwise.
func (o *SamlConfigSettingsReq) GetChangeMode() string {
	if o == nil || IsNil(o.ChangeMode) {
		var ret string
		return ret
	}
	return *o.ChangeMode
}

// GetChangeModeOk returns a tuple with the ChangeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsReq) GetChangeModeOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeMode) {
		return nil, false
	}
	return o.ChangeMode, true
}

// HasChangeMode returns a boolean if a field has been set.
func (o *SamlConfigSettingsReq) HasChangeMode() bool {
	if o != nil && !IsNil(o.ChangeMode) {
		return true
	}

	return false
}

// SetChangeMode gets a reference to the given string and assigns it to the ChangeMode field.
func (o *SamlConfigSettingsReq) SetChangeMode(v string) {
	o.ChangeMode = &v
}

// GetKeyId returns the KeyId field value if set, zero value otherwise.
func (o *SamlConfigSettingsReq) GetKeyId() string {
	if o == nil || IsNil(o.KeyId) {
		var ret string
		return ret
	}
	return *o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsReq) GetKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.KeyId) {
		return nil, false
	}
	return o.KeyId, true
}

// HasKeyId returns a boolean if a field has been set.
func (o *SamlConfigSettingsReq) HasKeyId() bool {
	if o != nil && !IsNil(o.KeyId) {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given string and assigns it to the KeyId field.
func (o *SamlConfigSettingsReq) SetKeyId(v string) {
	o.KeyId = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SamlConfigSettingsReq) GetKey() SamlKey {
	if o == nil || IsNil(o.Key) {
		var ret SamlKey
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConfigSettingsReq) GetKeyOk() (*SamlKey, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SamlConfigSettingsReq) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given SamlKey and assigns it to the Key field.
func (o *SamlConfigSettingsReq) SetKey(v SamlKey) {
	o.Key = &v
}

func (o SamlConfigSettingsReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SamlConfigSettingsReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableInResponseToCheck) {
		toSerialize["disableInResponseToCheck"] = o.DisableInResponseToCheck
	}
	if !IsNil(o.ChangeMode) {
		toSerialize["changeMode"] = o.ChangeMode
	}
	if !IsNil(o.KeyId) {
		toSerialize["keyId"] = o.KeyId
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableSamlConfigSettingsReq struct {
	value *SamlConfigSettingsReq
	isSet bool
}

func (v NullableSamlConfigSettingsReq) Get() *SamlConfigSettingsReq {
	return v.value
}

func (v *NullableSamlConfigSettingsReq) Set(val *SamlConfigSettingsReq) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlConfigSettingsReq) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlConfigSettingsReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlConfigSettingsReq(val *SamlConfigSettingsReq) *NullableSamlConfigSettingsReq {
	return &NullableSamlConfigSettingsReq{value: val, isSet: true}
}

func (v NullableSamlConfigSettingsReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlConfigSettingsReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


