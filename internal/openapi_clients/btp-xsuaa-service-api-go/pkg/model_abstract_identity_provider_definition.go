/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AbstractIdentityProviderDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractIdentityProviderDefinition{}

// AbstractIdentityProviderDefinition struct for AbstractIdentityProviderDefinition
type AbstractIdentityProviderDefinition struct {
	EmailDomain []string `json:"emailDomain,omitempty"`
	AdditionalConfiguration map[string]map[string]interface{} `json:"additionalConfiguration,omitempty"`
	ProviderDescription *string `json:"providerDescription,omitempty"`
}

// NewAbstractIdentityProviderDefinition instantiates a new AbstractIdentityProviderDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractIdentityProviderDefinition() *AbstractIdentityProviderDefinition {
	this := AbstractIdentityProviderDefinition{}
	return &this
}

// NewAbstractIdentityProviderDefinitionWithDefaults instantiates a new AbstractIdentityProviderDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractIdentityProviderDefinitionWithDefaults() *AbstractIdentityProviderDefinition {
	this := AbstractIdentityProviderDefinition{}
	return &this
}

// GetEmailDomain returns the EmailDomain field value if set, zero value otherwise.
func (o *AbstractIdentityProviderDefinition) GetEmailDomain() []string {
	if o == nil || IsNil(o.EmailDomain) {
		var ret []string
		return ret
	}
	return o.EmailDomain
}

// GetEmailDomainOk returns a tuple with the EmailDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractIdentityProviderDefinition) GetEmailDomainOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailDomain) {
		return nil, false
	}
	return o.EmailDomain, true
}

// HasEmailDomain returns a boolean if a field has been set.
func (o *AbstractIdentityProviderDefinition) HasEmailDomain() bool {
	if o != nil && !IsNil(o.EmailDomain) {
		return true
	}

	return false
}

// SetEmailDomain gets a reference to the given []string and assigns it to the EmailDomain field.
func (o *AbstractIdentityProviderDefinition) SetEmailDomain(v []string) {
	o.EmailDomain = v
}

// GetAdditionalConfiguration returns the AdditionalConfiguration field value if set, zero value otherwise.
func (o *AbstractIdentityProviderDefinition) GetAdditionalConfiguration() map[string]map[string]interface{} {
	if o == nil || IsNil(o.AdditionalConfiguration) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.AdditionalConfiguration
}

// GetAdditionalConfigurationOk returns a tuple with the AdditionalConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractIdentityProviderDefinition) GetAdditionalConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalConfiguration) {
		return map[string]map[string]interface{}{}, false
	}
	return o.AdditionalConfiguration, true
}

// HasAdditionalConfiguration returns a boolean if a field has been set.
func (o *AbstractIdentityProviderDefinition) HasAdditionalConfiguration() bool {
	if o != nil && !IsNil(o.AdditionalConfiguration) {
		return true
	}

	return false
}

// SetAdditionalConfiguration gets a reference to the given map[string]map[string]interface{} and assigns it to the AdditionalConfiguration field.
func (o *AbstractIdentityProviderDefinition) SetAdditionalConfiguration(v map[string]map[string]interface{}) {
	o.AdditionalConfiguration = v
}

// GetProviderDescription returns the ProviderDescription field value if set, zero value otherwise.
func (o *AbstractIdentityProviderDefinition) GetProviderDescription() string {
	if o == nil || IsNil(o.ProviderDescription) {
		var ret string
		return ret
	}
	return *o.ProviderDescription
}

// GetProviderDescriptionOk returns a tuple with the ProviderDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractIdentityProviderDefinition) GetProviderDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderDescription) {
		return nil, false
	}
	return o.ProviderDescription, true
}

// HasProviderDescription returns a boolean if a field has been set.
func (o *AbstractIdentityProviderDefinition) HasProviderDescription() bool {
	if o != nil && !IsNil(o.ProviderDescription) {
		return true
	}

	return false
}

// SetProviderDescription gets a reference to the given string and assigns it to the ProviderDescription field.
func (o *AbstractIdentityProviderDefinition) SetProviderDescription(v string) {
	o.ProviderDescription = &v
}

func (o AbstractIdentityProviderDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractIdentityProviderDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailDomain) {
		toSerialize["emailDomain"] = o.EmailDomain
	}
	if !IsNil(o.AdditionalConfiguration) {
		toSerialize["additionalConfiguration"] = o.AdditionalConfiguration
	}
	if !IsNil(o.ProviderDescription) {
		toSerialize["providerDescription"] = o.ProviderDescription
	}
	return toSerialize, nil
}

type NullableAbstractIdentityProviderDefinition struct {
	value *AbstractIdentityProviderDefinition
	isSet bool
}

func (v NullableAbstractIdentityProviderDefinition) Get() *AbstractIdentityProviderDefinition {
	return v.value
}

func (v *NullableAbstractIdentityProviderDefinition) Set(val *AbstractIdentityProviderDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractIdentityProviderDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractIdentityProviderDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractIdentityProviderDefinition(val *AbstractIdentityProviderDefinition) *NullableAbstractIdentityProviderDefinition {
	return &NullableAbstractIdentityProviderDefinition{value: val, isSet: true}
}

func (v NullableAbstractIdentityProviderDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractIdentityProviderDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


