/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoleReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleReference{}

// RoleReference struct for RoleReference
type RoleReference struct {
	RoleTemplateAppId *string `json:"roleTemplateAppId,omitempty"`
	RoleTemplateName *string `json:"roleTemplateName,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewRoleReference instantiates a new RoleReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleReference() *RoleReference {
	this := RoleReference{}
	return &this
}

// NewRoleReferenceWithDefaults instantiates a new RoleReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleReferenceWithDefaults() *RoleReference {
	this := RoleReference{}
	return &this
}

// GetRoleTemplateAppId returns the RoleTemplateAppId field value if set, zero value otherwise.
func (o *RoleReference) GetRoleTemplateAppId() string {
	if o == nil || IsNil(o.RoleTemplateAppId) {
		var ret string
		return ret
	}
	return *o.RoleTemplateAppId
}

// GetRoleTemplateAppIdOk returns a tuple with the RoleTemplateAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleReference) GetRoleTemplateAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleTemplateAppId) {
		return nil, false
	}
	return o.RoleTemplateAppId, true
}

// HasRoleTemplateAppId returns a boolean if a field has been set.
func (o *RoleReference) HasRoleTemplateAppId() bool {
	if o != nil && !IsNil(o.RoleTemplateAppId) {
		return true
	}

	return false
}

// SetRoleTemplateAppId gets a reference to the given string and assigns it to the RoleTemplateAppId field.
func (o *RoleReference) SetRoleTemplateAppId(v string) {
	o.RoleTemplateAppId = &v
}

// GetRoleTemplateName returns the RoleTemplateName field value if set, zero value otherwise.
func (o *RoleReference) GetRoleTemplateName() string {
	if o == nil || IsNil(o.RoleTemplateName) {
		var ret string
		return ret
	}
	return *o.RoleTemplateName
}

// GetRoleTemplateNameOk returns a tuple with the RoleTemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleReference) GetRoleTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleTemplateName) {
		return nil, false
	}
	return o.RoleTemplateName, true
}

// HasRoleTemplateName returns a boolean if a field has been set.
func (o *RoleReference) HasRoleTemplateName() bool {
	if o != nil && !IsNil(o.RoleTemplateName) {
		return true
	}

	return false
}

// SetRoleTemplateName gets a reference to the given string and assigns it to the RoleTemplateName field.
func (o *RoleReference) SetRoleTemplateName(v string) {
	o.RoleTemplateName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleReference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleReference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleReference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleReference) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleReference) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleReference) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleReference) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleReference) SetDescription(v string) {
	o.Description = &v
}

func (o RoleReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleTemplateAppId) {
		toSerialize["roleTemplateAppId"] = o.RoleTemplateAppId
	}
	if !IsNil(o.RoleTemplateName) {
		toSerialize["roleTemplateName"] = o.RoleTemplateName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableRoleReference struct {
	value *RoleReference
	isSet bool
}

func (v NullableRoleReference) Get() *RoleReference {
	return v.value
}

func (v *NullableRoleReference) Set(val *RoleReference) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleReference) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleReference(val *RoleReference) *NullableRoleReference {
	return &NullableRoleReference{value: val, isSet: true}
}

func (v NullableRoleReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


