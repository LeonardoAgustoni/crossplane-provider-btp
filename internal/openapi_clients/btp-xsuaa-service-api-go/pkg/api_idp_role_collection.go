/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type IdpRoleCollectionAPI interface {

	/*
	AddIdpAttributeToRoleCollection Add a Idp attribute with value and operator to a role collection

	Add an attribute with value and operation to current IdP and application role collection.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin Origin Key
	@return IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest
	*/
	AddIdpAttributeToRoleCollection(ctx context.Context, origin string) IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest

	// AddIdpAttributeToRoleCollectionExecute executes the request
	//  @return map[string]interface{}
	AddIdpAttributeToRoleCollectionExecute(r IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest) (map[string]interface{}, *http.Response, error)

	/*
	DeleteIdpAttributeToRoleCollection delete attribute with value from a role collection

	Delete an attribute value for the current attribute within current IdP and application role collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin IDP-OriginKey
	@param attributeName Name of the Idp attribute
	@param operator Operator
	@param attributeValue Value of the Idp attribute
	@param roleCollectionName Name of the role collection
	@return IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest
	*/
	DeleteIdpAttributeToRoleCollection(ctx context.Context, origin string, attributeName string, operator string, attributeValue string, roleCollectionName string) IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest

	// DeleteIdpAttributeToRoleCollectionExecute executes the request
	//  @return map[string]interface{}
	DeleteIdpAttributeToRoleCollectionExecute(r IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest) (map[string]interface{}, *http.Response, error)

	/*
	GetIdpAttributeValues Get attributes and role collection of IdP

	Read all attributes for current IdP and application role collection.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin IDP-OriginKey
	@return IdpRoleCollectionAPIGetIdpAttributeValuesRequest
	*/
	GetIdpAttributeValues(ctx context.Context, origin string) IdpRoleCollectionAPIGetIdpAttributeValuesRequest

	// GetIdpAttributeValuesExecute executes the request
	//  @return []RoleCollectionAttribute
	GetIdpAttributeValuesExecute(r IdpRoleCollectionAPIGetIdpAttributeValuesRequest) ([]RoleCollectionAttribute, *http.Response, error)

	/*
	GetIdpAttributeValuesFromRoleCollection Get attributes and role collections from IdP

	Read all attributes for current IdP and application role collection.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin IDP-OriginKey
	@param roleCollectionName Name of the role collection
	@return IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest
	*/
	GetIdpAttributeValuesFromRoleCollection(ctx context.Context, origin string, roleCollectionName string) IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest

	// GetIdpAttributeValuesFromRoleCollectionExecute executes the request
	//  @return []RoleCollectionAttribute
	GetIdpAttributeValuesFromRoleCollectionExecute(r IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest) ([]RoleCollectionAttribute, *http.Response, error)

	/*
	GetIdpAttributeValuesFromRoleCollectionByAttribute Read all attributes for current IdP and application role collection

	ist of Idp attribute value of a role collection for current attribute name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin IDP-OriginKey
	@param attributeName Name of the attribute
	@param roleCollectionName Name of the role collection
	@return IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest
	*/
	GetIdpAttributeValuesFromRoleCollectionByAttribute(ctx context.Context, origin string, attributeName string, roleCollectionName string) IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest

	// GetIdpAttributeValuesFromRoleCollectionByAttributeExecute executes the request
	//  @return []RoleCollectionAttribute
	GetIdpAttributeValuesFromRoleCollectionByAttributeExecute(r IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest) ([]RoleCollectionAttribute, *http.Response, error)

	/*
	GetRoleCollectionByAttributeValue Read role collections from current attribute value and IdP

	List of application role collections which are assigned to the current idP and the current attribute/value

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin IDP-OriginKey
	@param attributeName attribute name
	@param attributeValue IDP attribute value
	@return IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest
	*/
	GetRoleCollectionByAttributeValue(ctx context.Context, origin string, attributeName string, attributeValue string) IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest

	// GetRoleCollectionByAttributeValueExecute executes the request
	//  @return []RoleCollection
	GetRoleCollectionByAttributeValueExecute(r IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest) ([]RoleCollection, *http.Response, error)
}

// IdpRoleCollectionAPIService IdpRoleCollectionAPI service
type IdpRoleCollectionAPIService service

type IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest struct {
	ctx context.Context
	ApiService IdpRoleCollectionAPI
	origin string
	identityProviderMapping *IdentityProviderMapping
}

func (r IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest) IdentityProviderMapping(identityProviderMapping IdentityProviderMapping) IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest {
	r.identityProviderMapping = &identityProviderMapping
	return r
}

func (r IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AddIdpAttributeToRoleCollectionExecute(r)
}

/*
AddIdpAttributeToRoleCollection Add a Idp attribute with value and operator to a role collection

Add an attribute with value and operation to current IdP and application role collection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin Origin Key
 @return IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest
*/
func (a *IdpRoleCollectionAPIService) AddIdpAttributeToRoleCollection(ctx context.Context, origin string) IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest {
	return IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *IdpRoleCollectionAPIService) AddIdpAttributeToRoleCollectionExecute(r IdpRoleCollectionAPIAddIdpAttributeToRoleCollectionRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpRoleCollectionAPIService.AddIdpAttributeToRoleCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/authorization/v2/identity-providers/{origin}/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.identityProviderMapping == nil {
		return localVarReturnValue, nil, reportError("identityProviderMapping is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.identityProviderMapping
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest struct {
	ctx context.Context
	ApiService IdpRoleCollectionAPI
	origin string
	attributeName string
	operator string
	attributeValue string
	roleCollectionName string
}

func (r IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteIdpAttributeToRoleCollectionExecute(r)
}

/*
DeleteIdpAttributeToRoleCollection delete attribute with value from a role collection

Delete an attribute value for the current attribute within current IdP and application role collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin IDP-OriginKey
 @param attributeName Name of the Idp attribute
 @param operator Operator
 @param attributeValue Value of the Idp attribute
 @param roleCollectionName Name of the role collection
 @return IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest
*/
func (a *IdpRoleCollectionAPIService) DeleteIdpAttributeToRoleCollection(ctx context.Context, origin string, attributeName string, operator string, attributeValue string, roleCollectionName string) IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest {
	return IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
		attributeName: attributeName,
		operator: operator,
		attributeValue: attributeValue,
		roleCollectionName: roleCollectionName,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *IdpRoleCollectionAPIService) DeleteIdpAttributeToRoleCollectionExecute(r IdpRoleCollectionAPIDeleteIdpAttributeToRoleCollectionRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpRoleCollectionAPIService.DeleteIdpAttributeToRoleCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/{attributeName}/{operator}/{attributeValue}/rolecollections/{roleCollectionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeName"+"}", url.PathEscape(parameterValueToString(r.attributeName, "attributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operator"+"}", url.PathEscape(parameterValueToString(r.operator, "operator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeValue"+"}", url.PathEscape(parameterValueToString(r.attributeValue, "attributeValue")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleCollectionName"+"}", url.PathEscape(parameterValueToString(r.roleCollectionName, "roleCollectionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdpRoleCollectionAPIGetIdpAttributeValuesRequest struct {
	ctx context.Context
	ApiService IdpRoleCollectionAPI
	origin string
}

func (r IdpRoleCollectionAPIGetIdpAttributeValuesRequest) Execute() ([]RoleCollectionAttribute, *http.Response, error) {
	return r.ApiService.GetIdpAttributeValuesExecute(r)
}

/*
GetIdpAttributeValues Get attributes and role collection of IdP

Read all attributes for current IdP and application role collection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin IDP-OriginKey
 @return IdpRoleCollectionAPIGetIdpAttributeValuesRequest
*/
func (a *IdpRoleCollectionAPIService) GetIdpAttributeValues(ctx context.Context, origin string) IdpRoleCollectionAPIGetIdpAttributeValuesRequest {
	return IdpRoleCollectionAPIGetIdpAttributeValuesRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
	}
}

// Execute executes the request
//  @return []RoleCollectionAttribute
func (a *IdpRoleCollectionAPIService) GetIdpAttributeValuesExecute(r IdpRoleCollectionAPIGetIdpAttributeValuesRequest) ([]RoleCollectionAttribute, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RoleCollectionAttribute
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpRoleCollectionAPIService.GetIdpAttributeValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/rolecollections"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest struct {
	ctx context.Context
	ApiService IdpRoleCollectionAPI
	origin string
	roleCollectionName string
}

func (r IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest) Execute() ([]RoleCollectionAttribute, *http.Response, error) {
	return r.ApiService.GetIdpAttributeValuesFromRoleCollectionExecute(r)
}

/*
GetIdpAttributeValuesFromRoleCollection Get attributes and role collections from IdP

Read all attributes for current IdP and application role collection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin IDP-OriginKey
 @param roleCollectionName Name of the role collection
 @return IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest
*/
func (a *IdpRoleCollectionAPIService) GetIdpAttributeValuesFromRoleCollection(ctx context.Context, origin string, roleCollectionName string) IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest {
	return IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
		roleCollectionName: roleCollectionName,
	}
}

// Execute executes the request
//  @return []RoleCollectionAttribute
func (a *IdpRoleCollectionAPIService) GetIdpAttributeValuesFromRoleCollectionExecute(r IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionRequest) ([]RoleCollectionAttribute, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RoleCollectionAttribute
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpRoleCollectionAPIService.GetIdpAttributeValuesFromRoleCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/authorization/v2/identity-providers/{origin}/rolecollections/{roleCollectionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleCollectionName"+"}", url.PathEscape(parameterValueToString(r.roleCollectionName, "roleCollectionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest struct {
	ctx context.Context
	ApiService IdpRoleCollectionAPI
	origin string
	attributeName string
	roleCollectionName string
}

func (r IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest) Execute() ([]RoleCollectionAttribute, *http.Response, error) {
	return r.ApiService.GetIdpAttributeValuesFromRoleCollectionByAttributeExecute(r)
}

/*
GetIdpAttributeValuesFromRoleCollectionByAttribute Read all attributes for current IdP and application role collection

ist of Idp attribute value of a role collection for current attribute name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin IDP-OriginKey
 @param attributeName Name of the attribute
 @param roleCollectionName Name of the role collection
 @return IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest
*/
func (a *IdpRoleCollectionAPIService) GetIdpAttributeValuesFromRoleCollectionByAttribute(ctx context.Context, origin string, attributeName string, roleCollectionName string) IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest {
	return IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
		attributeName: attributeName,
		roleCollectionName: roleCollectionName,
	}
}

// Execute executes the request
//  @return []RoleCollectionAttribute
func (a *IdpRoleCollectionAPIService) GetIdpAttributeValuesFromRoleCollectionByAttributeExecute(r IdpRoleCollectionAPIGetIdpAttributeValuesFromRoleCollectionByAttributeRequest) ([]RoleCollectionAttribute, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RoleCollectionAttribute
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpRoleCollectionAPIService.GetIdpAttributeValuesFromRoleCollectionByAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/{attributeName}/rolecollections/{roleCollectionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeName"+"}", url.PathEscape(parameterValueToString(r.attributeName, "attributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleCollectionName"+"}", url.PathEscape(parameterValueToString(r.roleCollectionName, "roleCollectionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []RoleCollectionAttribute
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest struct {
	ctx context.Context
	ApiService IdpRoleCollectionAPI
	origin string
	attributeName string
	attributeValue string
}

func (r IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest) Execute() ([]RoleCollection, *http.Response, error) {
	return r.ApiService.GetRoleCollectionByAttributeValueExecute(r)
}

/*
GetRoleCollectionByAttributeValue Read role collections from current attribute value and IdP

List of application role collections which are assigned to the current idP and the current attribute/value

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin IDP-OriginKey
 @param attributeName attribute name
 @param attributeValue IDP attribute value
 @return IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest
*/
func (a *IdpRoleCollectionAPIService) GetRoleCollectionByAttributeValue(ctx context.Context, origin string, attributeName string, attributeValue string) IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest {
	return IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
		attributeName: attributeName,
		attributeValue: attributeValue,
	}
}

// Execute executes the request
//  @return []RoleCollection
func (a *IdpRoleCollectionAPIService) GetRoleCollectionByAttributeValueExecute(r IdpRoleCollectionAPIGetRoleCollectionByAttributeValueRequest) ([]RoleCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RoleCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdpRoleCollectionAPIService.GetRoleCollectionByAttributeValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/{attributeName}/{attributeValue}"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeName"+"}", url.PathEscape(parameterValueToString(r.attributeName, "attributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeValue"+"}", url.PathEscape(parameterValueToString(r.attributeValue, "attributeValue")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []RoleCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []RoleCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
