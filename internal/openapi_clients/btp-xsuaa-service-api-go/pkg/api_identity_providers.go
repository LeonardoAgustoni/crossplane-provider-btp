/*
SAP XSUAA REST API

Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type IdentityProvidersAPI interface {

	/*
	CreateIdentityProvider Creates an identity provider.

	Creates an identity provider based on a configuration in JSON format.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IdentityProvidersAPICreateIdentityProviderRequest
	*/
	CreateIdentityProvider(ctx context.Context) IdentityProvidersAPICreateIdentityProviderRequest

	// CreateIdentityProviderExecute executes the request
	//  @return IdentityProviderAbstractIdentityProviderDefinition
	CreateIdentityProviderExecute(r IdentityProvidersAPICreateIdentityProviderRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)

	/*
	DeleteIdentityProvider Method for DeleteIdentityProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return IdentityProvidersAPIDeleteIdentityProviderRequest
	*/
	DeleteIdentityProvider(ctx context.Context, id string) IdentityProvidersAPIDeleteIdentityProviderRequest

	// DeleteIdentityProviderExecute executes the request
	//  @return IdentityProviderAbstractIdentityProviderDefinition
	DeleteIdentityProviderExecute(r IdentityProvidersAPIDeleteIdentityProviderRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)

	/*
	DeleteIdentityProviderUsingOriginKey Method for DeleteIdentityProviderUsingOriginKey

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest
	*/
	DeleteIdentityProviderUsingOriginKey(ctx context.Context, originKey string) IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest

	// DeleteIdentityProviderUsingOriginKeyExecute executes the request
	//  @return IdentityProviderAbstractIdentityProviderDefinition
	DeleteIdentityProviderUsingOriginKeyExecute(r IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)

	/*
	GetRegistryStatus Returns the status of IAS registry.

	Returns the current status of the IAS registry component. This includes a json payload containing errors or a health statement.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IdentityProvidersAPIGetRegistryStatusRequest
	*/
	GetRegistryStatus(ctx context.Context) IdentityProvidersAPIGetRegistryStatusRequest

	// GetRegistryStatusExecute executes the request
	//  @return string
	GetRegistryStatusExecute(r IdentityProvidersAPIGetRegistryStatusRequest) (string, *http.Response, error)

	/*
	MigrateSAMLToOIDCIDP Method for MigrateSAMLToOIDCIDP

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin
	@return IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest
	*/
	MigrateSAMLToOIDCIDP(ctx context.Context, origin string) IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest

	// MigrateSAMLToOIDCIDPExecute executes the request
	//  @return IdentityProviderAbstractIdentityProviderDefinition
	MigrateSAMLToOIDCIDPExecute(r IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)

	/*
	RetrieveIasTenants Returns a list of valid IAS tenants.

	For the current XSUAA tenant, returns those IAS tenants for which no SAML trust has been set up yet.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IdentityProvidersAPIRetrieveIasTenantsRequest
	*/
	RetrieveIasTenants(ctx context.Context) IdentityProvidersAPIRetrieveIasTenantsRequest

	// RetrieveIasTenantsExecute executes the request
	//  @return []map[string]map[string]interface{}
	RetrieveIasTenantsExecute(r IdentityProvidersAPIRetrieveIasTenantsRequest) ([]map[string]map[string]interface{}, *http.Response, error)

	/*
	RetrieveIdentityProvider Returns an identity provider.

	Returns an identity provider specified by the id of the identity provider.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return IdentityProvidersAPIRetrieveIdentityProviderRequest
	*/
	RetrieveIdentityProvider(ctx context.Context, id string) IdentityProvidersAPIRetrieveIdentityProviderRequest

	// RetrieveIdentityProviderExecute executes the request
	//  @return XSIdentityProviderAbstractIdentityProviderDefinition
	RetrieveIdentityProviderExecute(r IdentityProvidersAPIRetrieveIdentityProviderRequest) (*XSIdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)

	/*
	RetrieveIdentityProviderByOriginKeyDeprecated Method for RetrieveIdentityProviderByOriginKeyDeprecated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest

	Deprecated
	*/
	RetrieveIdentityProviderByOriginKeyDeprecated(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest

	// RetrieveIdentityProviderByOriginKeyDeprecatedExecute executes the request
	//  @return BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProviderByOriginKeyDeprecatedExecute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest) (*BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveIdentityProviderByOriginKeyDeprecated1 Method for RetrieveIdentityProviderByOriginKeyDeprecated1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request

	Deprecated
	*/
	RetrieveIdentityProviderByOriginKeyDeprecated1(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request

	// RetrieveIdentityProviderByOriginKeyDeprecated1Execute executes the request
	//  @return BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProviderByOriginKeyDeprecated1Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request) (*BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveIdentityProviderByOriginKeyDeprecated2 Method for RetrieveIdentityProviderByOriginKeyDeprecated2

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request

	Deprecated
	*/
	RetrieveIdentityProviderByOriginKeyDeprecated2(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request

	// RetrieveIdentityProviderByOriginKeyDeprecated2Execute executes the request
	//  @return BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProviderByOriginKeyDeprecated2Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request) (*BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveIdentityProviderByOriginKeyDeprecated3 Method for RetrieveIdentityProviderByOriginKeyDeprecated3

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request

	Deprecated
	*/
	RetrieveIdentityProviderByOriginKeyDeprecated3(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request

	// RetrieveIdentityProviderByOriginKeyDeprecated3Execute executes the request
	//  @return BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProviderByOriginKeyDeprecated3Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request) (*BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveIdentityProviderByOriginKeyDeprecated4 Method for RetrieveIdentityProviderByOriginKeyDeprecated4

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request

	Deprecated
	*/
	RetrieveIdentityProviderByOriginKeyDeprecated4(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request

	// RetrieveIdentityProviderByOriginKeyDeprecated4Execute executes the request
	//  @return BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProviderByOriginKeyDeprecated4Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request) (*BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveIdentityProviderByOriginKeyDeprecated5 Method for RetrieveIdentityProviderByOriginKeyDeprecated5

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request

	Deprecated
	*/
	RetrieveIdentityProviderByOriginKeyDeprecated5(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request

	// RetrieveIdentityProviderByOriginKeyDeprecated5Execute executes the request
	//  @return BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProviderByOriginKeyDeprecated5Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request) (*BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveIdentityProviderByOriginKeyDeprecated6 Method for RetrieveIdentityProviderByOriginKeyDeprecated6

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originKey
	@return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request

	Deprecated
	*/
	RetrieveIdentityProviderByOriginKeyDeprecated6(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request

	// RetrieveIdentityProviderByOriginKeyDeprecated6Execute executes the request
	//  @return BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProviderByOriginKeyDeprecated6Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request) (*BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveIdentityProviders Returns a list of identity providers.

	Returns a list of identity providers for the current subaccount.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IdentityProvidersAPIRetrieveIdentityProvidersRequest
	*/
	RetrieveIdentityProviders(ctx context.Context) IdentityProvidersAPIRetrieveIdentityProvidersRequest

	// RetrieveIdentityProvidersExecute executes the request
	//  @return []XSIdentityProviderAbstractIdentityProviderDefinition
	RetrieveIdentityProvidersExecute(r IdentityProvidersAPIRetrieveIdentityProvidersRequest) ([]XSIdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)

	/*
	RetrieveIdentityProvidersForBtpCliDeprecated Method for RetrieveIdentityProvidersForBtpCliDeprecated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest

	Deprecated
	*/
	RetrieveIdentityProvidersForBtpCliDeprecated(ctx context.Context) IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest

	// RetrieveIdentityProvidersForBtpCliDeprecatedExecute executes the request
	//  @return []BtpCliXsIdentityProvider
	// Deprecated
	RetrieveIdentityProvidersForBtpCliDeprecatedExecute(r IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest) ([]BtpCliXsIdentityProvider, *http.Response, error)

	/*
	RetrieveSpecificIasTenant Returns a specific IAS tenant.

	Returns a specific IAS tenants for the current XSUAA tenant.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenantURL
	@return IdentityProvidersAPIRetrieveSpecificIasTenantRequest
	*/
	RetrieveSpecificIasTenant(ctx context.Context, tenantURL string) IdentityProvidersAPIRetrieveSpecificIasTenantRequest

	// RetrieveSpecificIasTenantExecute executes the request
	//  @return map[string]map[string]interface{}
	RetrieveSpecificIasTenantExecute(r IdentityProvidersAPIRetrieveSpecificIasTenantRequest) (map[string]map[string]interface{}, *http.Response, error)

	/*
	RollbackSAMLToOIDCIDP Method for RollbackSAMLToOIDCIDP

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param origin
	@return IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest
	*/
	RollbackSAMLToOIDCIDP(ctx context.Context, origin string) IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest

	// RollbackSAMLToOIDCIDPExecute executes the request
	//  @return IdentityProviderAbstractIdentityProviderDefinition
	RollbackSAMLToOIDCIDPExecute(r IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)

	/*
	UpdateIdentityProvider Method for UpdateIdentityProvider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return IdentityProvidersAPIUpdateIdentityProviderRequest
	*/
	UpdateIdentityProvider(ctx context.Context, id string) IdentityProvidersAPIUpdateIdentityProviderRequest

	// UpdateIdentityProviderExecute executes the request
	//  @return IdentityProviderAbstractIdentityProviderDefinition
	UpdateIdentityProviderExecute(r IdentityProvidersAPIUpdateIdentityProviderRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error)
}

// IdentityProvidersAPIService IdentityProvidersAPI service
type IdentityProvidersAPIService service

type IdentityProvidersAPICreateIdentityProviderRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	xSIdentityProvider *XSIdentityProvider
	rawConfig *bool
}

func (r IdentityProvidersAPICreateIdentityProviderRequest) XSIdentityProvider(xSIdentityProvider XSIdentityProvider) IdentityProvidersAPICreateIdentityProviderRequest {
	r.xSIdentityProvider = &xSIdentityProvider
	return r
}

func (r IdentityProvidersAPICreateIdentityProviderRequest) RawConfig(rawConfig bool) IdentityProvidersAPICreateIdentityProviderRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPICreateIdentityProviderRequest) Execute() (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.CreateIdentityProviderExecute(r)
}

/*
CreateIdentityProvider Creates an identity provider.

Creates an identity provider based on a configuration in JSON format.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IdentityProvidersAPICreateIdentityProviderRequest
*/
func (a *IdentityProvidersAPIService) CreateIdentityProvider(ctx context.Context) IdentityProvidersAPICreateIdentityProviderRequest {
	return IdentityProvidersAPICreateIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) CreateIdentityProviderExecute(r IdentityProvidersAPICreateIdentityProviderRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.CreateIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xSIdentityProvider == nil {
		return localVarReturnValue, nil, reportError("xSIdentityProvider is required and must be specified")
	}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xSIdentityProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v IdentityProviderAbstractIdentityProviderDefinition
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v IdentityProviderAbstractIdentityProviderDefinition
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIDeleteIdentityProviderRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	id string
	rawConfig *bool
}

func (r IdentityProvidersAPIDeleteIdentityProviderRequest) RawConfig(rawConfig bool) IdentityProvidersAPIDeleteIdentityProviderRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIDeleteIdentityProviderRequest) Execute() (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.DeleteIdentityProviderExecute(r)
}

/*
DeleteIdentityProvider Method for DeleteIdentityProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return IdentityProvidersAPIDeleteIdentityProviderRequest
*/
func (a *IdentityProvidersAPIService) DeleteIdentityProvider(ctx context.Context, id string) IdentityProvidersAPIDeleteIdentityProviderRequest {
	return IdentityProvidersAPIDeleteIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) DeleteIdentityProviderExecute(r IdentityProvidersAPIDeleteIdentityProviderRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.DeleteIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest) RawConfig(rawConfig bool) IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest) Execute() (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.DeleteIdentityProviderUsingOriginKeyExecute(r)
}

/*
DeleteIdentityProviderUsingOriginKey Method for DeleteIdentityProviderUsingOriginKey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest
*/
func (a *IdentityProvidersAPIService) DeleteIdentityProviderUsingOriginKey(ctx context.Context, originKey string) IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest {
	return IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return IdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) DeleteIdentityProviderUsingOriginKeyExecute(r IdentityProvidersAPIDeleteIdentityProviderUsingOriginKeyRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.DeleteIdentityProviderUsingOriginKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIGetRegistryStatusRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
}

func (r IdentityProvidersAPIGetRegistryStatusRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetRegistryStatusExecute(r)
}

/*
GetRegistryStatus Returns the status of IAS registry.

Returns the current status of the IAS registry component. This includes a json payload containing errors or a health statement.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IdentityProvidersAPIGetRegistryStatusRequest
*/
func (a *IdentityProvidersAPIService) GetRegistryStatus(ctx context.Context) IdentityProvidersAPIGetRegistryStatusRequest {
	return IdentityProvidersAPIGetRegistryStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *IdentityProvidersAPIService) GetRegistryStatusExecute(r IdentityProvidersAPIGetRegistryStatusRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.GetRegistryStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/ias/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	origin string
	xSIdentityProvider *XSIdentityProvider
}

func (r IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest) XSIdentityProvider(xSIdentityProvider XSIdentityProvider) IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest {
	r.xSIdentityProvider = &xSIdentityProvider
	return r
}

func (r IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest) Execute() (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.MigrateSAMLToOIDCIDPExecute(r)
}

/*
MigrateSAMLToOIDCIDP Method for MigrateSAMLToOIDCIDP

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin
 @return IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest
*/
func (a *IdentityProvidersAPIService) MigrateSAMLToOIDCIDP(ctx context.Context, origin string) IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest {
	return IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
	}
}

// Execute executes the request
//  @return IdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) MigrateSAMLToOIDCIDPExecute(r IdentityProvidersAPIMigrateSAMLToOIDCIDPRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.MigrateSAMLToOIDCIDP")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/migrate/{origin}"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xSIdentityProvider == nil {
		return localVarReturnValue, nil, reportError("xSIdentityProvider is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xSIdentityProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIasTenantsRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	all *bool
	additionalInfo *bool
}

func (r IdentityProvidersAPIRetrieveIasTenantsRequest) All(all bool) IdentityProvidersAPIRetrieveIasTenantsRequest {
	r.all = &all
	return r
}

func (r IdentityProvidersAPIRetrieveIasTenantsRequest) AdditionalInfo(additionalInfo bool) IdentityProvidersAPIRetrieveIasTenantsRequest {
	r.additionalInfo = &additionalInfo
	return r
}

func (r IdentityProvidersAPIRetrieveIasTenantsRequest) Execute() ([]map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.RetrieveIasTenantsExecute(r)
}

/*
RetrieveIasTenants Returns a list of valid IAS tenants.

For the current XSUAA tenant, returns those IAS tenants for which no SAML trust has been set up yet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IdentityProvidersAPIRetrieveIasTenantsRequest
*/
func (a *IdentityProvidersAPIService) RetrieveIasTenants(ctx context.Context) IdentityProvidersAPIRetrieveIasTenantsRequest {
	return IdentityProvidersAPIRetrieveIasTenantsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]map[string]interface{}
func (a *IdentityProvidersAPIService) RetrieveIasTenantsExecute(r IdentityProvidersAPIRetrieveIasTenantsRequest) ([]map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIasTenants")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/ias"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.all != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "all", r.all, "form", "")
	}
	if r.additionalInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "additionalInfo", r.additionalInfo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []map[string]map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v []map[string]map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v []map[string]map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	id string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderRequest) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderRequest) Execute() (*XSIdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderExecute(r)
}

/*
RetrieveIdentityProvider Returns an identity provider.

Returns an identity provider specified by the id of the identity provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return IdentityProvidersAPIRetrieveIdentityProviderRequest
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProvider(ctx context.Context, id string) IdentityProvidersAPIRetrieveIdentityProviderRequest {
	return IdentityProvidersAPIRetrieveIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return XSIdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderExecute(r IdentityProvidersAPIRetrieveIdentityProviderRequest) (*XSIdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XSIdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v XSIdentityProviderAbstractIdentityProviderDefinition
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v XSIdentityProviderAbstractIdentityProviderDefinition
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v XSIdentityProviderAbstractIdentityProviderDefinition
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest) Execute() (*BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderByOriginKeyDeprecatedExecute(r)
}

/*
RetrieveIdentityProviderByOriginKeyDeprecated Method for RetrieveIdentityProviderByOriginKeyDeprecated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest {
	return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecatedExecute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecatedRequest) (*BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviderByOriginKeyDeprecated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request) Execute() (*BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderByOriginKeyDeprecated1Execute(r)
}

/*
RetrieveIdentityProviderByOriginKeyDeprecated1 Method for RetrieveIdentityProviderByOriginKeyDeprecated1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated1(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request {
	return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated1Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated1Request) (*BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviderByOriginKeyDeprecated1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request) Execute() (*BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderByOriginKeyDeprecated2Execute(r)
}

/*
RetrieveIdentityProviderByOriginKeyDeprecated2 Method for RetrieveIdentityProviderByOriginKeyDeprecated2

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated2(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request {
	return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated2Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated2Request) (*BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodOptions
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviderByOriginKeyDeprecated2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request) Execute() (*BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderByOriginKeyDeprecated3Execute(r)
}

/*
RetrieveIdentityProviderByOriginKeyDeprecated3 Method for RetrieveIdentityProviderByOriginKeyDeprecated3

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated3(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request {
	return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated3Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated3Request) (*BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviderByOriginKeyDeprecated3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request) Execute() (*BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderByOriginKeyDeprecated4Execute(r)
}

/*
RetrieveIdentityProviderByOriginKeyDeprecated4 Method for RetrieveIdentityProviderByOriginKeyDeprecated4

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated4(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request {
	return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated4Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated4Request) (*BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviderByOriginKeyDeprecated4")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request) Execute() (*BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderByOriginKeyDeprecated5Execute(r)
}

/*
RetrieveIdentityProviderByOriginKeyDeprecated5 Method for RetrieveIdentityProviderByOriginKeyDeprecated5

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated5(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request {
	return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated5Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated5Request) (*BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviderByOriginKeyDeprecated5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	originKey string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request) Execute() (*BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProviderByOriginKeyDeprecated6Execute(r)
}

/*
RetrieveIdentityProviderByOriginKeyDeprecated6 Method for RetrieveIdentityProviderByOriginKeyDeprecated6

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param originKey
 @return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated6(ctx context.Context, originKey string) IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request {
	return IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request{
		ApiService: a,
		ctx: ctx,
		originKey: originKey,
	}
}

// Execute executes the request
//  @return BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProviderByOriginKeyDeprecated6Execute(r IdentityProvidersAPIRetrieveIdentityProviderByOriginKeyDeprecated6Request) (*BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviderByOriginKeyDeprecated6")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/originKey/{originKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"originKey"+"}", url.PathEscape(parameterValueToString(r.originKey, "originKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProvidersRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	activeOnly *string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProvidersRequest) ActiveOnly(activeOnly string) IdentityProvidersAPIRetrieveIdentityProvidersRequest {
	r.activeOnly = &activeOnly
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProvidersRequest) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProvidersRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProvidersRequest) Execute() ([]XSIdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProvidersExecute(r)
}

/*
RetrieveIdentityProviders Returns a list of identity providers.

Returns a list of identity providers for the current subaccount.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IdentityProvidersAPIRetrieveIdentityProvidersRequest
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProviders(ctx context.Context) IdentityProvidersAPIRetrieveIdentityProvidersRequest {
	return IdentityProvidersAPIRetrieveIdentityProvidersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []XSIdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) RetrieveIdentityProvidersExecute(r IdentityProvidersAPIRetrieveIdentityProvidersRequest) ([]XSIdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []XSIdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.activeOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activeOnly", r.activeOnly, "form", "")
	}
	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v []XSIdentityProviderAbstractIdentityProviderDefinition
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v []XSIdentityProviderAbstractIdentityProviderDefinition
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	activeOnly *string
	rawConfig *bool
}

func (r IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest) ActiveOnly(activeOnly string) IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest {
	r.activeOnly = &activeOnly
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest) RawConfig(rawConfig bool) IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest) Execute() ([]BtpCliXsIdentityProvider, *http.Response, error) {
	return r.ApiService.RetrieveIdentityProvidersForBtpCliDeprecatedExecute(r)
}

/*
RetrieveIdentityProvidersForBtpCliDeprecated Method for RetrieveIdentityProvidersForBtpCliDeprecated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest

Deprecated
*/
func (a *IdentityProvidersAPIService) RetrieveIdentityProvidersForBtpCliDeprecated(ctx context.Context) IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest {
	return IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BtpCliXsIdentityProvider
// Deprecated
func (a *IdentityProvidersAPIService) RetrieveIdentityProvidersForBtpCliDeprecatedExecute(r IdentityProvidersAPIRetrieveIdentityProvidersForBtpCliDeprecatedRequest) ([]BtpCliXsIdentityProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BtpCliXsIdentityProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveIdentityProvidersForBtpCliDeprecated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/btpcli/identity-providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.activeOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activeOnly", r.activeOnly, "form", "")
	}
	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRetrieveSpecificIasTenantRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	tenantURL string
	all *bool
	additionalInfo *bool
}

func (r IdentityProvidersAPIRetrieveSpecificIasTenantRequest) All(all bool) IdentityProvidersAPIRetrieveSpecificIasTenantRequest {
	r.all = &all
	return r
}

func (r IdentityProvidersAPIRetrieveSpecificIasTenantRequest) AdditionalInfo(additionalInfo bool) IdentityProvidersAPIRetrieveSpecificIasTenantRequest {
	r.additionalInfo = &additionalInfo
	return r
}

func (r IdentityProvidersAPIRetrieveSpecificIasTenantRequest) Execute() (map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.RetrieveSpecificIasTenantExecute(r)
}

/*
RetrieveSpecificIasTenant Returns a specific IAS tenant.

Returns a specific IAS tenants for the current XSUAA tenant.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenantURL
 @return IdentityProvidersAPIRetrieveSpecificIasTenantRequest
*/
func (a *IdentityProvidersAPIService) RetrieveSpecificIasTenant(ctx context.Context, tenantURL string) IdentityProvidersAPIRetrieveSpecificIasTenantRequest {
	return IdentityProvidersAPIRetrieveSpecificIasTenantRequest{
		ApiService: a,
		ctx: ctx,
		tenantURL: tenantURL,
	}
}

// Execute executes the request
//  @return map[string]map[string]interface{}
func (a *IdentityProvidersAPIService) RetrieveSpecificIasTenantExecute(r IdentityProvidersAPIRetrieveSpecificIasTenantRequest) (map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RetrieveSpecificIasTenant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/ias/{tenantURL}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantURL"+"}", url.PathEscape(parameterValueToString(r.tenantURL, "tenantURL")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.all != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "all", r.all, "form", "")
	}
	if r.additionalInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "additionalInfo", r.additionalInfo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v map[string]map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	origin string
}

func (r IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest) Execute() (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.RollbackSAMLToOIDCIDPExecute(r)
}

/*
RollbackSAMLToOIDCIDP Method for RollbackSAMLToOIDCIDP

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param origin
 @return IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest
*/
func (a *IdentityProvidersAPIService) RollbackSAMLToOIDCIDP(ctx context.Context, origin string) IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest {
	return IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest{
		ApiService: a,
		ctx: ctx,
		origin: origin,
	}
}

// Execute executes the request
//  @return IdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) RollbackSAMLToOIDCIDPExecute(r IdentityProvidersAPIRollbackSAMLToOIDCIDPRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.RollbackSAMLToOIDCIDP")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/migrate/{origin}/rollback"
	localVarPath = strings.Replace(localVarPath, "{"+"origin"+"}", url.PathEscape(parameterValueToString(r.origin, "origin")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersAPIUpdateIdentityProviderRequest struct {
	ctx context.Context
	ApiService IdentityProvidersAPI
	id string
	xSIdentityProvider *XSIdentityProvider
	rawConfig *bool
}

func (r IdentityProvidersAPIUpdateIdentityProviderRequest) XSIdentityProvider(xSIdentityProvider XSIdentityProvider) IdentityProvidersAPIUpdateIdentityProviderRequest {
	r.xSIdentityProvider = &xSIdentityProvider
	return r
}

func (r IdentityProvidersAPIUpdateIdentityProviderRequest) RawConfig(rawConfig bool) IdentityProvidersAPIUpdateIdentityProviderRequest {
	r.rawConfig = &rawConfig
	return r
}

func (r IdentityProvidersAPIUpdateIdentityProviderRequest) Execute() (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	return r.ApiService.UpdateIdentityProviderExecute(r)
}

/*
UpdateIdentityProvider Method for UpdateIdentityProvider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return IdentityProvidersAPIUpdateIdentityProviderRequest
*/
func (a *IdentityProvidersAPIService) UpdateIdentityProvider(ctx context.Context, id string) IdentityProvidersAPIUpdateIdentityProviderRequest {
	return IdentityProvidersAPIUpdateIdentityProviderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IdentityProviderAbstractIdentityProviderDefinition
func (a *IdentityProvidersAPIService) UpdateIdentityProviderExecute(r IdentityProvidersAPIUpdateIdentityProviderRequest) (*IdentityProviderAbstractIdentityProviderDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IdentityProviderAbstractIdentityProviderDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersAPIService.UpdateIdentityProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sap/rest/identity-providers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xSIdentityProvider == nil {
		return localVarReturnValue, nil, reportError("xSIdentityProvider is required and must be specified")
	}

	if r.rawConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawConfig", r.rawConfig, "form", "")
	} else {
		var defaultValue bool = false
		r.rawConfig = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xSIdentityProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
