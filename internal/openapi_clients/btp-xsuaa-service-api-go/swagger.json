{
  "openapi": "3.0.1",
  "info": {
    "title": "SAP XSUAA REST API",
    "description": "Provides access to RoleTemplates, Roles, RoleCollection etc. using the XSUAA REST API",
    "termsOfService": "",
    "contact": {},
    "license": {
      "name": "SAP SE, Walldorf, Germany",
      "url": "https://support.sap.com/en/my-support/keys.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://xsuaa-provisioning.cf.sap.hana.ondemand.com",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "application",
      "description": "API for providing access to XSUAA applications"
    },
    {
      "name": "idp-role-collection",
      "description": "API for providing access to XSUAA IDP groups to role collections mappings"
    },
    {
      "name": "identity-providers",
      "description": "API for providing access to XSUAA identity providers"
    },
    {
      "name": "roles",
      "description": "API for providing access to the XSUAA roles"
    },
    {
      "name": "usercontroller",
      "description": "API for managing user entries and role collections assignments"
    },
    {
      "name": "roletemplates",
      "description": "API for providing access to the XSUAA role templates"
    },
    {
      "name": "customidp",
      "description": "API to check if more custom platform IdP trusts are allowed"
    },
    {
      "name": "rolecollections",
      "description": "API for providing access to the xsuaa role collections"
    },
    {
      "name": "tenant",
      "description": "The tenants API"
    },
    {
      "name": "customidp",
      "description": "API to set the neoAuthN flag or check if set"
    }
  ],
  "paths": {
    "/sap/rest/user": {
      "put": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Update a user",
        "description": "Updates an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "onlyRoleCollections",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/XSUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin is not allowed or the payload is invalid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "200": {
            "description": "OK - The API updates the user.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The user cannot be found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Create user",
        "description": "Creates a new user from the payload",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/XSUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin is not allowed or the payload is invalid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "200": {
            "description": "OK - The API creates the new user.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/user/origin/{origin}/name/{userName}/rolecollections/{roleCollectionName}": {
      "put": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Add role collection to user",
        "description": "Assigns a role collection to a user. The user can be created if they do not exist yet.",
        "operationId": "addRoleCollection",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleCollectionName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createUserIfMissing",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API assigns the role collection the user. Additionally, the user is created if requested",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin or payload is invalid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The user or role collection cannot be found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Remove role collection from user",
        "description": "Unassigns a role collection from a user.",
        "operationId": "removeRoleCollection",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleCollectionName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API unassigns the role collection from the user.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin is invalid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The user or role collection cannot be found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/platform-identity-providers-global/{originKey}": {
      "get": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Reads a custom platform identity provider.",
        "description": "Reads a custom platform IdP from own region.",
        "operationId": "getPlatformIdentityProvider",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshMetadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Updates a custom platform identity provider.",
        "description": "Updates a custom platform IdP and distributes the information in the own region.",
        "operationId": "updatePlatformIdentityProvider",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshTrust",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XSPlatformIdentityProvider"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Deletes a custom platform identity provider.",
        "description": "Deletes a custom platform IdP and distributes the information in the own region.",
        "operationId": "deletePlatformIdentityProvider",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/identity-providers/{id}": {
      "get": {
        "tags": [
          "identity-providers"
        ],
        "summary": "Returns an identity provider.",
        "description": "Returns an identity provider specified by the id of the identity provider.",
        "operationId": "retrieveIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returned the identity provider.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/XSIdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/XSIdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          },
          "404": {
            "description": "Not found - A possible reason is that there is no identity provider that matches the id of your request.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/XSIdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/XSIdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_idp.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "updateIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XSIdentityProvider"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "deleteIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/identity-providers/migrate/{origin}": {
      "put": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "migrateSAMLToOIDCIDP",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XSIdentityProvider"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/identity-providers/migrate/{origin}/rollback": {
      "put": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "rollbackSAMLToOIDCIDP",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/authorization/v2/rolecollections/{roleCollectionName}": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Returns a role collection.",
        "description": "Returns information about a role collection identified by the name of the role collection.",
        "operationId": "getRoleCollectionByName",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of collection to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withRoles",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "withUsers",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "withGroups",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found - Possible reasons: No role collection could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "200": {
            "description": "OK - The API retuned information about the role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Updates the description of a role collection.",
        "description": "Updates the description of a role collection specified by the name of the role collection. You cannot change any other attribute of the role collection.",
        "operationId": "changeRoleCollectionDescription",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCollectionDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - The API updated the role collection description.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons: No role collection could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created - The API updated the role collection description.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Deletes a role collection.",
        "description": "Deletes a role collection specified by the name of the role collection.",
        "operationId": "deleteRoleCollectionByName",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of collection to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API deleted the role collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons: No role collection could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content - The API deleted the role collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections/{roleCollectionName}/roles": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Returns the roles of a role collection.",
        "description": "Returns information about the roles of a role collection specified by the name of the role collection.",
        "operationId": "getRolesByRoleCollectionName",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found - Possible reasons: No role collection could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK - The API returned roles for the role collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Add roles to role collection.",
        "description": "Updates a role collection with an array of roles. Specify the roles by role name, application ID, and role template name. These roles are added to the roles already included in the role collection.",
        "operationId": "addRolesToRoleCollection",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The list of role references in an array, specified by the role name, application ID, and role template name.",
                "items": {
                  "$ref": "#/components/schemas/RoleReference"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - The API updated the role collection with the specified roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created - The API updated the role collection with the specified roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons: No role collection or role could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.write",
              "xs_authorization.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Remove roles from role collection.",
        "description": "Updates a role collection by removing an array of roles from role collection. Specify the roles by role name, application ID, and role template name. These roles are removed from the role collection.",
        "operationId": "deleteRolesFromRoleCollection",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The list of role references in an array, specified by the role name, application ID, and role template name.",
                "items": {
                  "$ref": "#/components/schemas/RoleReference"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - The API updated the role collection with the specified roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created - The API updated the role collection with the specified roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons: No role collection or role could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections/{roleCollectionName}/roles/{roleTemplateAppID}/{roleName}/{roleTemplateName}": {
      "put": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Adds a role to role a collection.",
        "description": "Adds a role reference, specified by role name, application ID, and role template name, to a role collection.",
        "operationId": "addRoleToRoleCollection",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "The name of the role collection to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleTemplateAppID",
            "in": "path",
            "description": "The application ID, with which the role is associated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "description": "The name of the role to add to the role collection.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleTemplateName",
            "in": "path",
            "description": "The name of the role template, with which the role is associated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - The API updated the role collection with the specified role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons: No role collection or role could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK - The API updated the role collection with the specified role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Deletes a role from a role collection.",
        "description": "Deletes a role specified by the role reference from a role collection.",
        "operationId": "deleteRoleFromRoleCollection",
        "parameters": [
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleTemplateAppID",
            "in": "path",
            "description": "AppID of the Role Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "description": "Name of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleTemplateName",
            "in": "path",
            "description": "Name of the Role Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API removed the role from the role collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons: No role collection or role could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Created - The API removed the role from the role collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/roletemplates/{templateName}/roles/{roleName}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Returns the role of a service instance.",
        "description": "Returns a role specified by the app ID, role template, and role name.",
        "operationId": "getRoleByAppAndRoleTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "ID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of the template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "description": "Name of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The API returned the role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No service instances, role templates, or role names could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "roles"
        ],
        "summary": "Updates a role",
        "description": "Updates a role specfied by app ID, role template name, and role name.",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "ID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of the role template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "description": "Name of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The API updated and returned the role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Your request was poorly formed or the role is read-only.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No service instance, role template name, or role name could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Deletes a role.",
        "description": "Deletes a role specfied by app ID, role template name, and role name.",
        "operationId": "deleteRoleByRoleName",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of the template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "description": "Name of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The API deleted the role.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No service instance, role template name, or role name could be found that match your request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/user/bulk": {
      "post": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Create multiple users",
        "description": "Creates a set of users from the list in the payload",
        "operationId": "createUsers",
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin is not allowed or the payload is invalid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "200": {
            "description": "OK - The API creates all users.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/platform-identity-providers-global": {
      "get": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Reads all custom platform identity providers.",
        "description": "Reads all custom platform IdPs from own region.",
        "operationId": "getPlatformIdentityProviders",
        "parameters": [
          {
            "name": "userbase",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromModifiedAtInMillis",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "globalAccountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "originXsuaa",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Creates a custom platform identity provider.",
        "description": "Creates a custom platform IdP and distributes the information in the own region.",
        "operationId": "createPlatformIdentityProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XSPlatformIdentityProvider"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/platform-identity-providers-global/{originKey}/globalaccountids": {
      "get": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Reads GlobalAccountIds.",
        "description": "Reads GlobalAccountIds of a custom platform IdP.",
        "operationId": "getPlatformIdentityProviderGlobalAccountIds",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Adds a globalAccountId.",
        "description": "Adds a globalAccountId to a custom platform IdP.",
        "operationId": "addPlatformIdentityProviderGlobalAccountId",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/platform-identity-providers-global/refreshTrusts": {
      "post": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Refreshes platform Identity Provider trusts.",
        "description": "Refreshes all platform Identity Provider trusts or trusts provided in the body.",
        "operationId": "refreshPlatformIdentityProviderTrusts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/identity-providers": {
      "get": {
        "tags": [
          "identity-providers"
        ],
        "summary": "Returns a list of identity providers.",
        "description": "Returns a list of identity providers for the current subaccount.",
        "operationId": "retrieveIdentityProviders",
        "parameters": [
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returns the list of identity providers.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSIdentityProviderAbstractIdentityProviderDefinition"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSIdentityProviderAbstractIdentityProviderDefinition"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSIdentityProviderAbstractIdentityProviderDefinition"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_idp.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "identity-providers"
        ],
        "summary": "Creates an identity provider.",
        "description": "Creates an identity provider based on a configuration in JSON format.",
        "operationId": "createIdentityProvider",
        "parameters": [
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XSIdentityProvider"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The identity provider has been created.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          },
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_idp.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/globalaccount/{globalAccountId}/platform-identity-providers": {
      "get": {
        "tags": [
          "platform-identity-providers"
        ],
        "summary": "Reads all platform IdPs for token GA.",
        "description": "Reads all platform identity providers as help values for token GA.",
        "operationId": "getPlatformIdentityProvidersForGA",
        "parameters": [
          {
            "name": "globalAccountId",
            "in": "path",
            "description": "Global account ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp": [
              "xs_idp.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "platform-identity-providers"
        ],
        "summary": "Adds GA Trust for a given origin.",
        "description": "Adds a Trust for a platform identity provider.",
        "operationId": "addPlatformIdentityProviderTrust",
        "parameters": [
          {
            "name": "globalAccountId",
            "in": "path",
            "description": "Global account ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPlatformIdentityProviderTrust"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Trust added to token GA",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp": [
              "xs_idp.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/users/current/rolecollections": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Get role collections of User",
        "description": "all role collections for a user",
        "operationId": "getRoleCollectionsForUser_1",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Create bulk role collections for a User",
        "description": "create role collections for a user",
        "operationId": "createRoleCollectionsForUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCollectionListDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Delete bulk role collections of User",
        "description": "delete role collections for a user",
        "operationId": "deleteRoleCollectionsForUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCollectionListDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "No Authorization"
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Returns role collections.",
        "description": "Returns all role collections which exist within the current subaccount, sorted alphabetically by their names.",
        "operationId": "getRoleCollections",
        "parameters": [
          {
            "name": "showRoles",
            "in": "query",
            "description": "Set this parameter to true, to include the roles, that are associated with the role collections.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showUsers",
            "in": "query",
            "description": "Set this parameter to true, to include the users, to whom the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showGroups",
            "in": "query",
            "description": "Set this parameter to true, to include the groups, to which the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Set this parameter to enable paging starting at record <skip>.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "Set this parameter to get at most <top> records. If set, maxed at 500.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Set this parameter to filter the result based on the name of the rolecollections.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "readOnly",
            "in": "query",
            "description": "Set this parameter to filter the result based on the readOnly property of the rolecollections.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returned role collections of the current subaccount.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons, no role collections could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Creates a role collection.",
        "description": "Creates a role collection. You must include a role name at a minimum. The description is created as null if you do not include one. You can include role references as defined by the role name, the application ID, and role template name. To assign group members use the /Groups endpoint. Groups are mapped to role collections in the Authorization and Trust Management service.",
        "operationId": "createRoleCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "422": {
            "description": "Unprocessable Content - The maximal number of custom role collections per subaccount was exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found - Possible reasons, no role collections could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "200": {
            "description": "OK - The API created the role collection and returned information about the role collection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "201": {
            "description": "Created - The API created the role collection and returned information about the role collection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. For example, the API does not support setting isReadOnly to true.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections/bulk": {
      "post": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Bulk creation of role collections.",
        "description": "Bulk create of role collections specified by the name of the role collection.",
        "operationId": "createRoleCollections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCollectionsBulkDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not found - Possible reasons, no role collections could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created - The API created the role collections and returned information about the role collections.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. For example, the API does not support setting isReadOnly to true.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Bulk delete of role collections.",
        "description": "Bulk delete of role collections specified by the name of the role collection.",
        "operationId": "deleteRoleCollections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCollectionNamesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not found - Possible reasons, no role collections could be found that match your request."
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource."
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. For example, the API does not support setting isReadOnly to true."
          },
          "204": {
            "description": "Deleted - The API deleted the role collections."
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused."
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/identity-providers/{origin}/attributes": {
      "post": {
        "tags": [
          "idp-role-collection"
        ],
        "summary": "Add a Idp attribute with value and operator to a role collection",
        "description": "Add an attribute with value and operation to current IdP and application role collection.",
        "operationId": "addIdpAttributeToRoleCollection",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "description": "Origin Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderMapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/roles": {
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Creates a role for an application.",
        "description": "Create a role for an application based on a role template. You must define the role name and description as well as identify the application and the role template name that you want to include in the role. The role inherits the scopes of the role template.",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "422": {
            "description": "Unprocessable Content. The maximal number of custom roles per subaccount was exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "201": {
            "description": "The API created the role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Your request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. A role with the same name based on the same template already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/Users": {
      "get": {
        "tags": [
          "scim-user-endpoints"
        ],
        "operationId": "findUsers",
        "parameters": [
          {
            "name": "attributes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "id pr"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ascending"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scim-user-endpoints"
        ],
        "operationId": "createUser_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                }
              }
            }
          }
        }
      }
    },
    "/Groups": {
      "get": {
        "tags": [
          "scim-group-endpoints"
        ],
        "operationId": "listGroups",
        "parameters": [
          {
            "name": "attributes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "id pr"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "displayName"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ascending"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scim-group-endpoints"
        ],
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScimGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ScimGroup"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/globalaccount/{globalAccountId}/platform-identity-providers/{originKey}": {
      "delete": {
        "tags": [
          "platform-identity-providers"
        ],
        "summary": "Deletes a GA Trust for given origin.",
        "description": "Deletes a trust for a platform identity provider.",
        "operationId": "deletePlatformIdentityProviderTrust",
        "parameters": [
          {
            "name": "globalAccountId",
            "in": "path",
            "description": "Global account ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "originKey",
            "in": "path",
            "description": "Origin of the trust to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trust deleted from GA",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp": [
              "xs_idp.write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "platform-identity-providers"
        ],
        "summary": "Updates a GA Trust for given origin.",
        "description": "Updates a trust for a platform identity provider.",
        "operationId": "updatePlatformIdentityProviderTrust",
        "parameters": [
          {
            "name": "globalAccountId",
            "in": "path",
            "description": "Global account ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "originKey",
            "in": "path",
            "description": "Origin of the trust to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshTrust",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPlatformIdentityProviderTrust"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Trust updated from GA",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp": [
              "xs_idp.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/securitySettings": {
      "get": {
        "tags": [
          "tenant"
        ],
        "summary": "Reads settings of a tenant",
        "operationId": "readSettings",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "ID of tenant that should be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSettingsResp"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSettingsResp"
                }
              }
            }
          }
        },
        "security": [
          {
            "tenant_auth": [
              "xs_tenant.read",
              "xs_authorization.read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "tenant"
        ],
        "description": "Updates settings of a tenant",
        "operationId": "updateSettings",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "ID of tenant that should be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantSettingsReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "JSON malformed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSettingsResp"
                }
              }
            }
          },
          "200": {
            "description": "Updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSettingsResp"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSettingsResp"
                }
              }
            }
          }
        },
        "security": [
          {
            "tenant_auth": [
              "xs_authorization.write",
              "xs_tenant.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/user/origin": {
      "get": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Get origins of users",
        "description": "Returns all unique origin values of all users in the account.",
        "operationId": "getOrigins",
        "responses": {
          "200": {
            "description": "OK - The API returns the origin names.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/user/origin/{origin}/name": {
      "get": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Get usernames",
        "description": "Returns all usernames in the account, sorted alphabetically",
        "operationId": "getUserNames",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "details",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returns the user names.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin is not allowed or the filter is invalid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "NotFound - Could not find the following resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/user/origin/{origin}/name/{username}": {
      "get": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Get a specifiy user",
        "description": "Returns the user record of the specified username and origin",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "origin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returns the user record.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin is not allowed or the parameters are invalid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The user cannot be found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/XSUser"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/user/id/{id}": {
      "get": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Read user by ID",
        "description": "Retrieves a user with the specified ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returns the user.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The user cannot be found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Delete a user",
        "description": "Deletes an existing user with the specified user ID",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API deletes the user.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The user cannot be found.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/tenantLoginInfo/{subdomain}": {
      "get": {
        "tags": [
          "zone-trust-information"
        ],
        "summary": "Get Zone information for tenant",
        "operationId": "getZoneInformationBySubdomain",
        "parameters": [
          {
            "name": "subdomain",
            "in": "path",
            "description": "Subdomain of the tenant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iasClient",
            "in": "query",
            "description": "ClientId of the application created by the identity broker",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSTenantV2ZoneInformation"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/neo/platformidentityproviders": {
      "get": {
        "tags": [
          "customidp"
        ],
        "summary": "Returns the feature flag value for a neo user for a IAS tenant",
        "description": "Returns the feature flag value for a neo user for a IAS tenant",
        "operationId": "getCustomIdPFeatureFlagForNeoUser",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/identity-providers/ias": {
      "get": {
        "tags": [
          "identity-providers"
        ],
        "summary": "Returns a list of valid IAS tenants.",
        "description": "For the current XSUAA tenant, returns those IAS tenants for which no SAML trust has been set up yet.",
        "operationId": "retrieveIasTenants",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "additionalInfo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "*/*": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - A possible reason is that there is no identity provider that matches the id of your request.",
            "content": {
              "*/*": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK - The API returned the IAS tenant list.",
            "content": {
              "*/*": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "*/*": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_idp.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/identity-providers/ias/{tenantURL}": {
      "get": {
        "tags": [
          "identity-providers"
        ],
        "summary": "Returns a specific IAS tenant.",
        "description": "Returns a specific IAS tenants for the current XSUAA tenant.",
        "operationId": "retrieveSpecificIasTenant",
        "parameters": [
          {
            "name": "tenantURL",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "additionalInfo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - A possible reason is that there is no identity provider that matches the id of your request.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK - The API returned the IAS tenant list.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_idp.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/identity-providers/ias/status": {
      "get": {
        "tags": [
          "identity-providers"
        ],
        "summary": "Returns the status of IAS registry.",
        "description": "Returns the current status of the IAS registry component. This includes a json payload containing errors or a health statement.",
        "operationId": "getRegistryStatus",
        "responses": {
          "404": {
            "description": "Not found - A possible reason is that there is no identity provider that matches the id of your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "OK - The API returns the state of the registry.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/identity-providers/btpcli/identity-providers": {
      "get": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProvidersForBtpCliDeprecated",
        "parameters": [
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/sap/rest/globalaccount/{globalAccountId}/platform-identity-providers/status": {
      "get": {
        "tags": [
          "customidp"
        ],
        "summary": "Return whether multiple custom platform IdP trusts are allowed",
        "description": "Return whether multiple custom platform IdP trusts are allowed",
        "operationId": "areMoreTrustsAllowed",
        "parameters": [
          {
            "name": "globalAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIdpCockpitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp": [
              "xs_idp.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/zoneinfo/{subdomain}": {
      "get": {
        "tags": [
          "zone-trust-information"
        ],
        "summary": "Get Zone information for tenant",
        "operationId": "getZoneInformationBySubdomain_1",
        "parameters": [
          {
            "name": "subdomain",
            "in": "path",
            "description": "Subdomain of the tenant",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSTenantV2ZoneInformation"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/authorization/v2/users/{userId}/rolecollections": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Get role collections of User",
        "description": "all role collections for a user",
        "operationId": "getRoleCollectionsForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollectionListDto"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/authorization/v2/securitySettings/public": {
      "get": {
        "tags": [
          "tenant"
        ],
        "summary": "Reads public settings of a tenant",
        "operationId": "readPublicSettings",
        "parameters": [
          {
            "name": "subdomain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, either subdomain or tenant ID (but not both) must be provided",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/authorization/v2/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Returns the roles of all service instances.",
        "description": "Returns all application roles for all service instances which are registered at UAA as OAuth2 client, sorted alphabetically by their name and roleTemplateAppId. The roles that are returned are limited to the subaccount credentials that are used for this request.",
        "operationId": "getRoles",
        "responses": {
          "200": {
            "description": "The API returned the roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. Possible reasons, no roles could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections/roles/{appId}/{roleTemplateName}/{roleName}": {
      "get": {
        "tags": [
          "rolecollections",
          "application"
        ],
        "summary": "Get RoleCollections containing a role identified by appId, roleTemplateName and role name",
        "description": "Retrieve all RoleCollections containing a role. The role is identified by appId, roleTemplateName and role name.",
        "operationId": "getRoleCollectionsByAppIdTemplateNameAndRoleName",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleTemplateName",
            "in": "path",
            "description": "Name of the Role Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "description": "Name of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read",
              "xs_authorization.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections/pages/{pageId}": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Returns a page of role collections.",
        "description": "Returns the specified page of role collection search result. The role collections are the result of a previous paged GET request for role collections of the current subaccount.",
        "operationId": "getRoleCollectionsByPaging",
        "parameters": [
          {
            "name": "showRoles",
            "in": "query",
            "description": "Set this parameter to true, to include the roles, that are associated with the role collections.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showUsers",
            "in": "query",
            "description": "Set this parameter to true, to include the users, to whom the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showGroups",
            "in": "query",
            "description": "Set this parameter to true, to include the groups, to which the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returned a page of role collection information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons, no role collections could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections/pages": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Returns a page of role collections.",
        "description": "Returns the specified page of role collection search result. The role collections are the result of a previous paged GET request for role collections of the current subaccount.",
        "operationId": "getRoleCollectionsByPaging_1",
        "parameters": [
          {
            "name": "showRoles",
            "in": "query",
            "description": "Set this parameter to true, to include the roles, that are associated with the role collections.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showUsers",
            "in": "query",
            "description": "Set this parameter to true, to include the users, to whom the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showGroups",
            "in": "query",
            "description": "Set this parameter to true, to include the groups, to which the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returned a page of role collection information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons, no role collections could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/rolecollections/pages/": {
      "get": {
        "tags": [
          "rolecollections"
        ],
        "summary": "Returns a page of role collections.",
        "description": "Returns the specified page of role collection search result. The role collections are the result of a previous paged GET request for role collections of the current subaccount.",
        "operationId": "getRoleCollectionsByPaging_2",
        "parameters": [
          {
            "name": "showRoles",
            "in": "query",
            "description": "Set this parameter to true, to include the roles, that are associated with the role collections.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showUsers",
            "in": "query",
            "description": "Set this parameter to true, to include the users, to whom the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showGroups",
            "in": "query",
            "description": "Set this parameter to true, to include the groups, to which the role collections are assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API returned a page of role collection information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Possible reasons, no role collections could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/ownapp": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Returns information about the service instance used to execute this API access.",
        "description": "Returns information about the service instance which is associated with the client credentials you submitted with this REST call.",
        "operationId": "getOwnApp",
        "responses": {
          "200": {
            "description": "The API returned the service instance associated with your client credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No service instance was found matching your client credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/ownapp/usage": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Returns usage information for the service instance which is used to execute API access.",
        "description": "Returns the number of subscribers for the service instance which is associated with the client credentials you submitted with this REST call.",
        "operationId": "getAppByToken",
        "parameters": [
          {
            "name": "tenant",
            "in": "query",
            "description": "Tenant ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneid",
            "in": "query",
            "description": "Zone ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listSubscriptions",
            "in": "query",
            "description": "Include subscriptions",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "listCloneSubscriptions",
            "in": "query",
            "description": "Include clone subscriptions",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. Possible reasons, apps could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "200": {
            "description": "The API returned the usage information for the service instance.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/identity-providers/{origin}/rolecollections/{roleCollectionName}": {
      "get": {
        "tags": [
          "idp-role-collection"
        ],
        "summary": "Get attributes and role collections from IdP",
        "description": "Read all attributes for current IdP and application role collection.",
        "operationId": "getIdpAttributeValuesFromRoleCollection",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "description": "IDP-OriginKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/{attributeName}/{attributeValue}": {
      "get": {
        "tags": [
          "idp-role-collection"
        ],
        "summary": "Read role collections from current attribute value and IdP",
        "description": "List of application role collections which are assigned to the current idP and the current attribute/value",
        "operationId": "getRoleCollectionByAttributeValue",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "description": "IDP-OriginKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "attribute name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "path",
            "description": "IDP attribute value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/{attributeName}/rolecollections/{roleCollectionName}": {
      "get": {
        "tags": [
          "idp-role-collection"
        ],
        "summary": "Read all attributes for current IdP and application role collection",
        "description": "ist of Idp attribute value of a role collection for current attribute name",
        "operationId": "getIdpAttributeValuesFromRoleCollectionByAttribute",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "description": "IDP-OriginKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "Name of the attribute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "403": {
            "description": "No authorization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/rolecollections": {
      "get": {
        "tags": [
          "idp-role-collection"
        ],
        "summary": "Get attributes and role collection of IdP",
        "description": "Read all attributes for current IdP and application role collection.",
        "operationId": "getIdpAttributeValues",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "description": "IDP-OriginKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleCollectionAttribute"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Returns registered service instances of the current subaccount.",
        "description": "Returns all service instances of the current subaccount which are registered at the Authorization and Trust Management service as OAuth 2.0 clients. The system provides information about the XSUAA application and its OAuth client.",
        "operationId": "getApps",
        "parameters": [
          {
            "name": "onlyWithClientId",
            "in": "query",
            "description": "OAuth client filter: If set to false only apps are returned that are not associated with an OAuth client. The filter is of type boolean.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyForOrgId",
            "in": "query",
            "description": "CF organizations filter: Only apps that reside in the specified Cloud Foundry org are returned. The CF org is specified by its GUID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyForSubaccountId",
            "in": "query",
            "description": "Subaccount filter: Only apps that reside in the specified subaccount are returned. The subaccount is specified by its id.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyForXsappname",
            "in": "query",
            "description": "XSAppName filter: Only apps with the specified name are returned. The name is the xsappname of the application.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Your request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          },
          "200": {
            "description": "The API returned the list of registered service instances.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No service instances could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{id}": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Returns information about an XSUAA application instance.",
        "description": "Returns information about an XSUAA application instance specified by the app ID or service instance ID. The XSUAA application instance paired with an OAuth client defines a service instance of the Authorization and Trust Management service.",
        "operationId": "getAppById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application or service instance. To use service instance ID, set the parameter to true.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isServiceInstanceId",
            "in": "query",
            "description": "If the parameter is set to true, the ID set in the path is interpreted as the service instance ID and not the XSUAA application instance ID.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hideDetails",
            "in": "query",
            "description": "The ID of the application or service instance. To use service instance ID, set the isServiceInstanceId parameter to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "400": {
            "description": "Your request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No XSUAA application instance or service instance could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "200": {
            "description": "The API returned the information about the XSUAA application instance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/scopes": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Returns the scopes of an application.",
        "description": "Returns all scopes of an application protected by a service instance of the Authorization and Trust Management service.",
        "operationId": "listScopes",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Scope"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No applications could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Scope"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Scope"
                  }
                }
              }
            }
          },
          "200": {
            "description": "The API returned the scopes of the specified application.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Scope"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/scopes/{scopeName}": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Returns the scope of an application.",
        "description": "Returns information about a specific scope of a specific application.",
        "operationId": "getScope",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeName",
            "in": "path",
            "description": "Name of the scope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scope"
                }
              }
            }
          },
          "200": {
            "description": "The API returned the scope of the specified application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scope"
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scope"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No service instance or scope could be found that match your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scope"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/roletemplates": {
      "get": {
        "tags": [
          "roletemplates"
        ],
        "summary": "Returns role templates for an application.",
        "description": "Returns information about all role templates for an application that is specified by the application ID.",
        "operationId": "getRoleTemplateByAppName",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "ID of application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The API returned the list of role templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Your request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No service instance could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/roletemplates/{templateName}": {
      "get": {
        "tags": [
          "roletemplates"
        ],
        "summary": "Returns a role template of an application.",
        "description": "Returns information about a role template of an application, which is specified by the application ID and the role template name.",
        "operationId": "getRoleTemplateByName",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of the template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTemplate"
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No application or role template could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTemplate"
                }
              }
            }
          },
          "200": {
            "description": "The API returned the role template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Your request was poorly formed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTemplate"
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Returns the roles of an application",
        "description": "Returns all roles of an application specified by the application ID.",
        "operationId": "getRolesByAppId",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "ID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No application could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "200": {
            "description": "The API returned the list of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/authorizationData": {
      "get": {
        "tags": [
          "ams"
        ],
        "summary": "Get authorization data ",
        "description": "Retrieve authorization data for a given appId.",
        "operationId": "getAuthorizationData",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDataWrapper"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDataWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDataWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDataWrapper"
                }
              }
            }
          },
          "403": {
            "description": "No Authorization",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDataWrapper"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/{appId}/authorities": {
      "get": {
        "tags": [
          "application"
        ],
        "summary": "Returns a list of authorities granted to an application.",
        "description": "Returns a list of authorities that have been granted to an application. <ul><li>The granting application is identified by the <var>grantedByAppGuid</var> or <var>grantedByAppId</var> parameter. If no granting application is specified the list will be empty.</li><li>The request has to be authenticated with a JWT obtained via the client credentials grant from the granted application. The JWT has to include the <var>uaa.resource</var> scope.</li></ul>",
        "operationId": "getGrantedAuthorities",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantedByAppGuid",
            "in": "query",
            "description": "appUid of authority",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantedByAppId",
            "in": "query",
            "description": "AppID of authority",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No application could be found that matches your request.",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "200": {
            "description": "The API returns the list of authorities granted to the specified application.",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "uaa.resource": [
              "uaa.resource"
            ]
          }
        ]
      }
    },
    "/sap/rest/authorization/v2/apps/roletemplates": {
      "get": {
        "tags": [
          "roletemplates"
        ],
        "summary": "Returns all role templates.",
        "description": "Returns information about all role templates of applications protected by the service instance of the Authorization and Trust Management service. description: Returns all role templates",
        "operationId": "getRoleTemplates",
        "parameters": [
          {
            "name": "showRoles",
            "in": "query",
            "description": "If the parameter is set, the API also returns information about the roles associated with the role templates.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Access denied. You do not have the authorizations required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found. Possible reasons: No role templates were found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          },
          "200": {
            "description": "The API returned the role template information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied. Your authentication credentials have been refused.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/user/origin/{origin}/name/{userName}": {
      "delete": {
        "tags": [
          "usercontroller"
        ],
        "summary": "Delete a user by username and origin",
        "description": "Deletes an existing user with the specified username and origin",
        "operationId": "deleteUserByName",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The API deletes the user.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found - The user cannot be found.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - You do not have the authorizations required to access the resource.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was poorly formed. The specified origin is invalid.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Your authentication credentials have been refused.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/platform-identity-providers-global/{originKey}/globalaccountids/{globalAccountId}": {
      "delete": {
        "tags": [
          "platform-identity-providers-global"
        ],
        "summary": "Deletes a globalAccountId.",
        "description": "Deletes a globalAccountId to a custom platform IdP.",
        "operationId": "deletePlatformIdentityProviderGlobalAccountId",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "globalAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "403": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Not Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XSPlatformIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_idp_global": [
              "xs_idp_global.write"
            ]
          }
        ]
      }
    },
    "/sap/rest/identity-providers/originKey/{originKey}": {
      "delete": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "deleteIdentityProviderUsingOriginKey",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderAbstractIdentityProviderDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/sap/rest/authorization/v2/identity-providers/{origin}/attributes/{attributeName}/{operator}/{attributeValue}/rolecollections/{roleCollectionName}": {
      "delete": {
        "tags": [
          "idp-role-collection"
        ],
        "summary": "delete attribute with value from a role collection",
        "description": "Delete an attribute value for the current attribute within current IdP and application role collection",
        "operationId": "deleteIdpAttributeToRoleCollection",
        "parameters": [
          {
            "name": "origin",
            "in": "path",
            "description": "IDP-OriginKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "Name of the Idp attribute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operator",
            "in": "path",
            "description": "Operator",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "path",
            "description": "Value of the Idp attribute",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleCollectionName",
            "in": "path",
            "description": "Name of the role collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "No Autorization",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "xs_auth": [
              "xs_authorization.read"
            ]
          }
        ]
      }
    },
    "/sap/rest/identity-providers/btpcli/originKey/{originKey}": {
      "get": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProviderByOriginKeyDeprecated_5",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProviderByOriginKeyDeprecated_1",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProviderByOriginKeyDeprecated_4",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProviderByOriginKeyDeprecated_3",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "options": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProviderByOriginKeyDeprecated_2",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "head": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProviderByOriginKeyDeprecated",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "identity-providers"
        ],
        "operationId": "retrieveIdentityProviderByOriginKeyDeprecated_6",
        "parameters": [
          {
            "name": "originKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawConfig",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BtpCliXsIdentityProvider"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    }
  },
  "components": {
    "schemas": {
      "XSUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "origin": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "passwordLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "phoneNumber": {
            "type": "string"
          },
          "lastLogonTime": {
            "type": "integer",
            "format": "int64"
          },
          "previousLogonTime": {
            "type": "integer",
            "format": "int64"
          },
          "zoneId": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "legacyVerificationBehavior": {
            "type": "boolean"
          },
          "passwordChangeRequired": {
            "type": "boolean"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          },
          "roleCollections": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "XSPlatformIdentityProvider": {
        "type": "object",
        "properties": {
          "originKey": {
            "type": "string"
          },
          "iasTenantUrl": {
            "type": "string"
          },
          "iasAppId": {
            "type": "string"
          },
          "iasAdminUrl": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "createdByUsername": {
            "type": "string"
          },
          "createdByOriginKey": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedByUsername": {
            "type": "string"
          },
          "modifiedByOriginKey": {
            "type": "string"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "distribution": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "registration": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "relyingPartyId": {
            "type": "string"
          },
          "relyingPartySecret": {
            "type": "string"
          },
          "originXsuaa": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "iasWellKnownMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "neoAuthnWithOidc": {
            "type": "boolean"
          },
          "domain": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "aliasZid": {
            "type": "string"
          },
          "iasTenantUrlWithoutProtocol": {
            "type": "string"
          }
        }
      },
      "AbstractIdentityProviderDefinition": {
        "type": "object",
        "properties": {
          "emailDomain": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalConfiguration": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "providerDescription": {
            "type": "string"
          }
        }
      },
      "XSIdentityProvider": {
        "required": [
          "name",
          "originKey",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "originKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/AbstractIdentityProviderDefinition"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          },
          "identityZoneId": {
            "type": "string"
          },
          "last_modified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IdentityProviderAbstractIdentityProviderDefinition": {
        "required": [
          "name",
          "originKey",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "originKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/AbstractIdentityProviderDefinition"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          },
          "identityZoneId": {
            "type": "string"
          },
          "last_modified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RoleCollectionDescription": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "description": "Json of the role collection containing the description"
      },
      "RoleReference": {
        "type": "object",
        "properties": {
          "roleTemplateAppId": {
            "type": "string"
          },
          "roleTemplateName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RoleAttribute": {
        "required": [
          "attributeName",
          "attributeValueOrigin",
          "attributeValues"
        ],
        "type": "object",
        "properties": {
          "attributeName": {
            "type": "string"
          },
          "attributeValueOrigin": {
            "type": "string"
          },
          "attributeValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valueRequired": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RoleUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "attributeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAttribute"
            }
          }
        },
        "description": "JSON containing the role"
      },
      "Role": {
        "required": [
          "attributeList",
          "description",
          "name",
          "roleTemplateAppId",
          "roleTemplateName",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "roleTemplateName": {
            "type": "string"
          },
          "roleTemplateAppId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "attributeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAttribute"
            }
          },
          "description": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scope"
            }
          },
          "roleCollectionReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleCollectionReference"
            }
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "appName": {
            "type": "string"
          },
          "appDescription": {
            "type": "string"
          }
        },
        "description": "JSON containing the role"
      },
      "RoleCollectionReference": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Scope": {
        "required": [
          "custom-grant-as-authority-to-apps",
          "custom-granted-apps",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "custom-granted-apps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "granted-apps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "grant-as-authority-to-apps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom-grant-as-authority-to-apps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddPlatformIdentityProviderTrust": {
        "type": "object",
        "properties": {
          "fromOriginKey": {
            "type": "string"
          },
          "fromIasTenantUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "aliasZid": {
            "type": "string"
          }
        }
      },
      "RoleCollectionListDto": {
        "type": "object",
        "properties": {
          "roleCollections": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleCollectionsBySamlAssignment": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RoleCollection": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "roleReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleReference"
            }
          },
          "userReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserReference"
            }
          },
          "groupReferences": {
            "type": "array",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/RoleCollectionAttribute"
            }
          },
          "samlAttributeAssignment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleCollectionAttribute"
            }
          },
          "isReadOnly": {
            "type": "boolean"
          }
        },
        "description": "Json of the role collections"
      },
      "RoleCollectionAttribute": {
        "type": "object",
        "properties": {
          "roleCollectionName": {
            "type": "string"
          },
          "roleCollectionIdentityZone": {
            "type": "string"
          },
          "samlAttrName": {
            "type": "string"
          },
          "attributeName": {
            "type": "string"
          },
          "samlAttributeValue": {
            "type": "string"
          },
          "attributeValue": {
            "type": "string"
          },
          "comparisonOperator": {
            "type": "string"
          },
          "samlEntityId": {
            "type": "string"
          },
          "idpId": {
            "type": "string"
          },
          "idpDisplayName": {
            "type": "string"
          }
        }
      },
      "UserReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          }
        }
      },
      "RoleCollectionBasicDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RoleCollectionsBulkDto": {
        "type": "object",
        "properties": {
          "roleCollections": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleCollectionBasicDto"
            }
          }
        },
        "description": "The role collection names to be created"
      },
      "IdentityProviderMapping": {
        "type": "object",
        "properties": {
          "roleCollectionName": {
            "type": "string"
          },
          "attributeName": {
            "type": "string"
          },
          "attributeValue": {
            "type": "string"
          },
          "operator": {
            "type": "string"
          }
        },
        "description": "Attribute added to role collection"
      },
      "Approval": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "DENIED"
            ]
          },
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Email": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DIRECT",
              "INDIRECT"
            ]
          }
        }
      },
      "Name": {
        "type": "object",
        "properties": {
          "formatted": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "writeOnly": true
          },
          "honorificPrefix": {
            "type": "string",
            "writeOnly": true
          },
          "honorificSuffix": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ScimMeta": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScimUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          },
          "userName": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "groups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "approvals": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Approval"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "displayName": {
            "type": "string"
          },
          "nickName": {
            "type": "string",
            "writeOnly": true
          },
          "profileUrl": {
            "type": "string",
            "writeOnly": true
          },
          "title": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "preferredLanguage": {
            "type": "string",
            "writeOnly": true
          },
          "locale": {
            "type": "string"
          },
          "timezone": {
            "type": "string",
            "writeOnly": true
          },
          "active": {
            "type": "boolean"
          },
          "verified": {
            "type": "boolean"
          },
          "origin": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "passwordLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "previousLogonTime": {
            "type": "integer",
            "format": "int64"
          },
          "lastLogonTime": {
            "type": "integer",
            "format": "int64"
          },
          "password": {
            "type": "string"
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScimCore": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScimGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          },
          "displayName": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimGroupMember"
            }
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScimGroupMember": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          "entity": {
            "$ref": "#/components/schemas/ScimCore"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "LinksSettings": {
        "type": "object",
        "properties": {
          "homeRedirect": {
            "type": "string"
          }
        }
      },
      "SamlConfigSettingsReq": {
        "type": "object",
        "properties": {
          "disableInResponseToCheck": {
            "type": "boolean"
          },
          "changeMode": {
            "type": "string",
            "enum": [
              "ADD",
              "DELETE",
              "UPDATE",
              "FORCE_UPDATE",
              "FORCE_DELETE",
              "UNKNOWN"
            ]
          },
          "keyId": {
            "type": "string"
          },
          "key": {
            "$ref": "#/components/schemas/SamlKey"
          }
        }
      },
      "SamlKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "passphrase": {
            "type": "string"
          },
          "certificate": {
            "type": "string"
          }
        }
      },
      "TenantSettingsReq": {
        "type": "object",
        "properties": {
          "iframeDomains": {
            "type": "string"
          },
          "tokenPolicySettings": {
            "$ref": "#/components/schemas/TokenPolicySettingsReq"
          },
          "samlConfigSettings": {
            "$ref": "#/components/schemas/SamlConfigSettingsReq"
          },
          "links": {
            "$ref": "#/components/schemas/LinksSettings"
          },
          "defaultIdp": {
            "type": "string"
          },
          "corsDefaultOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "corsXhrOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "treatUsersWithSameEmailAsSameUser": {
            "type": "boolean"
          },
          "useIdpUserNameInTokens": {
            "type": "boolean"
          },
          "customEmailDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cmkEnabled": {
            "type": "string"
          },
          "partitionedCookies": {
            "type": "boolean"
          }
        },
        "description": "Tenantsettings to be used for update"
      },
      "TokenPolicySettingsReq": {
        "type": "object",
        "properties": {
          "accessTokenValidity": {
            "type": "integer",
            "format": "int32"
          },
          "refreshTokenValidity": {
            "type": "integer",
            "format": "int32"
          },
          "refreshTokenUnique": {
            "type": "boolean"
          },
          "changeMode": {
            "type": "string",
            "enum": [
              "ADD",
              "DELETE",
              "UPDATE",
              "FORCE_UPDATE",
              "FORCE_DELETE",
              "UNKNOWN"
            ]
          },
          "keyId": {
            "type": "string"
          }
        }
      },
      "KeysResp": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string"
          },
          "fipsCompliant": {
            "type": "boolean"
          }
        }
      },
      "SamlConfigSettingsResp": {
        "type": "object",
        "properties": {
          "disableInResponseToCheck": {
            "type": "boolean"
          },
          "entityID": {
            "type": "string"
          },
          "activeKeyId": {
            "type": "string"
          },
          "keys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SamlKey"
            }
          }
        }
      },
      "TenantCredentialTypeInfo": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "serviceInstanceId": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "credentialType": {
            "type": "string"
          },
          "bindingId": {
            "type": "string"
          }
        }
      },
      "TenantSettingsResp": {
        "type": "object",
        "properties": {
          "iframeDomains": {
            "type": "string"
          },
          "tokenPolicySettings": {
            "$ref": "#/components/schemas/TokenPolicySettingsResp"
          },
          "samlConfigSettings": {
            "$ref": "#/components/schemas/SamlConfigSettingsResp"
          },
          "links": {
            "$ref": "#/components/schemas/LinksSettings"
          },
          "defaultIdp": {
            "type": "string"
          },
          "corsDefaultOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "corsXhrOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "credentialTypeInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantCredentialTypeInfo"
            }
          },
          "treatUsersWithSameEmailAsSameUser": {
            "type": "boolean"
          },
          "useIdpUserNameInTokens": {
            "type": "boolean"
          },
          "customEmailDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cmkEnabled": {
            "type": "string"
          },
          "partitionedCookies": {
            "type": "boolean"
          }
        }
      },
      "TokenPolicySettingsResp": {
        "type": "object",
        "properties": {
          "accessTokenValidity": {
            "type": "integer",
            "format": "int32"
          },
          "refreshTokenValidity": {
            "type": "integer",
            "format": "int32"
          },
          "refreshTokenUnique": {
            "type": "boolean"
          },
          "activeKeyId": {
            "type": "string"
          },
          "keyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/KeysResp"
            }
          }
        }
      },
      "XSTenantV2ZoneInformation": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "NOTRUST",
              "ERROR"
            ]
          },
          "zoneId": {
            "type": "string"
          },
          "iasTenantUri": {
            "type": "string"
          },
          "iasTenantBrowserUri": {
            "type": "string"
          },
          "authentication": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "end_session_endpoint": {
            "type": "string"
          },
          "oidc_metadata": {
            "type": "string"
          },
          "app_tid": {
            "type": "string"
          },
          "error_details": {
            "type": "string"
          },
          "partitionedCookies": {
            "type": "boolean"
          }
        }
      },
      "XSIdentityProviderAbstractIdentityProviderDefinition": {
        "required": [
          "name",
          "originKey",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "originKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/AbstractIdentityProviderDefinition"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          },
          "identityZoneId": {
            "type": "string"
          },
          "last_modified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BtpCliXsIdentityProvider": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "originKey": {
            "type": "string"
          },
          "typeOfTrust": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "identityProvider": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "linkTextForUserLogon": {
            "type": "string"
          },
          "availableForUserLogon": {
            "type": "string"
          },
          "createShadowUsersDuringLogon": {
            "type": "string"
          },
          "sapBtpCli": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          }
        }
      },
      "CustomIdpCockpitResponse": {
        "type": "object",
        "properties": {
          "moreTrustsAllowed": {
            "type": "boolean"
          }
        }
      },
      "GrantedAuthority": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "deprecated": true
          },
          "cloneServiceInstanceId": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "appToken": {
            "type": "string"
          },
          "subaccountId": {
            "type": "string"
          },
          "grantType": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantedAuthority"
            }
          },
          "email": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          },
          "logonName": {
            "type": "string"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "origin": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "accountNonExpired": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "credentialsNonExpired": {
            "type": "boolean"
          },
          "accountNonLocked": {
            "type": "boolean"
          }
        }
      },
      "App": {
        "type": "object",
        "properties": {
          "appid": {
            "type": "string"
          },
          "serviceinstanceid": {
            "type": "string"
          },
          "planId": {
            "type": "string"
          },
          "planName": {
            "type": "string"
          },
          "orgId": {
            "type": "string"
          },
          "spaceId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "masterAppId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "xsappname": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scope"
            }
          },
          "authorities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "foreign-scope-references": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppAttribute"
            }
          },
          "role-templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleTemplate"
            }
          },
          "oauth2-configuration": {
            "$ref": "#/components/schemas/OAuth2Configuration"
          },
          "tenant-mode": {
            "type": "string"
          }
        }
      },
      "AppAttribute": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "valueType": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valueRequired": {
            "type": "boolean"
          }
        }
      },
      "AttributeReference": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "valueRequired": {
            "type": "boolean"
          },
          "default-values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valueType": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "OAuth2Configuration": {
        "type": "object",
        "properties": {
          "token-validity": {
            "type": "integer",
            "format": "int32"
          },
          "refresh-token-validity": {
            "type": "integer",
            "format": "int32"
          },
          "autoapprove": {
            "type": "boolean"
          },
          "grant-types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "system-attributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedproviders": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "redirect-uris": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "credential-types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RoleTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default-role-name": {
            "type": "string"
          },
          "scope-references": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attribute-references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeReference"
            }
          },
          "role-references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "appId": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "appDescription": {
            "type": "string"
          }
        }
      },
      "AuthData": {
        "type": "object",
        "properties": {
          "identityZone": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "roleCollections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleCollection"
            }
          }
        }
      },
      "AuthDataWrapper": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "authorizationData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthData"
            }
          }
        }
      },
      "SearchResultsObject": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalResults": {
            "type": "integer",
            "format": "int32"
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RoleCollectionNamesDto": {
        "type": "object",
        "properties": {
          "roleCollections": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The role collections to be deleted"
      }
    },
    "securitySchemes": {
      "xs_auth": {
        "type": "oauth2",
        "description": "This API uses OAuth2 with the client-credentials flow.",
        "name": "xs_auth",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "/token",
            "scopes": {
              "xs_authorization.read": "for read operations",
              "xs_authorization.write": "for create and update operations"
            }
          }
        }
      },
      "xs_sub": {
        "type": "oauth2",
        "description": "This API uses OAuth2 with the client-credentials flow.",
        "name": "xs_sub",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "/token",
            "scopes": {
              "xs_subscription.read": "for read operations",
              "xs_subscription.write": "for create and update operations"
            }
          }
        }
      },
      "xs_tenant": {
        "type": "oauth2",
        "description": "This API uses OAuth2 with the client-credentials flow.",
        "name": "xs_tenant",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "/token",
            "scopes": {
              "xs_tenant.read": "for read operations",
              "xs_tenant.write": "for create and update operations"
            }
          }
        }
      },
      "xs_idp": {
        "type": "oauth2",
        "description": "This API uses OAuth2 with the client-credentials flow.",
        "name": "xs_idp",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "/token",
            "scopes": {
              "xs_idp.read": "for read operations",
              "xs_idp.write": "for modifying operations"
            }
          }
        }
      },
      "xs_idp_global": {
        "type": "oauth2",
        "description": "This API uses OAuth2 with the client-credentials flow.",
        "name": "xs_idp_global",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "/token",
            "scopes": {
              "xs_idp_global.read": "for read operations",
              "xs_idp_global.write": "for modifying operations"
            }
          }
        }
      },
      "uaa.resource": {
        "type": "oauth2",
        "description": "This API uses OAuth2 with the client-credentials flow.",
        "name": "uaa.resource",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "/token",
            "scopes": {
              "uaa.resource": "Identifies a JWT obtained via the client credentials grant."
            }
          }
        }
      }
    }
  }
}