/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceOfferingMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceOfferingMetadata{}

// ServiceOfferingMetadata struct for ServiceOfferingMetadata
type ServiceOfferingMetadata struct {
	// The name of the service offering for customer-facing UIs.
	DisplayName *string `json:"displayName,omitempty"`
	// The URL to the associated documentation.
	DocumentationUrl *string `json:"documentationUrl,omitempty"`
	// The URL to the associated image.
	ImageUrl *string `json:"imageUrl,omitempty"`
	// The description of the service offering.
	LongDescription *string `json:"longDescription,omitempty"`
	// The support URL for the service offering.
	SupportUrl *string `json:"supportUrl,omitempty"`
}

// NewServiceOfferingMetadata instantiates a new ServiceOfferingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceOfferingMetadata() *ServiceOfferingMetadata {
	this := ServiceOfferingMetadata{}
	return &this
}

// NewServiceOfferingMetadataWithDefaults instantiates a new ServiceOfferingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceOfferingMetadataWithDefaults() *ServiceOfferingMetadata {
	this := ServiceOfferingMetadata{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ServiceOfferingMetadata) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceOfferingMetadata) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ServiceOfferingMetadata) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ServiceOfferingMetadata) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *ServiceOfferingMetadata) GetDocumentationUrl() string {
	if o == nil || IsNil(o.DocumentationUrl) {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceOfferingMetadata) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentationUrl) {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *ServiceOfferingMetadata) HasDocumentationUrl() bool {
	if o != nil && !IsNil(o.DocumentationUrl) {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *ServiceOfferingMetadata) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *ServiceOfferingMetadata) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceOfferingMetadata) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ServiceOfferingMetadata) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *ServiceOfferingMetadata) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetLongDescription returns the LongDescription field value if set, zero value otherwise.
func (o *ServiceOfferingMetadata) GetLongDescription() string {
	if o == nil || IsNil(o.LongDescription) {
		var ret string
		return ret
	}
	return *o.LongDescription
}

// GetLongDescriptionOk returns a tuple with the LongDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceOfferingMetadata) GetLongDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.LongDescription) {
		return nil, false
	}
	return o.LongDescription, true
}

// HasLongDescription returns a boolean if a field has been set.
func (o *ServiceOfferingMetadata) HasLongDescription() bool {
	if o != nil && !IsNil(o.LongDescription) {
		return true
	}

	return false
}

// SetLongDescription gets a reference to the given string and assigns it to the LongDescription field.
func (o *ServiceOfferingMetadata) SetLongDescription(v string) {
	o.LongDescription = &v
}

// GetSupportUrl returns the SupportUrl field value if set, zero value otherwise.
func (o *ServiceOfferingMetadata) GetSupportUrl() string {
	if o == nil || IsNil(o.SupportUrl) {
		var ret string
		return ret
	}
	return *o.SupportUrl
}

// GetSupportUrlOk returns a tuple with the SupportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceOfferingMetadata) GetSupportUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SupportUrl) {
		return nil, false
	}
	return o.SupportUrl, true
}

// HasSupportUrl returns a boolean if a field has been set.
func (o *ServiceOfferingMetadata) HasSupportUrl() bool {
	if o != nil && !IsNil(o.SupportUrl) {
		return true
	}

	return false
}

// SetSupportUrl gets a reference to the given string and assigns it to the SupportUrl field.
func (o *ServiceOfferingMetadata) SetSupportUrl(v string) {
	o.SupportUrl = &v
}

func (o ServiceOfferingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceOfferingMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DocumentationUrl) {
		toSerialize["documentationUrl"] = o.DocumentationUrl
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	if !IsNil(o.LongDescription) {
		toSerialize["longDescription"] = o.LongDescription
	}
	if !IsNil(o.SupportUrl) {
		toSerialize["supportUrl"] = o.SupportUrl
	}
	return toSerialize, nil
}

type NullableServiceOfferingMetadata struct {
	value *ServiceOfferingMetadata
	isSet bool
}

func (v NullableServiceOfferingMetadata) Get() *ServiceOfferingMetadata {
	return v.value
}

func (v *NullableServiceOfferingMetadata) Set(val *ServiceOfferingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceOfferingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceOfferingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceOfferingMetadata(val *ServiceOfferingMetadata) *NullableServiceOfferingMetadata {
	return &NullableServiceOfferingMetadata{value: val, isSet: true}
}

func (v NullableServiceOfferingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceOfferingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


