/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OperationResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperationResponseObject{}

// OperationResponseObject struct for OperationResponseObject
type OperationResponseObject struct {
	// The correlation ID received from the request related to this operation.
	CorrelationId *string `json:"correlation_id,omitempty"`
	// The time the resource was created. <br/>In ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The time the resource is scheduled for deletion. <br/>In ISO 8601 format:</br> YYYY-MM-DDThh:mm:ssTZD
	DeletionScheduled *time.Time `json:"deletion_scheduled,omitempty"`
	// Details about the operation for customer-facing UI.
	Description *string `json:"description,omitempty"`
	// The list of the errors if the operation has failed.
	Errors []Error `json:"errors,omitempty"`
	// The ID of the operation.
	Id *string `json:"id,omitempty"`
	// Additional data associated with the resource entity. <br><br>Can be an empty object.
	Labels *map[string][]string `json:"labels,omitempty"`
	// The ID of the platform associated with the operation.
	PlatformId *string `json:"platform_id,omitempty"`
	// Whether the resource is ready.
	Ready *bool `json:"ready,omitempty"`
	// Whether the operation has reached a checkpoint and can be executed again.
	Reschedule *bool `json:"reschedule,omitempty"`
	// The ID of the resource. <br> Exists if: \"state\": \"succeeded\", and also for PATCH and DELETE requests
	ResourceId *string `json:"resource_id,omitempty"`
	// The type of the resource (e.g. service_brokers, service_instances).
	ResourceType *string `json:"resource_type,omitempty"`
	// Valid values are: in progress, succeeded, and failed. <br> While the state is \"in progress\", the platform should continue polling. <br/> The responses: \"state\": \"succeeded\" or \"state\": \"failed\" must cause the platform to stop polling.
	State *string `json:"state,omitempty"`
	TransitiveResources []TransitiveResource `json:"transitive_resources,omitempty"`
	// The type of the operation.<br><br> Possible values:
	Type *string `json:"type,omitempty"`
	// The last time the resource was updated. <br/>In ISO 8601 format. <br/>Recommended field if \"state\": \"succeeded\" or \"state\": \"failed\".
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewOperationResponseObject instantiates a new OperationResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationResponseObject() *OperationResponseObject {
	this := OperationResponseObject{}
	return &this
}

// NewOperationResponseObjectWithDefaults instantiates a new OperationResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationResponseObjectWithDefaults() *OperationResponseObject {
	this := OperationResponseObject{}
	return &this
}

// GetCorrelationId returns the CorrelationId field value if set, zero value otherwise.
func (o *OperationResponseObject) GetCorrelationId() string {
	if o == nil || IsNil(o.CorrelationId) {
		var ret string
		return ret
	}
	return *o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetCorrelationIdOk() (*string, bool) {
	if o == nil || IsNil(o.CorrelationId) {
		return nil, false
	}
	return o.CorrelationId, true
}

// HasCorrelationId returns a boolean if a field has been set.
func (o *OperationResponseObject) HasCorrelationId() bool {
	if o != nil && !IsNil(o.CorrelationId) {
		return true
	}

	return false
}

// SetCorrelationId gets a reference to the given string and assigns it to the CorrelationId field.
func (o *OperationResponseObject) SetCorrelationId(v string) {
	o.CorrelationId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OperationResponseObject) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OperationResponseObject) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OperationResponseObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletionScheduled returns the DeletionScheduled field value if set, zero value otherwise.
func (o *OperationResponseObject) GetDeletionScheduled() time.Time {
	if o == nil || IsNil(o.DeletionScheduled) {
		var ret time.Time
		return ret
	}
	return *o.DeletionScheduled
}

// GetDeletionScheduledOk returns a tuple with the DeletionScheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetDeletionScheduledOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletionScheduled) {
		return nil, false
	}
	return o.DeletionScheduled, true
}

// HasDeletionScheduled returns a boolean if a field has been set.
func (o *OperationResponseObject) HasDeletionScheduled() bool {
	if o != nil && !IsNil(o.DeletionScheduled) {
		return true
	}

	return false
}

// SetDeletionScheduled gets a reference to the given time.Time and assigns it to the DeletionScheduled field.
func (o *OperationResponseObject) SetDeletionScheduled(v time.Time) {
	o.DeletionScheduled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OperationResponseObject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OperationResponseObject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OperationResponseObject) SetDescription(v string) {
	o.Description = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *OperationResponseObject) GetErrors() []Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *OperationResponseObject) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *OperationResponseObject) SetErrors(v []Error) {
	o.Errors = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OperationResponseObject) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OperationResponseObject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OperationResponseObject) SetId(v string) {
	o.Id = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *OperationResponseObject) GetLabels() map[string][]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string][]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetLabelsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *OperationResponseObject) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string][]string and assigns it to the Labels field.
func (o *OperationResponseObject) SetLabels(v map[string][]string) {
	o.Labels = &v
}

// GetPlatformId returns the PlatformId field value if set, zero value otherwise.
func (o *OperationResponseObject) GetPlatformId() string {
	if o == nil || IsNil(o.PlatformId) {
		var ret string
		return ret
	}
	return *o.PlatformId
}

// GetPlatformIdOk returns a tuple with the PlatformId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetPlatformIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlatformId) {
		return nil, false
	}
	return o.PlatformId, true
}

// HasPlatformId returns a boolean if a field has been set.
func (o *OperationResponseObject) HasPlatformId() bool {
	if o != nil && !IsNil(o.PlatformId) {
		return true
	}

	return false
}

// SetPlatformId gets a reference to the given string and assigns it to the PlatformId field.
func (o *OperationResponseObject) SetPlatformId(v string) {
	o.PlatformId = &v
}

// GetReady returns the Ready field value if set, zero value otherwise.
func (o *OperationResponseObject) GetReady() bool {
	if o == nil || IsNil(o.Ready) {
		var ret bool
		return ret
	}
	return *o.Ready
}

// GetReadyOk returns a tuple with the Ready field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.Ready) {
		return nil, false
	}
	return o.Ready, true
}

// HasReady returns a boolean if a field has been set.
func (o *OperationResponseObject) HasReady() bool {
	if o != nil && !IsNil(o.Ready) {
		return true
	}

	return false
}

// SetReady gets a reference to the given bool and assigns it to the Ready field.
func (o *OperationResponseObject) SetReady(v bool) {
	o.Ready = &v
}

// GetReschedule returns the Reschedule field value if set, zero value otherwise.
func (o *OperationResponseObject) GetReschedule() bool {
	if o == nil || IsNil(o.Reschedule) {
		var ret bool
		return ret
	}
	return *o.Reschedule
}

// GetRescheduleOk returns a tuple with the Reschedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetRescheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.Reschedule) {
		return nil, false
	}
	return o.Reschedule, true
}

// HasReschedule returns a boolean if a field has been set.
func (o *OperationResponseObject) HasReschedule() bool {
	if o != nil && !IsNil(o.Reschedule) {
		return true
	}

	return false
}

// SetReschedule gets a reference to the given bool and assigns it to the Reschedule field.
func (o *OperationResponseObject) SetReschedule(v bool) {
	o.Reschedule = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *OperationResponseObject) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *OperationResponseObject) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *OperationResponseObject) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *OperationResponseObject) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *OperationResponseObject) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *OperationResponseObject) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *OperationResponseObject) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *OperationResponseObject) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *OperationResponseObject) SetState(v string) {
	o.State = &v
}

// GetTransitiveResources returns the TransitiveResources field value if set, zero value otherwise.
func (o *OperationResponseObject) GetTransitiveResources() []TransitiveResource {
	if o == nil || IsNil(o.TransitiveResources) {
		var ret []TransitiveResource
		return ret
	}
	return o.TransitiveResources
}

// GetTransitiveResourcesOk returns a tuple with the TransitiveResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetTransitiveResourcesOk() ([]TransitiveResource, bool) {
	if o == nil || IsNil(o.TransitiveResources) {
		return nil, false
	}
	return o.TransitiveResources, true
}

// HasTransitiveResources returns a boolean if a field has been set.
func (o *OperationResponseObject) HasTransitiveResources() bool {
	if o != nil && !IsNil(o.TransitiveResources) {
		return true
	}

	return false
}

// SetTransitiveResources gets a reference to the given []TransitiveResource and assigns it to the TransitiveResources field.
func (o *OperationResponseObject) SetTransitiveResources(v []TransitiveResource) {
	o.TransitiveResources = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OperationResponseObject) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OperationResponseObject) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OperationResponseObject) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OperationResponseObject) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResponseObject) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OperationResponseObject) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OperationResponseObject) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o OperationResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperationResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CorrelationId) {
		toSerialize["correlation_id"] = o.CorrelationId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletionScheduled) {
		toSerialize["deletion_scheduled"] = o.DeletionScheduled
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.PlatformId) {
		toSerialize["platform_id"] = o.PlatformId
	}
	if !IsNil(o.Ready) {
		toSerialize["ready"] = o.Ready
	}
	if !IsNil(o.Reschedule) {
		toSerialize["reschedule"] = o.Reschedule
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.TransitiveResources) {
		toSerialize["transitive_resources"] = o.TransitiveResources
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableOperationResponseObject struct {
	value *OperationResponseObject
	isSet bool
}

func (v NullableOperationResponseObject) Get() *OperationResponseObject {
	return v.value
}

func (v *NullableOperationResponseObject) Set(val *OperationResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationResponseObject(val *OperationResponseObject) *NullableOperationResponseObject {
	return &NullableOperationResponseObject{value: val, isSet: true}
}

func (v NullableOperationResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


