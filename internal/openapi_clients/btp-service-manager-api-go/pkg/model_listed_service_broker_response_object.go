/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ListedServiceBrokerResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListedServiceBrokerResponseObject{}

// ListedServiceBrokerResponseObject struct for ListedServiceBrokerResponseObject
type ListedServiceBrokerResponseObject struct {
	// The URL of the service broker.
	BrokerUrl *string `json:"broker_url,omitempty"`
	// The time the service broker was created. <br/><br/>In ISO 8601 format:</br> YYYY-MM-DDThh:mm:ssTZD
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The description of the service broker.
	Description *string `json:"description,omitempty"`
	// The ID of the service broker.
	Id string `json:"id"`
	// Additional data associated with the resource entity. <br><br>Can be an empty object.
	Labels *map[string][]string `json:"labels,omitempty"`
	// The name of the service broker.
	Name string `json:"name"`
	// Whether the service broker is ready.
	Ready *bool `json:"ready,omitempty"`
	// The last time the service broker was updated. <br/>In ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type _ListedServiceBrokerResponseObject ListedServiceBrokerResponseObject

// NewListedServiceBrokerResponseObject instantiates a new ListedServiceBrokerResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListedServiceBrokerResponseObject(id string, name string) *ListedServiceBrokerResponseObject {
	this := ListedServiceBrokerResponseObject{}
	this.Id = id
	this.Name = name
	return &this
}

// NewListedServiceBrokerResponseObjectWithDefaults instantiates a new ListedServiceBrokerResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListedServiceBrokerResponseObjectWithDefaults() *ListedServiceBrokerResponseObject {
	this := ListedServiceBrokerResponseObject{}
	return &this
}

// GetBrokerUrl returns the BrokerUrl field value if set, zero value otherwise.
func (o *ListedServiceBrokerResponseObject) GetBrokerUrl() string {
	if o == nil || IsNil(o.BrokerUrl) {
		var ret string
		return ret
	}
	return *o.BrokerUrl
}

// GetBrokerUrlOk returns a tuple with the BrokerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetBrokerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BrokerUrl) {
		return nil, false
	}
	return o.BrokerUrl, true
}

// HasBrokerUrl returns a boolean if a field has been set.
func (o *ListedServiceBrokerResponseObject) HasBrokerUrl() bool {
	if o != nil && !IsNil(o.BrokerUrl) {
		return true
	}

	return false
}

// SetBrokerUrl gets a reference to the given string and assigns it to the BrokerUrl field.
func (o *ListedServiceBrokerResponseObject) SetBrokerUrl(v string) {
	o.BrokerUrl = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ListedServiceBrokerResponseObject) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ListedServiceBrokerResponseObject) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ListedServiceBrokerResponseObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ListedServiceBrokerResponseObject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ListedServiceBrokerResponseObject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ListedServiceBrokerResponseObject) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value
func (o *ListedServiceBrokerResponseObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListedServiceBrokerResponseObject) SetId(v string) {
	o.Id = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ListedServiceBrokerResponseObject) GetLabels() map[string][]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string][]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetLabelsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ListedServiceBrokerResponseObject) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string][]string and assigns it to the Labels field.
func (o *ListedServiceBrokerResponseObject) SetLabels(v map[string][]string) {
	o.Labels = &v
}

// GetName returns the Name field value
func (o *ListedServiceBrokerResponseObject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListedServiceBrokerResponseObject) SetName(v string) {
	o.Name = v
}

// GetReady returns the Ready field value if set, zero value otherwise.
func (o *ListedServiceBrokerResponseObject) GetReady() bool {
	if o == nil || IsNil(o.Ready) {
		var ret bool
		return ret
	}
	return *o.Ready
}

// GetReadyOk returns a tuple with the Ready field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.Ready) {
		return nil, false
	}
	return o.Ready, true
}

// HasReady returns a boolean if a field has been set.
func (o *ListedServiceBrokerResponseObject) HasReady() bool {
	if o != nil && !IsNil(o.Ready) {
		return true
	}

	return false
}

// SetReady gets a reference to the given bool and assigns it to the Ready field.
func (o *ListedServiceBrokerResponseObject) SetReady(v bool) {
	o.Ready = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ListedServiceBrokerResponseObject) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListedServiceBrokerResponseObject) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ListedServiceBrokerResponseObject) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ListedServiceBrokerResponseObject) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ListedServiceBrokerResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListedServiceBrokerResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrokerUrl) {
		toSerialize["broker_url"] = o.BrokerUrl
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Ready) {
		toSerialize["ready"] = o.Ready
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *ListedServiceBrokerResponseObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListedServiceBrokerResponseObject := _ListedServiceBrokerResponseObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListedServiceBrokerResponseObject)

	if err != nil {
		return err
	}

	*o = ListedServiceBrokerResponseObject(varListedServiceBrokerResponseObject)

	return err
}

type NullableListedServiceBrokerResponseObject struct {
	value *ListedServiceBrokerResponseObject
	isSet bool
}

func (v NullableListedServiceBrokerResponseObject) Get() *ListedServiceBrokerResponseObject {
	return v.value
}

func (v *NullableListedServiceBrokerResponseObject) Set(val *ListedServiceBrokerResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableListedServiceBrokerResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableListedServiceBrokerResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedServiceBrokerResponseObject(val *ListedServiceBrokerResponseObject) *NullableListedServiceBrokerResponseObject {
	return &NullableListedServiceBrokerResponseObject{value: val, isSet: true}
}

func (v NullableListedServiceBrokerResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedServiceBrokerResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


