/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServicePlanResponseList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePlanResponseList{}

// ServicePlanResponseList struct for ServicePlanResponseList
type ServicePlanResponseList struct {
	// The list of the response objects that contain details about the service plans.
	Items []ServicePlanResponseObject `json:"items,omitempty"`
	// The number of service plans associated with the subaccount.
	NumItems *int32 `json:"num_items,omitempty"`
	// Use this token when you call the API again to get more service plans associated with your subaccount.</br> The token field indicates that the total number of service plans to view in the list (num_items) is larger than the defined maximum number of ervice plans to be returned after a single API call (max_items). </br> If the field is not present, either all the service plans were included in the first response, or you have reached the end of the list.
	Token *string `json:"token,omitempty"`
}

// NewServicePlanResponseList instantiates a new ServicePlanResponseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePlanResponseList() *ServicePlanResponseList {
	this := ServicePlanResponseList{}
	return &this
}

// NewServicePlanResponseListWithDefaults instantiates a new ServicePlanResponseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePlanResponseListWithDefaults() *ServicePlanResponseList {
	this := ServicePlanResponseList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ServicePlanResponseList) GetItems() []ServicePlanResponseObject {
	if o == nil || IsNil(o.Items) {
		var ret []ServicePlanResponseObject
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanResponseList) GetItemsOk() ([]ServicePlanResponseObject, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ServicePlanResponseList) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ServicePlanResponseObject and assigns it to the Items field.
func (o *ServicePlanResponseList) SetItems(v []ServicePlanResponseObject) {
	o.Items = v
}

// GetNumItems returns the NumItems field value if set, zero value otherwise.
func (o *ServicePlanResponseList) GetNumItems() int32 {
	if o == nil || IsNil(o.NumItems) {
		var ret int32
		return ret
	}
	return *o.NumItems
}

// GetNumItemsOk returns a tuple with the NumItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanResponseList) GetNumItemsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumItems) {
		return nil, false
	}
	return o.NumItems, true
}

// HasNumItems returns a boolean if a field has been set.
func (o *ServicePlanResponseList) HasNumItems() bool {
	if o != nil && !IsNil(o.NumItems) {
		return true
	}

	return false
}

// SetNumItems gets a reference to the given int32 and assigns it to the NumItems field.
func (o *ServicePlanResponseList) SetNumItems(v int32) {
	o.NumItems = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ServicePlanResponseList) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanResponseList) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ServicePlanResponseList) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ServicePlanResponseList) SetToken(v string) {
	o.Token = &v
}

func (o ServicePlanResponseList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePlanResponseList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.NumItems) {
		toSerialize["num_items"] = o.NumItems
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableServicePlanResponseList struct {
	value *ServicePlanResponseList
	isSet bool
}

func (v NullableServicePlanResponseList) Get() *ServicePlanResponseList {
	return v.value
}

func (v *NullableServicePlanResponseList) Set(val *ServicePlanResponseList) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePlanResponseList) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePlanResponseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePlanResponseList(val *ServicePlanResponseList) *NullableServicePlanResponseList {
	return &NullableServicePlanResponseList{value: val, isSet: true}
}

func (v NullableServicePlanResponseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePlanResponseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


