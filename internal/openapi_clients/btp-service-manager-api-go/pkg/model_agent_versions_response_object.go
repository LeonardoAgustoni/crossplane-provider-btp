/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AgentVersionsResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentVersionsResponseObject{}

// AgentVersionsResponseObject struct for AgentVersionsResponseObject
type AgentVersionsResponseObject struct {
	// The list of compatible agent versions for the Cloud Foundry environment.
	Cf []string `json:"cf,omitempty"`
	// The list of compatible agent versions for the cf-sap environment.
	CfSap []string `json:"cf-sap,omitempty"`
	// The list of compatible agent versions for the Kubernetes environment.
	K8s []string `json:"k8s,omitempty"`
}

// NewAgentVersionsResponseObject instantiates a new AgentVersionsResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentVersionsResponseObject() *AgentVersionsResponseObject {
	this := AgentVersionsResponseObject{}
	return &this
}

// NewAgentVersionsResponseObjectWithDefaults instantiates a new AgentVersionsResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentVersionsResponseObjectWithDefaults() *AgentVersionsResponseObject {
	this := AgentVersionsResponseObject{}
	return &this
}

// GetCf returns the Cf field value if set, zero value otherwise.
func (o *AgentVersionsResponseObject) GetCf() []string {
	if o == nil || IsNil(o.Cf) {
		var ret []string
		return ret
	}
	return o.Cf
}

// GetCfOk returns a tuple with the Cf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersionsResponseObject) GetCfOk() ([]string, bool) {
	if o == nil || IsNil(o.Cf) {
		return nil, false
	}
	return o.Cf, true
}

// HasCf returns a boolean if a field has been set.
func (o *AgentVersionsResponseObject) HasCf() bool {
	if o != nil && !IsNil(o.Cf) {
		return true
	}

	return false
}

// SetCf gets a reference to the given []string and assigns it to the Cf field.
func (o *AgentVersionsResponseObject) SetCf(v []string) {
	o.Cf = v
}

// GetCfSap returns the CfSap field value if set, zero value otherwise.
func (o *AgentVersionsResponseObject) GetCfSap() []string {
	if o == nil || IsNil(o.CfSap) {
		var ret []string
		return ret
	}
	return o.CfSap
}

// GetCfSapOk returns a tuple with the CfSap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersionsResponseObject) GetCfSapOk() ([]string, bool) {
	if o == nil || IsNil(o.CfSap) {
		return nil, false
	}
	return o.CfSap, true
}

// HasCfSap returns a boolean if a field has been set.
func (o *AgentVersionsResponseObject) HasCfSap() bool {
	if o != nil && !IsNil(o.CfSap) {
		return true
	}

	return false
}

// SetCfSap gets a reference to the given []string and assigns it to the CfSap field.
func (o *AgentVersionsResponseObject) SetCfSap(v []string) {
	o.CfSap = v
}

// GetK8s returns the K8s field value if set, zero value otherwise.
func (o *AgentVersionsResponseObject) GetK8s() []string {
	if o == nil || IsNil(o.K8s) {
		var ret []string
		return ret
	}
	return o.K8s
}

// GetK8sOk returns a tuple with the K8s field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentVersionsResponseObject) GetK8sOk() ([]string, bool) {
	if o == nil || IsNil(o.K8s) {
		return nil, false
	}
	return o.K8s, true
}

// HasK8s returns a boolean if a field has been set.
func (o *AgentVersionsResponseObject) HasK8s() bool {
	if o != nil && !IsNil(o.K8s) {
		return true
	}

	return false
}

// SetK8s gets a reference to the given []string and assigns it to the K8s field.
func (o *AgentVersionsResponseObject) SetK8s(v []string) {
	o.K8s = v
}

func (o AgentVersionsResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentVersionsResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cf) {
		toSerialize["cf"] = o.Cf
	}
	if !IsNil(o.CfSap) {
		toSerialize["cf-sap"] = o.CfSap
	}
	if !IsNil(o.K8s) {
		toSerialize["k8s"] = o.K8s
	}
	return toSerialize, nil
}

type NullableAgentVersionsResponseObject struct {
	value *AgentVersionsResponseObject
	isSet bool
}

func (v NullableAgentVersionsResponseObject) Get() *AgentVersionsResponseObject {
	return v.value
}

func (v *NullableAgentVersionsResponseObject) Set(val *AgentVersionsResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentVersionsResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentVersionsResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentVersionsResponseObject(val *AgentVersionsResponseObject) *NullableAgentVersionsResponseObject {
	return &NullableAgentVersionsResponseObject{value: val, isSet: true}
}

func (v NullableAgentVersionsResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentVersionsResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


