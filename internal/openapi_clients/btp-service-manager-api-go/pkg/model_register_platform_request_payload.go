/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterPlatformRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterPlatformRequestPayload{}

// RegisterPlatformRequestPayload struct for RegisterPlatformRequestPayload
type RegisterPlatformRequestPayload struct {
	// The description of the platform for customer-facing UIs.
	Description *string `json:"description,omitempty"`
	// Additional data associated with the resource entity. <br><br>Can be an empty object.
	Labels *map[string][]string `json:"labels,omitempty"`
	// The CLI-friendly name of the platform.<br/>A CLI-friendly name is a short string that only contains alphanumeric characters, periods, and hyphens.<br> It can't contain white spaces. <br>The name must not exceed 255 characters, but it is recommended to keep it much shorter, for the convenience of using short names in CLI commands.
	Name string `json:"name"`
	// The type of the platform. <br><br> Possible values: 
	Type string `json:"type"`
}

type _RegisterPlatformRequestPayload RegisterPlatformRequestPayload

// NewRegisterPlatformRequestPayload instantiates a new RegisterPlatformRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterPlatformRequestPayload(name string, type_ string) *RegisterPlatformRequestPayload {
	this := RegisterPlatformRequestPayload{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewRegisterPlatformRequestPayloadWithDefaults instantiates a new RegisterPlatformRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterPlatformRequestPayloadWithDefaults() *RegisterPlatformRequestPayload {
	this := RegisterPlatformRequestPayload{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RegisterPlatformRequestPayload) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPlatformRequestPayload) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RegisterPlatformRequestPayload) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RegisterPlatformRequestPayload) SetDescription(v string) {
	o.Description = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RegisterPlatformRequestPayload) GetLabels() map[string][]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string][]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPlatformRequestPayload) GetLabelsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RegisterPlatformRequestPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string][]string and assigns it to the Labels field.
func (o *RegisterPlatformRequestPayload) SetLabels(v map[string][]string) {
	o.Labels = &v
}

// GetName returns the Name field value
func (o *RegisterPlatformRequestPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisterPlatformRequestPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisterPlatformRequestPayload) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *RegisterPlatformRequestPayload) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegisterPlatformRequestPayload) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RegisterPlatformRequestPayload) SetType(v string) {
	o.Type = v
}

func (o RegisterPlatformRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterPlatformRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *RegisterPlatformRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterPlatformRequestPayload := _RegisterPlatformRequestPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterPlatformRequestPayload)

	if err != nil {
		return err
	}

	*o = RegisterPlatformRequestPayload(varRegisterPlatformRequestPayload)

	return err
}

type NullableRegisterPlatformRequestPayload struct {
	value *RegisterPlatformRequestPayload
	isSet bool
}

func (v NullableRegisterPlatformRequestPayload) Get() *RegisterPlatformRequestPayload {
	return v.value
}

func (v *NullableRegisterPlatformRequestPayload) Set(val *RegisterPlatformRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterPlatformRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterPlatformRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterPlatformRequestPayload(val *RegisterPlatformRequestPayload) *NullableRegisterPlatformRequestPayload {
	return &NullableRegisterPlatformRequestPayload{value: val, isSet: true}
}

func (v NullableRegisterPlatformRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterPlatformRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


