/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateServiceInstanceRequestPayload - struct for CreateServiceInstanceRequestPayload
type CreateServiceInstanceRequestPayload struct {
	CreateByOfferingAndPlanName *CreateByOfferingAndPlanName
	CreateByPlanID *CreateByPlanID
}

// CreateByOfferingAndPlanNameAsCreateServiceInstanceRequestPayload is a convenience function that returns CreateByOfferingAndPlanName wrapped in CreateServiceInstanceRequestPayload
func CreateByOfferingAndPlanNameAsCreateServiceInstanceRequestPayload(v *CreateByOfferingAndPlanName) CreateServiceInstanceRequestPayload {
	return CreateServiceInstanceRequestPayload{
		CreateByOfferingAndPlanName: v,
	}
}

// CreateByPlanIDAsCreateServiceInstanceRequestPayload is a convenience function that returns CreateByPlanID wrapped in CreateServiceInstanceRequestPayload
func CreateByPlanIDAsCreateServiceInstanceRequestPayload(v *CreateByPlanID) CreateServiceInstanceRequestPayload {
	return CreateServiceInstanceRequestPayload{
		CreateByPlanID: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateServiceInstanceRequestPayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateByOfferingAndPlanName
	err = newStrictDecoder(data).Decode(&dst.CreateByOfferingAndPlanName)
	if err == nil {
		jsonCreateByOfferingAndPlanName, _ := json.Marshal(dst.CreateByOfferingAndPlanName)
		if string(jsonCreateByOfferingAndPlanName) == "{}" { // empty struct
			dst.CreateByOfferingAndPlanName = nil
		} else {
			if err = validator.Validate(dst.CreateByOfferingAndPlanName); err != nil {
				dst.CreateByOfferingAndPlanName = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateByOfferingAndPlanName = nil
	}

	// try to unmarshal data into CreateByPlanID
	err = newStrictDecoder(data).Decode(&dst.CreateByPlanID)
	if err == nil {
		jsonCreateByPlanID, _ := json.Marshal(dst.CreateByPlanID)
		if string(jsonCreateByPlanID) == "{}" { // empty struct
			dst.CreateByPlanID = nil
		} else {
			if err = validator.Validate(dst.CreateByPlanID); err != nil {
				dst.CreateByPlanID = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateByPlanID = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateByOfferingAndPlanName = nil
		dst.CreateByPlanID = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateServiceInstanceRequestPayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateServiceInstanceRequestPayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateServiceInstanceRequestPayload) MarshalJSON() ([]byte, error) {
	if src.CreateByOfferingAndPlanName != nil {
		return json.Marshal(&src.CreateByOfferingAndPlanName)
	}

	if src.CreateByPlanID != nil {
		return json.Marshal(&src.CreateByPlanID)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateServiceInstanceRequestPayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateByOfferingAndPlanName != nil {
		return obj.CreateByOfferingAndPlanName
	}

	if obj.CreateByPlanID != nil {
		return obj.CreateByPlanID
	}

	// all schemas are nil
	return nil
}

type NullableCreateServiceInstanceRequestPayload struct {
	value *CreateServiceInstanceRequestPayload
	isSet bool
}

func (v NullableCreateServiceInstanceRequestPayload) Get() *CreateServiceInstanceRequestPayload {
	return v.value
}

func (v *NullableCreateServiceInstanceRequestPayload) Set(val *CreateServiceInstanceRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateServiceInstanceRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateServiceInstanceRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateServiceInstanceRequestPayload(val *CreateServiceInstanceRequestPayload) *NullableCreateServiceInstanceRequestPayload {
	return &NullableCreateServiceInstanceRequestPayload{value: val, isSet: true}
}

func (v NullableCreateServiceInstanceRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateServiceInstanceRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


