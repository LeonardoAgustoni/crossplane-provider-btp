/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateServiceBindingRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateServiceBindingRequestPayload{}

// CreateServiceBindingRequestPayload struct for CreateServiceBindingRequestPayload
type CreateServiceBindingRequestPayload struct {
	// The bind_resource object contains platform-specific information related to the context in which the service is used.<br> The examples of some common fields to use: <br> app_guid - A string GUID of an application associated with the binding. For credentials bindings. Must be unique within the scope of the platform.<br>app_guid - Represents the scope to which the binding applies within the platform. <br>For example, in Kubernetes it can map to a namespace.<br> The scope of what the platform maps the app_guid to is platform-specific and can vary across binding requests.<br>route - URL of the intermediate application. For route services bindings.
	BindResource map[string]interface{} `json:"bind_resource,omitempty"`
	// Additional data associated with the resource entity. <br><br>Can be an empty object.
	Labels *map[string][]string `json:"labels,omitempty"`
	// The name of the service binding.
	Name string `json:"name"`
	// Some services support providing of additional configuration parameters during binding creation. Pass these parameters as key-value pairs.<br> For the list of supported configuration parameters, see the documentation of a particular service offering.<br>You can also use the *GET /v1/service_bindings/{serviceBindingID}/parameters* API later to view the parameters defined during this step.
	Parameters *map[string]string `json:"parameters,omitempty"`
	// The id of the service instance associated with the binding.
	ServiceInstanceId string `json:"service_instance_id"`
}

type _CreateServiceBindingRequestPayload CreateServiceBindingRequestPayload

// NewCreateServiceBindingRequestPayload instantiates a new CreateServiceBindingRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateServiceBindingRequestPayload(name string, serviceInstanceId string) *CreateServiceBindingRequestPayload {
	this := CreateServiceBindingRequestPayload{}
	this.Name = name
	this.ServiceInstanceId = serviceInstanceId
	return &this
}

// NewCreateServiceBindingRequestPayloadWithDefaults instantiates a new CreateServiceBindingRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateServiceBindingRequestPayloadWithDefaults() *CreateServiceBindingRequestPayload {
	this := CreateServiceBindingRequestPayload{}
	return &this
}

// GetBindResource returns the BindResource field value if set, zero value otherwise.
func (o *CreateServiceBindingRequestPayload) GetBindResource() map[string]interface{} {
	if o == nil || IsNil(o.BindResource) {
		var ret map[string]interface{}
		return ret
	}
	return o.BindResource
}

// GetBindResourceOk returns a tuple with the BindResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateServiceBindingRequestPayload) GetBindResourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BindResource) {
		return map[string]interface{}{}, false
	}
	return o.BindResource, true
}

// HasBindResource returns a boolean if a field has been set.
func (o *CreateServiceBindingRequestPayload) HasBindResource() bool {
	if o != nil && !IsNil(o.BindResource) {
		return true
	}

	return false
}

// SetBindResource gets a reference to the given map[string]interface{} and assigns it to the BindResource field.
func (o *CreateServiceBindingRequestPayload) SetBindResource(v map[string]interface{}) {
	o.BindResource = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateServiceBindingRequestPayload) GetLabels() map[string][]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string][]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateServiceBindingRequestPayload) GetLabelsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateServiceBindingRequestPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string][]string and assigns it to the Labels field.
func (o *CreateServiceBindingRequestPayload) SetLabels(v map[string][]string) {
	o.Labels = &v
}

// GetName returns the Name field value
func (o *CreateServiceBindingRequestPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateServiceBindingRequestPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateServiceBindingRequestPayload) SetName(v string) {
	o.Name = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *CreateServiceBindingRequestPayload) GetParameters() map[string]string {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateServiceBindingRequestPayload) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *CreateServiceBindingRequestPayload) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *CreateServiceBindingRequestPayload) SetParameters(v map[string]string) {
	o.Parameters = &v
}

// GetServiceInstanceId returns the ServiceInstanceId field value
func (o *CreateServiceBindingRequestPayload) GetServiceInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceInstanceId
}

// GetServiceInstanceIdOk returns a tuple with the ServiceInstanceId field value
// and a boolean to check if the value has been set.
func (o *CreateServiceBindingRequestPayload) GetServiceInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceInstanceId, true
}

// SetServiceInstanceId sets field value
func (o *CreateServiceBindingRequestPayload) SetServiceInstanceId(v string) {
	o.ServiceInstanceId = v
}

func (o CreateServiceBindingRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateServiceBindingRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BindResource) {
		toSerialize["bind_resource"] = o.BindResource
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	toSerialize["service_instance_id"] = o.ServiceInstanceId
	return toSerialize, nil
}

func (o *CreateServiceBindingRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"service_instance_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateServiceBindingRequestPayload := _CreateServiceBindingRequestPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateServiceBindingRequestPayload)

	if err != nil {
		return err
	}

	*o = CreateServiceBindingRequestPayload(varCreateServiceBindingRequestPayload)

	return err
}

type NullableCreateServiceBindingRequestPayload struct {
	value *CreateServiceBindingRequestPayload
	isSet bool
}

func (v NullableCreateServiceBindingRequestPayload) Get() *CreateServiceBindingRequestPayload {
	return v.value
}

func (v *NullableCreateServiceBindingRequestPayload) Set(val *CreateServiceBindingRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateServiceBindingRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateServiceBindingRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateServiceBindingRequestPayload(val *CreateServiceBindingRequestPayload) *NullableCreateServiceBindingRequestPayload {
	return &NullableCreateServiceBindingRequestPayload{value: val, isSet: true}
}

func (v NullableCreateServiceBindingRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateServiceBindingRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


