/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ServiceBindingsAPI interface {

	/*
	CreateServiceBinding Create a service binding

	Create a new service binding between a service instance and an application. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.manage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateServiceBindingRequest
	*/
	CreateServiceBinding(ctx context.Context) ApiCreateServiceBindingRequest

	// CreateServiceBindingExecute executes the request
	//  @return CreatedServiceBindingResponseObject
	CreateServiceBindingExecute(r ApiCreateServiceBindingRequest) (*CreatedServiceBindingResponseObject, *http.Response, error)

	/*
	DeleteServiceBinding Delete a service binding

	Delete a specific service binding. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.manage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceBindingID The ID of the service binding to delete.
	@return ApiDeleteServiceBindingRequest
	*/
	DeleteServiceBinding(ctx context.Context, serviceBindingID string) ApiDeleteServiceBindingRequest

	// DeleteServiceBindingExecute executes the request
	//  @return map[string]interface{}
	DeleteServiceBindingExecute(r ApiDeleteServiceBindingRequest) (map[string]interface{}, *http.Response, error)

	/*
	GetAllServiceBindings Get all service bindings

	View the list of all service bindings. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllServiceBindingsRequest
	*/
	GetAllServiceBindings(ctx context.Context) ApiGetAllServiceBindingsRequest

	// GetAllServiceBindingsExecute executes the request
	//  @return ServiceBindingResponseList
	GetAllServiceBindingsExecute(r ApiGetAllServiceBindingsRequest) (*ServiceBindingResponseList, *http.Response, error)

	/*
	GetServiceBindingById Get service binding details

	Get details about a specific service binding. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceBindingID The ID of the service binding for which to get details.
	@return ApiGetServiceBindingByIdRequest
	*/
	GetServiceBindingById(ctx context.Context, serviceBindingID string) ApiGetServiceBindingByIdRequest

	// GetServiceBindingByIdExecute executes the request
	//  @return ServiceBindingResponseObject
	GetServiceBindingByIdExecute(r ApiGetServiceBindingByIdRequest) (*ServiceBindingResponseObject, *http.Response, error)

	/*
	GetServiceBindingParametersById Get service binding parameters

	View the additional configuration parameters of a specified service binding.<br> The parameters were provided during the creation of the binding as part of the request payload. <br>See *POST /v1/service_bindings* API for more details. <br/><br/>**Prerequisite:**<br/>To get configuration parameters, bindings_retrievable field of the service offering to which this binding relates, must be set to true ("bindings_retrievable":true).<br/>To check, use the API: *GET /v1/service_offerings/{serviceOfferingID}*  <br/><br/>Required scopes:
<xsappname>.subaccount.service_binding.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceBindingID The ID of the service binding for which to get parameters.
	@return ApiGetServiceBindingParametersByIdRequest
	*/
	GetServiceBindingParametersById(ctx context.Context, serviceBindingID string) ApiGetServiceBindingParametersByIdRequest

	// GetServiceBindingParametersByIdExecute executes the request
	//  @return map[string]string
	GetServiceBindingParametersByIdExecute(r ApiGetServiceBindingParametersByIdRequest) (map[string]string, *http.Response, error)
}

// ServiceBindingsAPIService ServiceBindingsAPI service
type ServiceBindingsAPIService service

type ApiCreateServiceBindingRequest struct {
	ctx context.Context
	ApiService ServiceBindingsAPI
	createServiceBindingRequestPayload *CreateServiceBindingRequestPayload
	async *bool
}

// Configure a new service binding to obtain the access credentials to the service instance.
func (r ApiCreateServiceBindingRequest) CreateServiceBindingRequestPayload(createServiceBindingRequestPayload CreateServiceBindingRequestPayload) ApiCreateServiceBindingRequest {
	r.createServiceBindingRequestPayload = &createServiceBindingRequestPayload
	return r
}

// Whether to perform this operation asynchronously.
func (r ApiCreateServiceBindingRequest) Async(async bool) ApiCreateServiceBindingRequest {
	r.async = &async
	return r
}

func (r ApiCreateServiceBindingRequest) Execute() (*CreatedServiceBindingResponseObject, *http.Response, error) {
	return r.ApiService.CreateServiceBindingExecute(r)
}

/*
CreateServiceBinding Create a service binding

Create a new service binding between a service instance and an application. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.manage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateServiceBindingRequest
*/
func (a *ServiceBindingsAPIService) CreateServiceBinding(ctx context.Context) ApiCreateServiceBindingRequest {
	return ApiCreateServiceBindingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreatedServiceBindingResponseObject
func (a *ServiceBindingsAPIService) CreateServiceBindingExecute(r ApiCreateServiceBindingRequest) (*CreatedServiceBindingResponseObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreatedServiceBindingResponseObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceBindingsAPIService.CreateServiceBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_bindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createServiceBindingRequestPayload == nil {
		return localVarReturnValue, nil, reportError("createServiceBindingRequestPayload is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createServiceBindingRequestPayload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteServiceBindingRequest struct {
	ctx context.Context
	ApiService ServiceBindingsAPI
	serviceBindingID string
	async *bool
}

// Whether to perform this operation asynchronously.
func (r ApiDeleteServiceBindingRequest) Async(async bool) ApiDeleteServiceBindingRequest {
	r.async = &async
	return r
}

func (r ApiDeleteServiceBindingRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteServiceBindingExecute(r)
}

/*
DeleteServiceBinding Delete a service binding

Delete a specific service binding. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.manage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceBindingID The ID of the service binding to delete.
 @return ApiDeleteServiceBindingRequest
*/
func (a *ServiceBindingsAPIService) DeleteServiceBinding(ctx context.Context, serviceBindingID string) ApiDeleteServiceBindingRequest {
	return ApiDeleteServiceBindingRequest{
		ApiService: a,
		ctx: ctx,
		serviceBindingID: serviceBindingID,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ServiceBindingsAPIService) DeleteServiceBindingExecute(r ApiDeleteServiceBindingRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceBindingsAPIService.DeleteServiceBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_bindings/{serviceBindingID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceBindingID"+"}", url.PathEscape(parameterValueToString(r.serviceBindingID, "serviceBindingID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllServiceBindingsRequest struct {
	ctx context.Context
	ApiService ServiceBindingsAPI
	fieldQuery *string
	labelQuery *string
	token *string
	maxItems *int32
}

// Filters the response based on the field query.&lt;br&gt; If used, must be a nonempty string.&lt;br/&gt;For example:&lt;br&gt; ready eq &#39;true&#39;
func (r ApiGetAllServiceBindingsRequest) FieldQuery(fieldQuery string) ApiGetAllServiceBindingsRequest {
	r.fieldQuery = &fieldQuery
	return r
}

// Filters the response based on the label query. &lt;br&gt; If used, must be a nonempty string.&lt;br/&gt;For example:&lt;br&gt; environment eq &#39;dev&#39;
func (r ApiGetAllServiceBindingsRequest) LabelQuery(labelQuery string) ApiGetAllServiceBindingsRequest {
	r.labelQuery = &labelQuery
	return r
}

// You get this parameter in the response list of the API if the total number of items to return (num_items) is larger than the number of items returned in a single API call (max_items).&lt;/br&gt; You get a different token in each response to be used in each consecutive call as long as there are more items to list.&lt;/br&gt; Use the returned tokens to get the full list of resources associated with your subaccount.&lt;/br&gt; If this is the first time you are calling the API, leave this field empty.
func (r ApiGetAllServiceBindingsRequest) Token(token string) ApiGetAllServiceBindingsRequest {
	r.token = &token
	return r
}

// The maximum number of service bindings to return in the response. 
func (r ApiGetAllServiceBindingsRequest) MaxItems(maxItems int32) ApiGetAllServiceBindingsRequest {
	r.maxItems = &maxItems
	return r
}

func (r ApiGetAllServiceBindingsRequest) Execute() (*ServiceBindingResponseList, *http.Response, error) {
	return r.ApiService.GetAllServiceBindingsExecute(r)
}

/*
GetAllServiceBindings Get all service bindings

View the list of all service bindings. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllServiceBindingsRequest
*/
func (a *ServiceBindingsAPIService) GetAllServiceBindings(ctx context.Context) ApiGetAllServiceBindingsRequest {
	return ApiGetAllServiceBindingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceBindingResponseList
func (a *ServiceBindingsAPIService) GetAllServiceBindingsExecute(r ApiGetAllServiceBindingsRequest) (*ServiceBindingResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceBindingResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceBindingsAPIService.GetAllServiceBindings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_bindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldQuery", r.fieldQuery, "form", "")
	}
	if r.labelQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelQuery", r.labelQuery, "form", "")
	}
	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	if r.maxItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_items", r.maxItems, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBindingByIdRequest struct {
	ctx context.Context
	ApiService ServiceBindingsAPI
	serviceBindingID string
}

func (r ApiGetServiceBindingByIdRequest) Execute() (*ServiceBindingResponseObject, *http.Response, error) {
	return r.ApiService.GetServiceBindingByIdExecute(r)
}

/*
GetServiceBindingById Get service binding details

Get details about a specific service binding. <br/><br/>Required scopes: <xsappname>.subaccount.service_binding.read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceBindingID The ID of the service binding for which to get details.
 @return ApiGetServiceBindingByIdRequest
*/
func (a *ServiceBindingsAPIService) GetServiceBindingById(ctx context.Context, serviceBindingID string) ApiGetServiceBindingByIdRequest {
	return ApiGetServiceBindingByIdRequest{
		ApiService: a,
		ctx: ctx,
		serviceBindingID: serviceBindingID,
	}
}

// Execute executes the request
//  @return ServiceBindingResponseObject
func (a *ServiceBindingsAPIService) GetServiceBindingByIdExecute(r ApiGetServiceBindingByIdRequest) (*ServiceBindingResponseObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceBindingResponseObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceBindingsAPIService.GetServiceBindingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_bindings/{serviceBindingID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceBindingID"+"}", url.PathEscape(parameterValueToString(r.serviceBindingID, "serviceBindingID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBindingParametersByIdRequest struct {
	ctx context.Context
	ApiService ServiceBindingsAPI
	serviceBindingID string
}

func (r ApiGetServiceBindingParametersByIdRequest) Execute() (map[string]string, *http.Response, error) {
	return r.ApiService.GetServiceBindingParametersByIdExecute(r)
}

/*
GetServiceBindingParametersById Get service binding parameters

View the additional configuration parameters of a specified service binding.<br> The parameters were provided during the creation of the binding as part of the request payload. <br>See *POST /v1/service_bindings* API for more details. <br/><br/>**Prerequisite:**<br/>To get configuration parameters, bindings_retrievable field of the service offering to which this binding relates, must be set to true ("bindings_retrievable":true).<br/>To check, use the API: *GET /v1/service_offerings/{serviceOfferingID}*  <br/><br/>Required scopes:
<xsappname>.subaccount.service_binding.read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceBindingID The ID of the service binding for which to get parameters.
 @return ApiGetServiceBindingParametersByIdRequest
*/
func (a *ServiceBindingsAPIService) GetServiceBindingParametersById(ctx context.Context, serviceBindingID string) ApiGetServiceBindingParametersByIdRequest {
	return ApiGetServiceBindingParametersByIdRequest{
		ApiService: a,
		ctx: ctx,
		serviceBindingID: serviceBindingID,
	}
}

// Execute executes the request
//  @return map[string]string
func (a *ServiceBindingsAPIService) GetServiceBindingParametersByIdExecute(r ApiGetServiceBindingParametersByIdRequest) (map[string]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceBindingsAPIService.GetServiceBindingParametersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_bindings/{serviceBindingID}/parameters"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceBindingID"+"}", url.PathEscape(parameterValueToString(r.serviceBindingID, "serviceBindingID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
