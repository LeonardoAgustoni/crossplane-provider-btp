/*
Service Manager

Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ServiceInstancesAPI interface {

	/*
	CreateServiceInstance Create a service instance

	Create a new service instance after receiving a provisioning request from SAP BTP.<br><br>Note<br>The service instance you create are environment-agnostic, and on a subaccount level.<br>To create environment-specific instances, use environment-native tools (e.g. cf CLI for Cloud Foundry instances). <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.manage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateServiceInstanceRequest
	*/
	CreateServiceInstance(ctx context.Context) ApiCreateServiceInstanceRequest

	// CreateServiceInstanceExecute executes the request
	//  @return CreatedServiceInstanceResponseObject
	CreateServiceInstanceExecute(r ApiCreateServiceInstanceRequest) (*CreatedServiceInstanceResponseObject, *http.Response, error)

	/*
	DeleteServiceInstance Delete a service instance

	Delete a provisioned service instance. <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.manage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceInstanceID The ID of the provisioned service instance to delete.
	@return ApiDeleteServiceInstanceRequest
	*/
	DeleteServiceInstance(ctx context.Context, serviceInstanceID string) ApiDeleteServiceInstanceRequest

	// DeleteServiceInstanceExecute executes the request
	//  @return map[string]interface{}
	DeleteServiceInstanceExecute(r ApiDeleteServiceInstanceRequest) (map[string]interface{}, *http.Response, error)

	/*
	GetAllServiceInstances Get all service instances

	View the list of all service instances in the subaccount. <br/><br/> Required scopes: <xsappname>.subaccount.service_instance.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllServiceInstancesRequest
	*/
	GetAllServiceInstances(ctx context.Context) ApiGetAllServiceInstancesRequest

	// GetAllServiceInstancesExecute executes the request
	//  @return ServiceInstanceResponseList
	GetAllServiceInstancesExecute(r ApiGetAllServiceInstancesRequest) (*ServiceInstanceResponseList, *http.Response, error)

	/*
	GetServiceInstanceById Get service instance details

	View details of a specific provisioned service instance. <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceInstanceID The ID of the provisioned service instance for which to get details.
	@return ApiGetServiceInstanceByIdRequest
	*/
	GetServiceInstanceById(ctx context.Context, serviceInstanceID string) ApiGetServiceInstanceByIdRequest

	// GetServiceInstanceByIdExecute executes the request
	//  @return ServiceInstanceResponseObject
	GetServiceInstanceByIdExecute(r ApiGetServiceInstanceByIdRequest) (*ServiceInstanceResponseObject, *http.Response, error)

	/*
	GetServiceInstanceParameters Get service instance parameters

	View the additional configuration parameters of a specified provisioned service instance.<br><br>The configuration parameters were provided either during the creation of the instance as part of the request payload of the API: *POST/v1/service_instances*, or during the update of the service instance by using the API: *PATCH/v1/service_instances.*<br/><br/>**Prerequisite:**<br/>To get configuration parameters, instances_retrievable field of the service offering to which this service instance relates, must be set to true ("instances_retrievable":true).<br/>To check, use the API: *GET /v1/service_offerings/{serviceOfferingID}*<br/><br/> Required scopes: <xsappname>.subaccount.service_instance.read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceInstanceID The ID of the provisioned service instance for which to get parameters.
	@return ApiGetServiceInstanceParametersRequest
	*/
	GetServiceInstanceParameters(ctx context.Context, serviceInstanceID string) ApiGetServiceInstanceParametersRequest

	// GetServiceInstanceParametersExecute executes the request
	//  @return map[string]string
	GetServiceInstanceParametersExecute(r ApiGetServiceInstanceParametersRequest) (map[string]string, *http.Response, error)

	/*
	UpdateServiceInstance Update a service instance

	Update details of a specified provisioned service instance. <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.manage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceInstanceID The ID of the provisioned service instance to update.
	@return ApiUpdateServiceInstanceRequest
	*/
	UpdateServiceInstance(ctx context.Context, serviceInstanceID string) ApiUpdateServiceInstanceRequest

	// UpdateServiceInstanceExecute executes the request
	//  @return UpdatedServiceInstanceResponseObject
	UpdateServiceInstanceExecute(r ApiUpdateServiceInstanceRequest) (*UpdatedServiceInstanceResponseObject, *http.Response, error)
}

// ServiceInstancesAPIService ServiceInstancesAPI service
type ServiceInstancesAPIService service

type ApiCreateServiceInstanceRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	createServiceInstanceRequestPayload *CreateServiceInstanceRequestPayload
	async *bool
}

// Details of the service instance to register.&lt;br/&gt;&lt;br/&gt;Create an instance by providing the values for one of the following sections:&lt;br/&gt; •CreateByPlanID&lt;br/&gt; •CreateByOfferingAndPlanName
func (r ApiCreateServiceInstanceRequest) CreateServiceInstanceRequestPayload(createServiceInstanceRequestPayload CreateServiceInstanceRequestPayload) ApiCreateServiceInstanceRequest {
	r.createServiceInstanceRequestPayload = &createServiceInstanceRequestPayload
	return r
}

// Whether to perform this operation asynchronously.
func (r ApiCreateServiceInstanceRequest) Async(async bool) ApiCreateServiceInstanceRequest {
	r.async = &async
	return r
}

func (r ApiCreateServiceInstanceRequest) Execute() (*CreatedServiceInstanceResponseObject, *http.Response, error) {
	return r.ApiService.CreateServiceInstanceExecute(r)
}

/*
CreateServiceInstance Create a service instance

Create a new service instance after receiving a provisioning request from SAP BTP.<br><br>Note<br>The service instance you create are environment-agnostic, and on a subaccount level.<br>To create environment-specific instances, use environment-native tools (e.g. cf CLI for Cloud Foundry instances). <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.manage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateServiceInstanceRequest
*/
func (a *ServiceInstancesAPIService) CreateServiceInstance(ctx context.Context) ApiCreateServiceInstanceRequest {
	return ApiCreateServiceInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreatedServiceInstanceResponseObject
func (a *ServiceInstancesAPIService) CreateServiceInstanceExecute(r ApiCreateServiceInstanceRequest) (*CreatedServiceInstanceResponseObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreatedServiceInstanceResponseObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.CreateServiceInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createServiceInstanceRequestPayload == nil {
		return localVarReturnValue, nil, reportError("createServiceInstanceRequestPayload is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createServiceInstanceRequestPayload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteServiceInstanceRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	serviceInstanceID string
	async *bool
}

// Whether to perform this operation asynchronously.
func (r ApiDeleteServiceInstanceRequest) Async(async bool) ApiDeleteServiceInstanceRequest {
	r.async = &async
	return r
}

func (r ApiDeleteServiceInstanceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteServiceInstanceExecute(r)
}

/*
DeleteServiceInstance Delete a service instance

Delete a provisioned service instance. <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.manage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceInstanceID The ID of the provisioned service instance to delete.
 @return ApiDeleteServiceInstanceRequest
*/
func (a *ServiceInstancesAPIService) DeleteServiceInstance(ctx context.Context, serviceInstanceID string) ApiDeleteServiceInstanceRequest {
	return ApiDeleteServiceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceInstanceID: serviceInstanceID,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ServiceInstancesAPIService) DeleteServiceInstanceExecute(r ApiDeleteServiceInstanceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.DeleteServiceInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_instances/{serviceInstanceID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceInstanceID"+"}", url.PathEscape(parameterValueToString(r.serviceInstanceID, "serviceInstanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllServiceInstancesRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	fieldQuery *string
	labelQuery *string
	token *string
	maxItems *int32
}

// Filters the response based on the field query. &lt;br&gt; If used, must be a nonempty string.&lt;br/&gt;For example:&lt;br&gt; usable eq &#39;true&#39;
func (r ApiGetAllServiceInstancesRequest) FieldQuery(fieldQuery string) ApiGetAllServiceInstancesRequest {
	r.fieldQuery = &fieldQuery
	return r
}

// Filters the response based on the label query. &lt;br&gt;If used, must be a nonempty string.&lt;br/&gt;For example:&lt;br/&gt; environment eq &#39;dev&#39;
func (r ApiGetAllServiceInstancesRequest) LabelQuery(labelQuery string) ApiGetAllServiceInstancesRequest {
	r.labelQuery = &labelQuery
	return r
}

// You get this parameter in the response list of the API if the total number of items to return (num_items) is larger than the number of items returned in a single API call (max_items).&lt;br/&gt; You get a different token in each response to be used in each consecutive call as long as there are more items to list.&lt;br/&gt; Use the returned tokens to get the full list of resources associated with your subaccount.&lt;br/&gt; If this is the first time you are calling the API, leave this field empty.
func (r ApiGetAllServiceInstancesRequest) Token(token string) ApiGetAllServiceInstancesRequest {
	r.token = &token
	return r
}

// The maximum number of service instances to return in the response. 
func (r ApiGetAllServiceInstancesRequest) MaxItems(maxItems int32) ApiGetAllServiceInstancesRequest {
	r.maxItems = &maxItems
	return r
}

func (r ApiGetAllServiceInstancesRequest) Execute() (*ServiceInstanceResponseList, *http.Response, error) {
	return r.ApiService.GetAllServiceInstancesExecute(r)
}

/*
GetAllServiceInstances Get all service instances

View the list of all service instances in the subaccount. <br/><br/> Required scopes: <xsappname>.subaccount.service_instance.read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllServiceInstancesRequest
*/
func (a *ServiceInstancesAPIService) GetAllServiceInstances(ctx context.Context) ApiGetAllServiceInstancesRequest {
	return ApiGetAllServiceInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceInstanceResponseList
func (a *ServiceInstancesAPIService) GetAllServiceInstancesExecute(r ApiGetAllServiceInstancesRequest) (*ServiceInstanceResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceInstanceResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.GetAllServiceInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldQuery", r.fieldQuery, "form", "")
	}
	if r.labelQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelQuery", r.labelQuery, "form", "")
	}
	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	if r.maxItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_items", r.maxItems, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInstanceByIdRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	serviceInstanceID string
}

func (r ApiGetServiceInstanceByIdRequest) Execute() (*ServiceInstanceResponseObject, *http.Response, error) {
	return r.ApiService.GetServiceInstanceByIdExecute(r)
}

/*
GetServiceInstanceById Get service instance details

View details of a specific provisioned service instance. <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceInstanceID The ID of the provisioned service instance for which to get details.
 @return ApiGetServiceInstanceByIdRequest
*/
func (a *ServiceInstancesAPIService) GetServiceInstanceById(ctx context.Context, serviceInstanceID string) ApiGetServiceInstanceByIdRequest {
	return ApiGetServiceInstanceByIdRequest{
		ApiService: a,
		ctx: ctx,
		serviceInstanceID: serviceInstanceID,
	}
}

// Execute executes the request
//  @return ServiceInstanceResponseObject
func (a *ServiceInstancesAPIService) GetServiceInstanceByIdExecute(r ApiGetServiceInstanceByIdRequest) (*ServiceInstanceResponseObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceInstanceResponseObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.GetServiceInstanceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_instances/{serviceInstanceID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceInstanceID"+"}", url.PathEscape(parameterValueToString(r.serviceInstanceID, "serviceInstanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInstanceParametersRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	serviceInstanceID string
}

func (r ApiGetServiceInstanceParametersRequest) Execute() (map[string]string, *http.Response, error) {
	return r.ApiService.GetServiceInstanceParametersExecute(r)
}

/*
GetServiceInstanceParameters Get service instance parameters

View the additional configuration parameters of a specified provisioned service instance.<br><br>The configuration parameters were provided either during the creation of the instance as part of the request payload of the API: *POST/v1/service_instances*, or during the update of the service instance by using the API: *PATCH/v1/service_instances.*<br/><br/>**Prerequisite:**<br/>To get configuration parameters, instances_retrievable field of the service offering to which this service instance relates, must be set to true ("instances_retrievable":true).<br/>To check, use the API: *GET /v1/service_offerings/{serviceOfferingID}*<br/><br/> Required scopes: <xsappname>.subaccount.service_instance.read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceInstanceID The ID of the provisioned service instance for which to get parameters.
 @return ApiGetServiceInstanceParametersRequest
*/
func (a *ServiceInstancesAPIService) GetServiceInstanceParameters(ctx context.Context, serviceInstanceID string) ApiGetServiceInstanceParametersRequest {
	return ApiGetServiceInstanceParametersRequest{
		ApiService: a,
		ctx: ctx,
		serviceInstanceID: serviceInstanceID,
	}
}

// Execute executes the request
//  @return map[string]string
func (a *ServiceInstancesAPIService) GetServiceInstanceParametersExecute(r ApiGetServiceInstanceParametersRequest) (map[string]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.GetServiceInstanceParameters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_instances/{serviceInstanceID}/parameters"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceInstanceID"+"}", url.PathEscape(parameterValueToString(r.serviceInstanceID, "serviceInstanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateServiceInstanceRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	serviceInstanceID string
	updateServiceInstanceRequestPayload *UpdateServiceInstanceRequestPayload
	async *bool
}

// Details of the service instance to update.
func (r ApiUpdateServiceInstanceRequest) UpdateServiceInstanceRequestPayload(updateServiceInstanceRequestPayload UpdateServiceInstanceRequestPayload) ApiUpdateServiceInstanceRequest {
	r.updateServiceInstanceRequestPayload = &updateServiceInstanceRequestPayload
	return r
}

// Whether to perform this operation asynchronously.
func (r ApiUpdateServiceInstanceRequest) Async(async bool) ApiUpdateServiceInstanceRequest {
	r.async = &async
	return r
}

func (r ApiUpdateServiceInstanceRequest) Execute() (*UpdatedServiceInstanceResponseObject, *http.Response, error) {
	return r.ApiService.UpdateServiceInstanceExecute(r)
}

/*
UpdateServiceInstance Update a service instance

Update details of a specified provisioned service instance. <br/><br/>Required scopes: <xsappname>.subaccount.service_instance.manage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceInstanceID The ID of the provisioned service instance to update.
 @return ApiUpdateServiceInstanceRequest
*/
func (a *ServiceInstancesAPIService) UpdateServiceInstance(ctx context.Context, serviceInstanceID string) ApiUpdateServiceInstanceRequest {
	return ApiUpdateServiceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceInstanceID: serviceInstanceID,
	}
}

// Execute executes the request
//  @return UpdatedServiceInstanceResponseObject
func (a *ServiceInstancesAPIService) UpdateServiceInstanceExecute(r ApiUpdateServiceInstanceRequest) (*UpdatedServiceInstanceResponseObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdatedServiceInstanceResponseObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.UpdateServiceInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/service_instances/{serviceInstanceID}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceInstanceID"+"}", url.PathEscape(parameterValueToString(r.serviceInstanceID, "serviceInstanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateServiceInstanceRequestPayload == nil {
		return localVarReturnValue, nil, reportError("updateServiceInstanceRequestPayload is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateServiceInstanceRequestPayload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
