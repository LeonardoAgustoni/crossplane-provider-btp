/*
Entitlements Service

The Entitlements service provides REST APIs that manage the assignments of entitlements and quotas to subaccounts and directories.   Entitlements and their quota are automatically assigned to the global account when a customer order is fulfilled. Use the APIs in this service to manage the distribution of this global quota to your directories and subaccounts.   NOTE: These APIs are relevant only for cloud management tools feature set B. For details and information about whether this applies to your global account, see [Cloud Management Tools - Feature Set Overview](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/caf4e4e23aef4666ad8f125af393dfb2.html).  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DirectoryAssignmentsPatchUpdateRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectoryAssignmentsPatchUpdateRequestPayload{}

// DirectoryAssignmentsPatchUpdateRequestPayload struct for DirectoryAssignmentsPatchUpdateRequestPayload
type DirectoryAssignmentsPatchUpdateRequestPayload struct {
	// Whether to automatically allocate the plans of entitlements that have a numeric quota with the amount specified in auto-distribute-amount to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, the plan is assigned to any new subaccount that is added to the directory in the future with the condition that enable=TRUE is set (autoDistributeAmount is not relevant in this case). If distribute=TRUE, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
	AutoAssign *bool `json:"autoAssign,omitempty"`
	// The quota of the specified plan to automatically allocate to any new subaccount that is created in the future in the directory. When applying this option, you must set autoAssign=TRUE and/or distribute=TRUE. Applies only to entitlements that have a numeric quota. Entitlements are subject to available quota in the directory.
	AutoDistributeAmount *int32 `json:"autoDistributeAmount,omitempty"`
	// Whether to assign the plan with the quota specified in autoDistributeAmount to subaccounts currently located in the specified directory. For entitlements without a numeric quota, such as multitenant apps, the plan is assigned to the subaccounts currently located in the directory (autoDistributeAmount is not relevant in this case). In both cases, autoAssign must be set to TRUE.
	Distribute *bool `json:"distribute,omitempty"`
	// The technical name of the entitlement to assign to the directory.
	Plan string `json:"plan"`
	// A unique identifier for service plans that can distinguish between the same service plans with different pricing plans.
	PlanUniqueIdentifier *string `json:"planUniqueIdentifier,omitempty"`
	// The technical name of the entitlement (service, application, environment) to assign.
	Service string `json:"service"`
}

type _DirectoryAssignmentsPatchUpdateRequestPayload DirectoryAssignmentsPatchUpdateRequestPayload

// NewDirectoryAssignmentsPatchUpdateRequestPayload instantiates a new DirectoryAssignmentsPatchUpdateRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectoryAssignmentsPatchUpdateRequestPayload(plan string, service string) *DirectoryAssignmentsPatchUpdateRequestPayload {
	this := DirectoryAssignmentsPatchUpdateRequestPayload{}
	this.Plan = plan
	this.Service = service
	return &this
}

// NewDirectoryAssignmentsPatchUpdateRequestPayloadWithDefaults instantiates a new DirectoryAssignmentsPatchUpdateRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectoryAssignmentsPatchUpdateRequestPayloadWithDefaults() *DirectoryAssignmentsPatchUpdateRequestPayload {
	this := DirectoryAssignmentsPatchUpdateRequestPayload{}
	return &this
}

// GetAutoAssign returns the AutoAssign field value if set, zero value otherwise.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetAutoAssign() bool {
	if o == nil || IsNil(o.AutoAssign) {
		var ret bool
		return ret
	}
	return *o.AutoAssign
}

// GetAutoAssignOk returns a tuple with the AutoAssign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetAutoAssignOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoAssign) {
		return nil, false
	}
	return o.AutoAssign, true
}

// HasAutoAssign returns a boolean if a field has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) HasAutoAssign() bool {
	if o != nil && !IsNil(o.AutoAssign) {
		return true
	}

	return false
}

// SetAutoAssign gets a reference to the given bool and assigns it to the AutoAssign field.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) SetAutoAssign(v bool) {
	o.AutoAssign = &v
}

// GetAutoDistributeAmount returns the AutoDistributeAmount field value if set, zero value otherwise.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetAutoDistributeAmount() int32 {
	if o == nil || IsNil(o.AutoDistributeAmount) {
		var ret int32
		return ret
	}
	return *o.AutoDistributeAmount
}

// GetAutoDistributeAmountOk returns a tuple with the AutoDistributeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetAutoDistributeAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.AutoDistributeAmount) {
		return nil, false
	}
	return o.AutoDistributeAmount, true
}

// HasAutoDistributeAmount returns a boolean if a field has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) HasAutoDistributeAmount() bool {
	if o != nil && !IsNil(o.AutoDistributeAmount) {
		return true
	}

	return false
}

// SetAutoDistributeAmount gets a reference to the given int32 and assigns it to the AutoDistributeAmount field.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) SetAutoDistributeAmount(v int32) {
	o.AutoDistributeAmount = &v
}

// GetDistribute returns the Distribute field value if set, zero value otherwise.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetDistribute() bool {
	if o == nil || IsNil(o.Distribute) {
		var ret bool
		return ret
	}
	return *o.Distribute
}

// GetDistributeOk returns a tuple with the Distribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetDistributeOk() (*bool, bool) {
	if o == nil || IsNil(o.Distribute) {
		return nil, false
	}
	return o.Distribute, true
}

// HasDistribute returns a boolean if a field has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) HasDistribute() bool {
	if o != nil && !IsNil(o.Distribute) {
		return true
	}

	return false
}

// SetDistribute gets a reference to the given bool and assigns it to the Distribute field.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) SetDistribute(v bool) {
	o.Distribute = &v
}

// GetPlan returns the Plan field value
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetPlan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) SetPlan(v string) {
	o.Plan = v
}

// GetPlanUniqueIdentifier returns the PlanUniqueIdentifier field value if set, zero value otherwise.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetPlanUniqueIdentifier() string {
	if o == nil || IsNil(o.PlanUniqueIdentifier) {
		var ret string
		return ret
	}
	return *o.PlanUniqueIdentifier
}

// GetPlanUniqueIdentifierOk returns a tuple with the PlanUniqueIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetPlanUniqueIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.PlanUniqueIdentifier) {
		return nil, false
	}
	return o.PlanUniqueIdentifier, true
}

// HasPlanUniqueIdentifier returns a boolean if a field has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) HasPlanUniqueIdentifier() bool {
	if o != nil && !IsNil(o.PlanUniqueIdentifier) {
		return true
	}

	return false
}

// SetPlanUniqueIdentifier gets a reference to the given string and assigns it to the PlanUniqueIdentifier field.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) SetPlanUniqueIdentifier(v string) {
	o.PlanUniqueIdentifier = &v
}

// GetService returns the Service field value
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *DirectoryAssignmentsPatchUpdateRequestPayload) SetService(v string) {
	o.Service = v
}

func (o DirectoryAssignmentsPatchUpdateRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectoryAssignmentsPatchUpdateRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoAssign) {
		toSerialize["autoAssign"] = o.AutoAssign
	}
	if !IsNil(o.AutoDistributeAmount) {
		toSerialize["autoDistributeAmount"] = o.AutoDistributeAmount
	}
	if !IsNil(o.Distribute) {
		toSerialize["distribute"] = o.Distribute
	}
	toSerialize["plan"] = o.Plan
	if !IsNil(o.PlanUniqueIdentifier) {
		toSerialize["planUniqueIdentifier"] = o.PlanUniqueIdentifier
	}
	toSerialize["service"] = o.Service
	return toSerialize, nil
}

func (o *DirectoryAssignmentsPatchUpdateRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDirectoryAssignmentsPatchUpdateRequestPayload := _DirectoryAssignmentsPatchUpdateRequestPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDirectoryAssignmentsPatchUpdateRequestPayload)

	if err != nil {
		return err
	}

	*o = DirectoryAssignmentsPatchUpdateRequestPayload(varDirectoryAssignmentsPatchUpdateRequestPayload)

	return err
}

type NullableDirectoryAssignmentsPatchUpdateRequestPayload struct {
	value *DirectoryAssignmentsPatchUpdateRequestPayload
	isSet bool
}

func (v NullableDirectoryAssignmentsPatchUpdateRequestPayload) Get() *DirectoryAssignmentsPatchUpdateRequestPayload {
	return v.value
}

func (v *NullableDirectoryAssignmentsPatchUpdateRequestPayload) Set(val *DirectoryAssignmentsPatchUpdateRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectoryAssignmentsPatchUpdateRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectoryAssignmentsPatchUpdateRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectoryAssignmentsPatchUpdateRequestPayload(val *DirectoryAssignmentsPatchUpdateRequestPayload) *NullableDirectoryAssignmentsPatchUpdateRequestPayload {
	return &NullableDirectoryAssignmentsPatchUpdateRequestPayload{value: val, isSet: true}
}

func (v NullableDirectoryAssignmentsPatchUpdateRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectoryAssignmentsPatchUpdateRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


