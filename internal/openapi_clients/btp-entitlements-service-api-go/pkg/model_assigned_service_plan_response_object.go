/*
Entitlements Service

The Entitlements service provides REST APIs that manage the assignments of entitlements and quotas to subaccounts and directories.   Entitlements and their quota are automatically assigned to the global account when a customer order is fulfilled. Use the APIs in this service to manage the distribution of this global quota to your directories and subaccounts.   NOTE: These APIs are relevant only for cloud management tools feature set B. For details and information about whether this applies to your global account, see [Cloud Management Tools - Feature Set Overview](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/caf4e4e23aef4666ad8f125af393dfb2.html).  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AssignedServicePlanResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignedServicePlanResponseObject{}

// AssignedServicePlanResponseObject List of service plans associated with the assigned service.
type AssignedServicePlanResponseObject struct {
	// Assignment detailed information
	AssignmentInfo []AssignedServicePlanSubaccountDTO `json:"assignmentInfo,omitempty"`
	// Whether the service plan is a beta feature.
	Beta *bool `json:"beta,omitempty"`
	// The type of service offering. Possible values: * <b>PLATFORM:</b> A service required for using a specific platform; for example, Application Runtime is required for the Cloud Foundry platform. * <b>SERVICE:</b> A commercial or technical service. that has a numeric quota (amount) when entitled or assigned to a resource. When assigning entitlements of this type, use the 'amount' option instead of 'enable'. See: PUT/entitlements/v1/directories/{directoryGUID}/assignments. * <b>ELASTIC_SERVICE:</b> A commercial or technical service that has no numeric quota (amount) when entitled or assigned to a resource. Generally this type of service can be as many times as needed when enabled, but may in some cases be restricted by the service owner. When assigning entitlements of this type, use the 'enable' option instead of 'amount'. See: PUT/entitlements/v1/directories/{directoryGUID}/assignments. * <b>ELASTIC_LIMITED:</b> An elastic service that can be enabled for only one subaccount per global account. * <b>APPLICATION:</b> A multitenant application to which consumers can subscribe. As opposed to applications defined as a 'QUOTA_BASED_APPLICATION', these applications do not have a numeric quota and are simply enabled or disabled as entitlements per subaccount. * <b>QUOTA_BASED_APPLICATION:</b> A multitenant application to which consumers can subscribe. As opposed to applications defined as 'APPLICATION', these applications have an numeric quota that limits consumer usage of the subscribed application per subaccount. When maxAllowedSubaccountQuota is > 0, this is the limit that can be set when assigning the max quota entitlement of the app to any subaccount. If maxAllowedSubaccountQuota is = 0 or null, the max quota that can be entitled to any subaccount is the amount purchased by the customer (the global account quota). * <b>ENVIRONMENT:</b> An environment service; for example, Cloud Foundry.
	Category *string `json:"category,omitempty"`
	// The name of the service plan for customer-facing UIs.
	DisplayName *string `json:"displayName,omitempty"`
	// The maximum allowed usage quota per subaccount for multitenant applications and environments that are defined as \"quota-based\". This quota limits the usage of the application and/or environment per subaccount per a given usage metric that is defined within the application or environment by the service provider. If null, the usage limit per subaccount is the maximum free quota in the global account. For example, a value of 1 could: (1) limit the number of subscriptions to a quota-based multitenant application within a global account according to the purchased quota, or (2) restrict the enablement of a single instance of an environment per subaccount.
	MaxAllowedSubaccountQuota *int32 `json:"maxAllowedSubaccountQuota,omitempty"`
	// The unique registration name of the service plan.
	Name *string `json:"name,omitempty"`
	// A unique identifier for service plans that can distinguish between the same service plans with different pricing plans.
	UniqueIdentifier *string `json:"uniqueIdentifier,omitempty"`
	// Is the quota of this service plan entitled to the global account with unlimited usage.
	Unlimited *bool `json:"unlimited,omitempty"`
}

// NewAssignedServicePlanResponseObject instantiates a new AssignedServicePlanResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignedServicePlanResponseObject() *AssignedServicePlanResponseObject {
	this := AssignedServicePlanResponseObject{}
	return &this
}

// NewAssignedServicePlanResponseObjectWithDefaults instantiates a new AssignedServicePlanResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignedServicePlanResponseObjectWithDefaults() *AssignedServicePlanResponseObject {
	this := AssignedServicePlanResponseObject{}
	return &this
}

// GetAssignmentInfo returns the AssignmentInfo field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetAssignmentInfo() []AssignedServicePlanSubaccountDTO {
	if o == nil || IsNil(o.AssignmentInfo) {
		var ret []AssignedServicePlanSubaccountDTO
		return ret
	}
	return o.AssignmentInfo
}

// GetAssignmentInfoOk returns a tuple with the AssignmentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetAssignmentInfoOk() ([]AssignedServicePlanSubaccountDTO, bool) {
	if o == nil || IsNil(o.AssignmentInfo) {
		return nil, false
	}
	return o.AssignmentInfo, true
}

// HasAssignmentInfo returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasAssignmentInfo() bool {
	if o != nil && !IsNil(o.AssignmentInfo) {
		return true
	}

	return false
}

// SetAssignmentInfo gets a reference to the given []AssignedServicePlanSubaccountDTO and assigns it to the AssignmentInfo field.
func (o *AssignedServicePlanResponseObject) SetAssignmentInfo(v []AssignedServicePlanSubaccountDTO) {
	o.AssignmentInfo = v
}

// GetBeta returns the Beta field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetBeta() bool {
	if o == nil || IsNil(o.Beta) {
		var ret bool
		return ret
	}
	return *o.Beta
}

// GetBetaOk returns a tuple with the Beta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetBetaOk() (*bool, bool) {
	if o == nil || IsNil(o.Beta) {
		return nil, false
	}
	return o.Beta, true
}

// HasBeta returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasBeta() bool {
	if o != nil && !IsNil(o.Beta) {
		return true
	}

	return false
}

// SetBeta gets a reference to the given bool and assigns it to the Beta field.
func (o *AssignedServicePlanResponseObject) SetBeta(v bool) {
	o.Beta = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *AssignedServicePlanResponseObject) SetCategory(v string) {
	o.Category = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AssignedServicePlanResponseObject) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMaxAllowedSubaccountQuota returns the MaxAllowedSubaccountQuota field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetMaxAllowedSubaccountQuota() int32 {
	if o == nil || IsNil(o.MaxAllowedSubaccountQuota) {
		var ret int32
		return ret
	}
	return *o.MaxAllowedSubaccountQuota
}

// GetMaxAllowedSubaccountQuotaOk returns a tuple with the MaxAllowedSubaccountQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetMaxAllowedSubaccountQuotaOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAllowedSubaccountQuota) {
		return nil, false
	}
	return o.MaxAllowedSubaccountQuota, true
}

// HasMaxAllowedSubaccountQuota returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasMaxAllowedSubaccountQuota() bool {
	if o != nil && !IsNil(o.MaxAllowedSubaccountQuota) {
		return true
	}

	return false
}

// SetMaxAllowedSubaccountQuota gets a reference to the given int32 and assigns it to the MaxAllowedSubaccountQuota field.
func (o *AssignedServicePlanResponseObject) SetMaxAllowedSubaccountQuota(v int32) {
	o.MaxAllowedSubaccountQuota = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssignedServicePlanResponseObject) SetName(v string) {
	o.Name = &v
}

// GetUniqueIdentifier returns the UniqueIdentifier field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetUniqueIdentifier() string {
	if o == nil || IsNil(o.UniqueIdentifier) {
		var ret string
		return ret
	}
	return *o.UniqueIdentifier
}

// GetUniqueIdentifierOk returns a tuple with the UniqueIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetUniqueIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueIdentifier) {
		return nil, false
	}
	return o.UniqueIdentifier, true
}

// HasUniqueIdentifier returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasUniqueIdentifier() bool {
	if o != nil && !IsNil(o.UniqueIdentifier) {
		return true
	}

	return false
}

// SetUniqueIdentifier gets a reference to the given string and assigns it to the UniqueIdentifier field.
func (o *AssignedServicePlanResponseObject) SetUniqueIdentifier(v string) {
	o.UniqueIdentifier = &v
}

// GetUnlimited returns the Unlimited field value if set, zero value otherwise.
func (o *AssignedServicePlanResponseObject) GetUnlimited() bool {
	if o == nil || IsNil(o.Unlimited) {
		var ret bool
		return ret
	}
	return *o.Unlimited
}

// GetUnlimitedOk returns a tuple with the Unlimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedServicePlanResponseObject) GetUnlimitedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unlimited) {
		return nil, false
	}
	return o.Unlimited, true
}

// HasUnlimited returns a boolean if a field has been set.
func (o *AssignedServicePlanResponseObject) HasUnlimited() bool {
	if o != nil && !IsNil(o.Unlimited) {
		return true
	}

	return false
}

// SetUnlimited gets a reference to the given bool and assigns it to the Unlimited field.
func (o *AssignedServicePlanResponseObject) SetUnlimited(v bool) {
	o.Unlimited = &v
}

func (o AssignedServicePlanResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignedServicePlanResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssignmentInfo) {
		toSerialize["assignmentInfo"] = o.AssignmentInfo
	}
	if !IsNil(o.Beta) {
		toSerialize["beta"] = o.Beta
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.MaxAllowedSubaccountQuota) {
		toSerialize["maxAllowedSubaccountQuota"] = o.MaxAllowedSubaccountQuota
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UniqueIdentifier) {
		toSerialize["uniqueIdentifier"] = o.UniqueIdentifier
	}
	if !IsNil(o.Unlimited) {
		toSerialize["unlimited"] = o.Unlimited
	}
	return toSerialize, nil
}

type NullableAssignedServicePlanResponseObject struct {
	value *AssignedServicePlanResponseObject
	isSet bool
}

func (v NullableAssignedServicePlanResponseObject) Get() *AssignedServicePlanResponseObject {
	return v.value
}

func (v *NullableAssignedServicePlanResponseObject) Set(val *AssignedServicePlanResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignedServicePlanResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignedServicePlanResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignedServicePlanResponseObject(val *AssignedServicePlanResponseObject) *NullableAssignedServicePlanResponseObject {
	return &NullableAssignedServicePlanResponseObject{value: val, isSet: true}
}

func (v NullableAssignedServicePlanResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignedServicePlanResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


