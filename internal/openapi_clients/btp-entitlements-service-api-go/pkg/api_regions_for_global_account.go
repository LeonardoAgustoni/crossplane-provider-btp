/*
Entitlements Service

The Entitlements service provides REST APIs that manage the assignments of entitlements and quotas to subaccounts and directories.   Entitlements and their quota are automatically assigned to the global account when a customer order is fulfilled. Use the APIs in this service to manage the distribution of this global quota to your directories and subaccounts.   NOTE: These APIs are relevant only for cloud management tools feature set B. For details and information about whether this applies to your global account, see [Cloud Management Tools - Feature Set Overview](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/caf4e4e23aef4666ad8f125af393dfb2.html).  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// RegionsForGlobalAccountAPIService RegionsForGlobalAccountAPI service
type RegionsForGlobalAccountAPIService service

type ApiGetAllowedDataCentersRequest struct {
	ctx context.Context
	ApiService *RegionsForGlobalAccountAPIService
	region *string
	includeSatelliteDataCenters *bool
	acceptLanguage *string
}

// Region for which to get data centers.
func (r ApiGetAllowedDataCentersRequest) Region(region string) ApiGetAllowedDataCentersRequest {
	r.region = &region
	return r
}

// Whether to list also satellite data centers in regions that comprise multiple data centers. When omitted, only data centers that are defined as a main data center are listed.
func (r ApiGetAllowedDataCentersRequest) IncludeSatelliteDataCenters(includeSatelliteDataCenters bool) ApiGetAllowedDataCentersRequest {
	r.includeSatelliteDataCenters = &includeSatelliteDataCenters
	return r
}

// Indicates the natural language and locale that the client prefers.
func (r ApiGetAllowedDataCentersRequest) AcceptLanguage(acceptLanguage string) ApiGetAllowedDataCentersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetAllowedDataCentersRequest) Execute() (*DataCenterResponseCollection, *http.Response, error) {
	return r.ApiService.GetAllowedDataCentersExecute(r)
}

/*
GetAllowedDataCenters Get available data centers

Get all data centers that are available for the global account, including information such as their names, regions where they are located, and their IaaS providers.<br/><br/>Returns only data centers that are defined as a main data center. For regions that comprise multiple data centers, use the includeSatelliteDataCenters parameter to list also the regions' satellite data centers.<br/><br/>Required scopes: $XSAPPNAME.global-account.region.read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllowedDataCentersRequest
*/
func (a *RegionsForGlobalAccountAPIService) GetAllowedDataCenters(ctx context.Context) ApiGetAllowedDataCentersRequest {
	return ApiGetAllowedDataCentersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataCenterResponseCollection
func (a *RegionsForGlobalAccountAPIService) GetAllowedDataCentersExecute(r ApiGetAllowedDataCentersRequest) (*DataCenterResponseCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataCenterResponseCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegionsForGlobalAccountAPIService.GetAllowedDataCenters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entitlements/v1/globalAccountAllowedDataCenters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	if r.includeSatelliteDataCenters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSatelliteDataCenters", r.includeSatelliteDataCenters, "form", "")
	} else {
		var defaultValue bool = false
		r.includeSatelliteDataCenters = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiExceptionResponseObject
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiExceptionResponseObject
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
